
SPMS_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a404  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000514  0800a5a8  0800a5a8  0001a5a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aabc  0800aabc  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800aabc  0800aabc  0001aabc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aac4  0800aac4  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aac4  0800aac4  0001aac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aac8  0800aac8  0001aac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800aacc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e0  200001ec  0800acb8  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003cc  0800acb8  000203cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012ae1  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024d1  00000000  00000000  00032cfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001150  00000000  00000000  000351d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001080  00000000  00000000  00036320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018c69  00000000  00000000  000373a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000145f0  00000000  00000000  00050009  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d221  00000000  00000000  000645f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010181a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006240  00000000  00000000  0010186c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001ec 	.word	0x200001ec
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a58c 	.word	0x0800a58c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f0 	.word	0x200001f0
 80001dc:	0800a58c 	.word	0x0800a58c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <convInt>:
////////////////////////////////////////////////////////////////////LCD CODE

#define SLAVE_ADDRESS_LCD 0x3F<<1


int convInt(uint32_t dump){
 8001008:	b580      	push	{r7, lr}
 800100a:	b09c      	sub	sp, #112	; 0x70
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
	char data[100];
	sprintf(data,"%lu", dump);
 8001010:	f107 030c 	add.w	r3, r7, #12
 8001014:	687a      	ldr	r2, [r7, #4]
 8001016:	4908      	ldr	r1, [pc, #32]	; (8001038 <convInt+0x30>)
 8001018:	4618      	mov	r0, r3
 800101a:	f005 f88f 	bl	800613c <siprintf>
	int dataInt;
	sscanf(data, "%d", &dataInt);
 800101e:	f107 0208 	add.w	r2, r7, #8
 8001022:	f107 030c 	add.w	r3, r7, #12
 8001026:	4905      	ldr	r1, [pc, #20]	; (800103c <convInt+0x34>)
 8001028:	4618      	mov	r0, r3
 800102a:	f005 f8a7 	bl	800617c <siscanf>
	return dataInt;
 800102e:	68bb      	ldr	r3, [r7, #8]
}
 8001030:	4618      	mov	r0, r3
 8001032:	3770      	adds	r7, #112	; 0x70
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	0800a5a8 	.word	0x0800a5a8
 800103c:	0800a5ac 	.word	0x0800a5ac

08001040 <lcd_send_cmd>:

void lcd_send_cmd (char cmd)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af02      	add	r7, sp, #8
 8001046:	4603      	mov	r3, r0
 8001048:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	f023 030f 	bic.w	r3, r3, #15
 8001050:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	011b      	lsls	r3, r3, #4
 8001056:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;
 8001058:	7bfb      	ldrb	r3, [r7, #15]
 800105a:	f043 030c 	orr.w	r3, r3, #12
 800105e:	b2db      	uxtb	r3, r3
 8001060:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;
 8001062:	7bfb      	ldrb	r3, [r7, #15]
 8001064:	f043 0308 	orr.w	r3, r3, #8
 8001068:	b2db      	uxtb	r3, r3
 800106a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;
 800106c:	7bbb      	ldrb	r3, [r7, #14]
 800106e:	f043 030c 	orr.w	r3, r3, #12
 8001072:	b2db      	uxtb	r3, r3
 8001074:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;
 8001076:	7bbb      	ldrb	r3, [r7, #14]
 8001078:	f043 0308 	orr.w	r3, r3, #8
 800107c:	b2db      	uxtb	r3, r3
 800107e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001080:	f107 0208 	add.w	r2, r7, #8
 8001084:	2364      	movs	r3, #100	; 0x64
 8001086:	9300      	str	r3, [sp, #0]
 8001088:	2304      	movs	r3, #4
 800108a:	217e      	movs	r1, #126	; 0x7e
 800108c:	4803      	ldr	r0, [pc, #12]	; (800109c <lcd_send_cmd+0x5c>)
 800108e:	f002 fc47 	bl	8003920 <HAL_I2C_Master_Transmit>
}
 8001092:	bf00      	nop
 8001094:	3710      	adds	r7, #16
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	200002b0 	.word	0x200002b0

080010a0 <lcd_send_data>:

void lcd_send_data (char data)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af02      	add	r7, sp, #8
 80010a6:	4603      	mov	r3, r0
 80010a8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	f023 030f 	bic.w	r3, r3, #15
 80010b0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80010b2:	79fb      	ldrb	r3, [r7, #7]
 80010b4:	011b      	lsls	r3, r3, #4
 80010b6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;
 80010b8:	7bfb      	ldrb	r3, [r7, #15]
 80010ba:	f043 030d 	orr.w	r3, r3, #13
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;
 80010c2:	7bfb      	ldrb	r3, [r7, #15]
 80010c4:	f043 0309 	orr.w	r3, r3, #9
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;
 80010cc:	7bbb      	ldrb	r3, [r7, #14]
 80010ce:	f043 030d 	orr.w	r3, r3, #13
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;
 80010d6:	7bbb      	ldrb	r3, [r7, #14]
 80010d8:	f043 0309 	orr.w	r3, r3, #9
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80010e0:	f107 0208 	add.w	r2, r7, #8
 80010e4:	2364      	movs	r3, #100	; 0x64
 80010e6:	9300      	str	r3, [sp, #0]
 80010e8:	2304      	movs	r3, #4
 80010ea:	217e      	movs	r1, #126	; 0x7e
 80010ec:	4803      	ldr	r0, [pc, #12]	; (80010fc <lcd_send_data+0x5c>)
 80010ee:	f002 fc17 	bl	8003920 <HAL_I2C_Master_Transmit>
}
 80010f2:	bf00      	nop
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	200002b0 	.word	0x200002b0

08001100 <lcd_init>:

void lcd_init (void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8001104:	2032      	movs	r0, #50	; 0x32
 8001106:	f000 ff6d 	bl	8001fe4 <HAL_Delay>
	lcd_send_cmd (0x30);
 800110a:	2030      	movs	r0, #48	; 0x30
 800110c:	f7ff ff98 	bl	8001040 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8001110:	2005      	movs	r0, #5
 8001112:	f000 ff67 	bl	8001fe4 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001116:	2030      	movs	r0, #48	; 0x30
 8001118:	f7ff ff92 	bl	8001040 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 800111c:	2001      	movs	r0, #1
 800111e:	f000 ff61 	bl	8001fe4 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001122:	2030      	movs	r0, #48	; 0x30
 8001124:	f7ff ff8c 	bl	8001040 <lcd_send_cmd>
	HAL_Delay(10);
 8001128:	200a      	movs	r0, #10
 800112a:	f000 ff5b 	bl	8001fe4 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 800112e:	2020      	movs	r0, #32
 8001130:	f7ff ff86 	bl	8001040 <lcd_send_cmd>
	HAL_Delay(10);
 8001134:	200a      	movs	r0, #10
 8001136:	f000 ff55 	bl	8001fe4 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x20); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800113a:	2020      	movs	r0, #32
 800113c:	f7ff ff80 	bl	8001040 <lcd_send_cmd>
	HAL_Delay(1);
 8001140:	2001      	movs	r0, #1
 8001142:	f000 ff4f 	bl	8001fe4 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001146:	2008      	movs	r0, #8
 8001148:	f7ff ff7a 	bl	8001040 <lcd_send_cmd>
	HAL_Delay(1);
 800114c:	2001      	movs	r0, #1
 800114e:	f000 ff49 	bl	8001fe4 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001152:	2001      	movs	r0, #1
 8001154:	f7ff ff74 	bl	8001040 <lcd_send_cmd>
	HAL_Delay(1);
 8001158:	2001      	movs	r0, #1
 800115a:	f000 ff43 	bl	8001fe4 <HAL_Delay>
	HAL_Delay(1);
 800115e:	2001      	movs	r0, #1
 8001160:	f000 ff40 	bl	8001fe4 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001164:	2006      	movs	r0, #6
 8001166:	f7ff ff6b 	bl	8001040 <lcd_send_cmd>
	HAL_Delay(1);
 800116a:	2001      	movs	r0, #1
 800116c:	f000 ff3a 	bl	8001fe4 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001170:	200c      	movs	r0, #12
 8001172:	f7ff ff65 	bl	8001040 <lcd_send_cmd>
}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}

0800117a <lcd_clear>:

void lcd_clear (void)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	b082      	sub	sp, #8
 800117e:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8001180:	2080      	movs	r0, #128	; 0x80
 8001182:	f7ff ff5d 	bl	8001040 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8001186:	2300      	movs	r3, #0
 8001188:	607b      	str	r3, [r7, #4]
 800118a:	e005      	b.n	8001198 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 800118c:	2020      	movs	r0, #32
 800118e:	f7ff ff87 	bl	80010a0 <lcd_send_data>
	for (int i=0; i<70; i++)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	3301      	adds	r3, #1
 8001196:	607b      	str	r3, [r7, #4]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2b45      	cmp	r3, #69	; 0x45
 800119c:	ddf6      	ble.n	800118c <lcd_clear+0x12>
	}
}
 800119e:	bf00      	nop
 80011a0:	bf00      	nop
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	6039      	str	r1, [r7, #0]
    switch (row)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d003      	beq.n	80011c0 <lcd_put_cur+0x18>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d005      	beq.n	80011ca <lcd_put_cur+0x22>
 80011be:	e009      	b.n	80011d4 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011c6:	603b      	str	r3, [r7, #0]
            break;
 80011c8:	e004      	b.n	80011d4 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80011d0:	603b      	str	r3, [r7, #0]
            break;
 80011d2:	bf00      	nop
    }
    lcd_send_cmd (col);
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff ff31 	bl	8001040 <lcd_send_cmd>
}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <lcd_send_string>:

void lcd_send_string (char *str)
{
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b082      	sub	sp, #8
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80011ee:	e006      	b.n	80011fe <lcd_send_string+0x18>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	1c5a      	adds	r2, r3, #1
 80011f4:	607a      	str	r2, [r7, #4]
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff ff51 	bl	80010a0 <lcd_send_data>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d1f4      	bne.n	80011f0 <lcd_send_string+0xa>
}
 8001206:	bf00      	nop
 8001208:	bf00      	nop
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <showLCD>:


void showLCD(char dump[100],int col, int row,bool cls){
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	607a      	str	r2, [r7, #4]
 800121c:	70fb      	strb	r3, [r7, #3]
	if(cls){
 800121e:	78fb      	ldrb	r3, [r7, #3]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <showLCD+0x18>
		lcd_clear ();
 8001224:	f7ff ffa9 	bl	800117a <lcd_clear>
	}
	lcd_put_cur(row,col);
 8001228:	68b9      	ldr	r1, [r7, #8]
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f7ff ffbc 	bl	80011a8 <lcd_put_cur>
	lcd_send_string (dump);
 8001230:	68f8      	ldr	r0, [r7, #12]
 8001232:	f7ff ffd8 	bl	80011e6 <lcd_send_string>
}
 8001236:	bf00      	nop
 8001238:	3710      	adds	r7, #16
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
	...

08001240 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001240:	b5b0      	push	{r4, r5, r7, lr}
 8001242:	b0a4      	sub	sp, #144	; 0x90
 8001244:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001246:	f000 fe5b 	bl	8001f00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800124a:	f000 f971 	bl	8001530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800124e:	f000 fb1b 	bl	8001888 <MX_GPIO_Init>
  MX_DMA_Init();
 8001252:	f000 faf9 	bl	8001848 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001256:	f000 facd 	bl	80017f4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800125a:	f000 f9d5 	bl	8001608 <MX_ADC1_Init>
  MX_TIM2_Init();
 800125e:	f000 fa7d 	bl	800175c <MX_TIM2_Init>
  MX_I2C1_Init();
 8001262:	f000 fa4d 	bl	8001700 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim2);
 8001266:	489e      	ldr	r0, [pc, #632]	; (80014e0 <main+0x2a0>)
 8001268:	f003 fb4a 	bl	8004900 <HAL_TIM_Base_Start>
  HAL_ADC_Start_DMA(&hadc1, adcRaw, 4);
 800126c:	2204      	movs	r2, #4
 800126e:	499d      	ldr	r1, [pc, #628]	; (80014e4 <main+0x2a4>)
 8001270:	489d      	ldr	r0, [pc, #628]	; (80014e8 <main+0x2a8>)
 8001272:	f001 f82f 	bl	80022d4 <HAL_ADC_Start_DMA>


  lcd_init(); /// LCD INITIAISE
 8001276:	f7ff ff43 	bl	8001100 <lcd_init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  char voltageLCD[30]; char currentLCD[30]; char tempLCD[30]; char luxLCD[30]; // LCD CHARACTER VARIABLES

	  int voltageADC = convInt(adcRaw[0]);
 800127a:	4b9a      	ldr	r3, [pc, #616]	; (80014e4 <main+0x2a4>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff fec2 	bl	8001008 <convInt>
 8001284:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	  int shuntVolADC = convInt(adcRaw[1]);
 8001288:	4b96      	ldr	r3, [pc, #600]	; (80014e4 <main+0x2a4>)
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff febb 	bl	8001008 <convInt>
 8001292:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
	  int tempADC = convInt(adcRaw[2]);
 8001296:	4b93      	ldr	r3, [pc, #588]	; (80014e4 <main+0x2a4>)
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff feb4 	bl	8001008 <convInt>
 80012a0:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
	  int luxADC = convInt(adcRaw[3]);
 80012a4:	4b8f      	ldr	r3, [pc, #572]	; (80014e4 <main+0x2a4>)
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff fead 	bl	8001008 <convInt>
 80012ae:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80

	  voltage = voltageADC * (5.0/4095.0) * ((R1 + R2)/R2);
 80012b2:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80012b6:	f7ff f93d 	bl	8000534 <__aeabi_i2d>
 80012ba:	a383      	add	r3, pc, #524	; (adr r3, 80014c8 <main+0x288>)
 80012bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c0:	f7ff f9a2 	bl	8000608 <__aeabi_dmul>
 80012c4:	4602      	mov	r2, r0
 80012c6:	460b      	mov	r3, r1
 80012c8:	4614      	mov	r4, r2
 80012ca:	461d      	mov	r5, r3
 80012cc:	4b87      	ldr	r3, [pc, #540]	; (80014ec <main+0x2ac>)
 80012ce:	ed93 7a00 	vldr	s14, [r3]
 80012d2:	4b87      	ldr	r3, [pc, #540]	; (80014f0 <main+0x2b0>)
 80012d4:	edd3 7a00 	vldr	s15, [r3]
 80012d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012dc:	4b84      	ldr	r3, [pc, #528]	; (80014f0 <main+0x2b0>)
 80012de:	edd3 7a00 	vldr	s15, [r3]
 80012e2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80012e6:	ee16 0a90 	vmov	r0, s13
 80012ea:	f7ff f935 	bl	8000558 <__aeabi_f2d>
 80012ee:	4602      	mov	r2, r0
 80012f0:	460b      	mov	r3, r1
 80012f2:	4620      	mov	r0, r4
 80012f4:	4629      	mov	r1, r5
 80012f6:	f7ff f987 	bl	8000608 <__aeabi_dmul>
 80012fa:	4602      	mov	r2, r0
 80012fc:	460b      	mov	r3, r1
 80012fe:	4610      	mov	r0, r2
 8001300:	4619      	mov	r1, r3
 8001302:	f7ff fc79 	bl	8000bf8 <__aeabi_d2f>
 8001306:	4603      	mov	r3, r0
 8001308:	4a7a      	ldr	r2, [pc, #488]	; (80014f4 <main+0x2b4>)
 800130a:	6013      	str	r3, [r2, #0]
	  shuntVol = shuntVolADC * (5.0/4095.0) * ((R1 + R2)/R2);
 800130c:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001310:	f7ff f910 	bl	8000534 <__aeabi_i2d>
 8001314:	a36c      	add	r3, pc, #432	; (adr r3, 80014c8 <main+0x288>)
 8001316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800131a:	f7ff f975 	bl	8000608 <__aeabi_dmul>
 800131e:	4602      	mov	r2, r0
 8001320:	460b      	mov	r3, r1
 8001322:	4614      	mov	r4, r2
 8001324:	461d      	mov	r5, r3
 8001326:	4b71      	ldr	r3, [pc, #452]	; (80014ec <main+0x2ac>)
 8001328:	ed93 7a00 	vldr	s14, [r3]
 800132c:	4b70      	ldr	r3, [pc, #448]	; (80014f0 <main+0x2b0>)
 800132e:	edd3 7a00 	vldr	s15, [r3]
 8001332:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001336:	4b6e      	ldr	r3, [pc, #440]	; (80014f0 <main+0x2b0>)
 8001338:	edd3 7a00 	vldr	s15, [r3]
 800133c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001340:	ee16 0a90 	vmov	r0, s13
 8001344:	f7ff f908 	bl	8000558 <__aeabi_f2d>
 8001348:	4602      	mov	r2, r0
 800134a:	460b      	mov	r3, r1
 800134c:	4620      	mov	r0, r4
 800134e:	4629      	mov	r1, r5
 8001350:	f7ff f95a 	bl	8000608 <__aeabi_dmul>
 8001354:	4602      	mov	r2, r0
 8001356:	460b      	mov	r3, r1
 8001358:	4610      	mov	r0, r2
 800135a:	4619      	mov	r1, r3
 800135c:	f7ff fc4c 	bl	8000bf8 <__aeabi_d2f>
 8001360:	4603      	mov	r3, r0
 8001362:	4a65      	ldr	r2, [pc, #404]	; (80014f8 <main+0x2b8>)
 8001364:	6013      	str	r3, [r2, #0]

	  current = (shuntVol/RShunt)*1000;
 8001366:	4b64      	ldr	r3, [pc, #400]	; (80014f8 <main+0x2b8>)
 8001368:	edd3 6a00 	vldr	s13, [r3]
 800136c:	4b63      	ldr	r3, [pc, #396]	; (80014fc <main+0x2bc>)
 800136e:	ed93 7a00 	vldr	s14, [r3]
 8001372:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001376:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8001500 <main+0x2c0>
 800137a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800137e:	4b61      	ldr	r3, [pc, #388]	; (8001504 <main+0x2c4>)
 8001380:	edc3 7a00 	vstr	s15, [r3]
	  temp = ((tempADC * (5000 / 4095.0))/10)-10;
 8001384:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8001388:	f7ff f8d4 	bl	8000534 <__aeabi_i2d>
 800138c:	a350      	add	r3, pc, #320	; (adr r3, 80014d0 <main+0x290>)
 800138e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001392:	f7ff f939 	bl	8000608 <__aeabi_dmul>
 8001396:	4602      	mov	r2, r0
 8001398:	460b      	mov	r3, r1
 800139a:	4610      	mov	r0, r2
 800139c:	4619      	mov	r1, r3
 800139e:	f04f 0200 	mov.w	r2, #0
 80013a2:	4b59      	ldr	r3, [pc, #356]	; (8001508 <main+0x2c8>)
 80013a4:	f7ff fa5a 	bl	800085c <__aeabi_ddiv>
 80013a8:	4602      	mov	r2, r0
 80013aa:	460b      	mov	r3, r1
 80013ac:	4610      	mov	r0, r2
 80013ae:	4619      	mov	r1, r3
 80013b0:	f04f 0200 	mov.w	r2, #0
 80013b4:	4b54      	ldr	r3, [pc, #336]	; (8001508 <main+0x2c8>)
 80013b6:	f7fe ff6f 	bl	8000298 <__aeabi_dsub>
 80013ba:	4602      	mov	r2, r0
 80013bc:	460b      	mov	r3, r1
 80013be:	4610      	mov	r0, r2
 80013c0:	4619      	mov	r1, r3
 80013c2:	f7ff fc19 	bl	8000bf8 <__aeabi_d2f>
 80013c6:	4603      	mov	r3, r0
 80013c8:	4a50      	ldr	r2, [pc, #320]	; (800150c <main+0x2cc>)
 80013ca:	6013      	str	r3, [r2, #0]

	  lux  = (luxADC/4095.0)*100;
 80013cc:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80013d0:	f7ff f8b0 	bl	8000534 <__aeabi_i2d>
 80013d4:	a340      	add	r3, pc, #256	; (adr r3, 80014d8 <main+0x298>)
 80013d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013da:	f7ff fa3f 	bl	800085c <__aeabi_ddiv>
 80013de:	4602      	mov	r2, r0
 80013e0:	460b      	mov	r3, r1
 80013e2:	4610      	mov	r0, r2
 80013e4:	4619      	mov	r1, r3
 80013e6:	f04f 0200 	mov.w	r2, #0
 80013ea:	4b49      	ldr	r3, [pc, #292]	; (8001510 <main+0x2d0>)
 80013ec:	f7ff f90c 	bl	8000608 <__aeabi_dmul>
 80013f0:	4602      	mov	r2, r0
 80013f2:	460b      	mov	r3, r1
 80013f4:	4610      	mov	r0, r2
 80013f6:	4619      	mov	r1, r3
 80013f8:	f7ff fbb6 	bl	8000b68 <__aeabi_d2iz>
 80013fc:	4603      	mov	r3, r0
 80013fe:	4a45      	ldr	r2, [pc, #276]	; (8001514 <main+0x2d4>)
 8001400:	6013      	str	r3, [r2, #0]


	  sprintf(voltageLCD, "V:%.1fV", voltage);
 8001402:	4b3c      	ldr	r3, [pc, #240]	; (80014f4 <main+0x2b4>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff f8a6 	bl	8000558 <__aeabi_f2d>
 800140c:	4602      	mov	r2, r0
 800140e:	460b      	mov	r3, r1
 8001410:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8001414:	4940      	ldr	r1, [pc, #256]	; (8001518 <main+0x2d8>)
 8001416:	f004 fe91 	bl	800613c <siprintf>
	  showLCD(voltageLCD,0,0,true);
 800141a:	f107 0060 	add.w	r0, r7, #96	; 0x60
 800141e:	2301      	movs	r3, #1
 8001420:	2200      	movs	r2, #0
 8001422:	2100      	movs	r1, #0
 8001424:	f7ff fef4 	bl	8001210 <showLCD>

	  sprintf(currentLCD, "I:%.1fmA", current);
 8001428:	4b36      	ldr	r3, [pc, #216]	; (8001504 <main+0x2c4>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff f893 	bl	8000558 <__aeabi_f2d>
 8001432:	4602      	mov	r2, r0
 8001434:	460b      	mov	r3, r1
 8001436:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800143a:	4938      	ldr	r1, [pc, #224]	; (800151c <main+0x2dc>)
 800143c:	f004 fe7e 	bl	800613c <siprintf>
	  showLCD(currentLCD,0,1,false);
 8001440:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8001444:	2300      	movs	r3, #0
 8001446:	2201      	movs	r2, #1
 8001448:	2100      	movs	r1, #0
 800144a:	f7ff fee1 	bl	8001210 <showLCD>

	  sprintf(tempLCD, "T:%.1fC", temp);
 800144e:	4b2f      	ldr	r3, [pc, #188]	; (800150c <main+0x2cc>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff f880 	bl	8000558 <__aeabi_f2d>
 8001458:	4602      	mov	r2, r0
 800145a:	460b      	mov	r3, r1
 800145c:	f107 0020 	add.w	r0, r7, #32
 8001460:	492f      	ldr	r1, [pc, #188]	; (8001520 <main+0x2e0>)
 8001462:	f004 fe6b 	bl	800613c <siprintf>
	  showLCD(tempLCD,8,0,false);
 8001466:	f107 0020 	add.w	r0, r7, #32
 800146a:	2300      	movs	r3, #0
 800146c:	2200      	movs	r2, #0
 800146e:	2108      	movs	r1, #8
 8001470:	f7ff fece 	bl	8001210 <showLCD>

	  sprintf(luxLCD, "L:%dLx", lux);
 8001474:	4b27      	ldr	r3, [pc, #156]	; (8001514 <main+0x2d4>)
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	463b      	mov	r3, r7
 800147a:	492a      	ldr	r1, [pc, #168]	; (8001524 <main+0x2e4>)
 800147c:	4618      	mov	r0, r3
 800147e:	f004 fe5d 	bl	800613c <siprintf>
	  showLCD(luxLCD,9,1,false);
 8001482:	4638      	mov	r0, r7
 8001484:	2300      	movs	r3, #0
 8001486:	2201      	movs	r2, #1
 8001488:	2109      	movs	r1, #9
 800148a:	f7ff fec1 	bl	8001210 <showLCD>

	  if(temp>60){
 800148e:	4b1f      	ldr	r3, [pc, #124]	; (800150c <main+0x2cc>)
 8001490:	edd3 7a00 	vldr	s15, [r3]
 8001494:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8001528 <main+0x2e8>
 8001498:	eef4 7ac7 	vcmpe.f32	s15, s14
 800149c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014a0:	dd05      	ble.n	80014ae <main+0x26e>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1,GPIO_PIN_SET);
 80014a2:	2201      	movs	r2, #1
 80014a4:	2102      	movs	r1, #2
 80014a6:	4821      	ldr	r0, [pc, #132]	; (800152c <main+0x2ec>)
 80014a8:	f002 f8dc 	bl	8003664 <HAL_GPIO_WritePin>
 80014ac:	e004      	b.n	80014b8 <main+0x278>
	  }
	  else{
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1,GPIO_PIN_RESET);
 80014ae:	2200      	movs	r2, #0
 80014b0:	2102      	movs	r1, #2
 80014b2:	481e      	ldr	r0, [pc, #120]	; (800152c <main+0x2ec>)
 80014b4:	f002 f8d6 	bl	8003664 <HAL_GPIO_WritePin>
	  }

	  HAL_Delay(1000);
 80014b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014bc:	f000 fd92 	bl	8001fe4 <HAL_Delay>
  {
 80014c0:	e6db      	b.n	800127a <main+0x3a>
 80014c2:	bf00      	nop
 80014c4:	f3af 8000 	nop.w
 80014c8:	14014014 	.word	0x14014014
 80014cc:	3f540140 	.word	0x3f540140
 80014d0:	93893894 	.word	0x93893894
 80014d4:	3ff38938 	.word	0x3ff38938
 80014d8:	00000000 	.word	0x00000000
 80014dc:	40affe00 	.word	0x40affe00
 80014e0:	20000304 	.word	0x20000304
 80014e4:	20000390 	.word	0x20000390
 80014e8:	20000208 	.word	0x20000208
 80014ec:	20000000 	.word	0x20000000
 80014f0:	20000004 	.word	0x20000004
 80014f4:	200003a4 	.word	0x200003a4
 80014f8:	200003a8 	.word	0x200003a8
 80014fc:	20000008 	.word	0x20000008
 8001500:	447a0000 	.word	0x447a0000
 8001504:	200003ac 	.word	0x200003ac
 8001508:	40240000 	.word	0x40240000
 800150c:	200003b0 	.word	0x200003b0
 8001510:	40590000 	.word	0x40590000
 8001514:	200003a0 	.word	0x200003a0
 8001518:	0800a5b0 	.word	0x0800a5b0
 800151c:	0800a5b8 	.word	0x0800a5b8
 8001520:	0800a5c4 	.word	0x0800a5c4
 8001524:	0800a5cc 	.word	0x0800a5cc
 8001528:	42700000 	.word	0x42700000
 800152c:	40020800 	.word	0x40020800

08001530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b094      	sub	sp, #80	; 0x50
 8001534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001536:	f107 0320 	add.w	r3, r7, #32
 800153a:	2230      	movs	r2, #48	; 0x30
 800153c:	2100      	movs	r1, #0
 800153e:	4618      	mov	r0, r3
 8001540:	f003 ff74 	bl	800542c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001544:	f107 030c 	add.w	r3, r7, #12
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]
 8001552:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001554:	2300      	movs	r3, #0
 8001556:	60bb      	str	r3, [r7, #8]
 8001558:	4b29      	ldr	r3, [pc, #164]	; (8001600 <SystemClock_Config+0xd0>)
 800155a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155c:	4a28      	ldr	r2, [pc, #160]	; (8001600 <SystemClock_Config+0xd0>)
 800155e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001562:	6413      	str	r3, [r2, #64]	; 0x40
 8001564:	4b26      	ldr	r3, [pc, #152]	; (8001600 <SystemClock_Config+0xd0>)
 8001566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001568:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800156c:	60bb      	str	r3, [r7, #8]
 800156e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001570:	2300      	movs	r3, #0
 8001572:	607b      	str	r3, [r7, #4]
 8001574:	4b23      	ldr	r3, [pc, #140]	; (8001604 <SystemClock_Config+0xd4>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800157c:	4a21      	ldr	r2, [pc, #132]	; (8001604 <SystemClock_Config+0xd4>)
 800157e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001582:	6013      	str	r3, [r2, #0]
 8001584:	4b1f      	ldr	r3, [pc, #124]	; (8001604 <SystemClock_Config+0xd4>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800158c:	607b      	str	r3, [r7, #4]
 800158e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001590:	2302      	movs	r3, #2
 8001592:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001594:	2301      	movs	r3, #1
 8001596:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001598:	2310      	movs	r3, #16
 800159a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800159c:	2302      	movs	r3, #2
 800159e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015a0:	2300      	movs	r3, #0
 80015a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80015a4:	2310      	movs	r3, #16
 80015a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80015a8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80015ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80015ae:	2304      	movs	r3, #4
 80015b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80015b2:	2307      	movs	r3, #7
 80015b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015b6:	f107 0320 	add.w	r3, r7, #32
 80015ba:	4618      	mov	r0, r3
 80015bc:	f002 fcb8 	bl	8003f30 <HAL_RCC_OscConfig>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80015c6:	f000 f9e1 	bl	800198c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015ca:	230f      	movs	r3, #15
 80015cc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015ce:	2302      	movs	r3, #2
 80015d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015d2:	2300      	movs	r3, #0
 80015d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015dc:	2300      	movs	r3, #0
 80015de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015e0:	f107 030c 	add.w	r3, r7, #12
 80015e4:	2102      	movs	r1, #2
 80015e6:	4618      	mov	r0, r3
 80015e8:	f002 ff1a 	bl	8004420 <HAL_RCC_ClockConfig>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80015f2:	f000 f9cb 	bl	800198c <Error_Handler>
  }
}
 80015f6:	bf00      	nop
 80015f8:	3750      	adds	r7, #80	; 0x50
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40023800 	.word	0x40023800
 8001604:	40007000 	.word	0x40007000

08001608 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800160e:	463b      	mov	r3, r7
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	609a      	str	r2, [r3, #8]
 8001618:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800161a:	4b37      	ldr	r3, [pc, #220]	; (80016f8 <MX_ADC1_Init+0xf0>)
 800161c:	4a37      	ldr	r2, [pc, #220]	; (80016fc <MX_ADC1_Init+0xf4>)
 800161e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001620:	4b35      	ldr	r3, [pc, #212]	; (80016f8 <MX_ADC1_Init+0xf0>)
 8001622:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001626:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001628:	4b33      	ldr	r3, [pc, #204]	; (80016f8 <MX_ADC1_Init+0xf0>)
 800162a:	2200      	movs	r2, #0
 800162c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800162e:	4b32      	ldr	r3, [pc, #200]	; (80016f8 <MX_ADC1_Init+0xf0>)
 8001630:	2201      	movs	r2, #1
 8001632:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001634:	4b30      	ldr	r3, [pc, #192]	; (80016f8 <MX_ADC1_Init+0xf0>)
 8001636:	2200      	movs	r2, #0
 8001638:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800163a:	4b2f      	ldr	r3, [pc, #188]	; (80016f8 <MX_ADC1_Init+0xf0>)
 800163c:	2200      	movs	r2, #0
 800163e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001642:	4b2d      	ldr	r3, [pc, #180]	; (80016f8 <MX_ADC1_Init+0xf0>)
 8001644:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001648:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 800164a:	4b2b      	ldr	r3, [pc, #172]	; (80016f8 <MX_ADC1_Init+0xf0>)
 800164c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001650:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001652:	4b29      	ldr	r3, [pc, #164]	; (80016f8 <MX_ADC1_Init+0xf0>)
 8001654:	2200      	movs	r2, #0
 8001656:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8001658:	4b27      	ldr	r3, [pc, #156]	; (80016f8 <MX_ADC1_Init+0xf0>)
 800165a:	2204      	movs	r2, #4
 800165c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800165e:	4b26      	ldr	r3, [pc, #152]	; (80016f8 <MX_ADC1_Init+0xf0>)
 8001660:	2201      	movs	r2, #1
 8001662:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001666:	4b24      	ldr	r3, [pc, #144]	; (80016f8 <MX_ADC1_Init+0xf0>)
 8001668:	2200      	movs	r2, #0
 800166a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800166c:	4822      	ldr	r0, [pc, #136]	; (80016f8 <MX_ADC1_Init+0xf0>)
 800166e:	f000 fcdd 	bl	800202c <HAL_ADC_Init>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001678:	f000 f988 	bl	800198c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800167c:	2300      	movs	r3, #0
 800167e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001680:	2301      	movs	r3, #1
 8001682:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001684:	2301      	movs	r3, #1
 8001686:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001688:	463b      	mov	r3, r7
 800168a:	4619      	mov	r1, r3
 800168c:	481a      	ldr	r0, [pc, #104]	; (80016f8 <MX_ADC1_Init+0xf0>)
 800168e:	f000 ff39 	bl	8002504 <HAL_ADC_ConfigChannel>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001698:	f000 f978 	bl	800198c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800169c:	2301      	movs	r3, #1
 800169e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80016a0:	2302      	movs	r3, #2
 80016a2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016a4:	463b      	mov	r3, r7
 80016a6:	4619      	mov	r1, r3
 80016a8:	4813      	ldr	r0, [pc, #76]	; (80016f8 <MX_ADC1_Init+0xf0>)
 80016aa:	f000 ff2b 	bl	8002504 <HAL_ADC_ConfigChannel>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 80016b4:	f000 f96a 	bl	800198c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80016b8:	2304      	movs	r3, #4
 80016ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80016bc:	2303      	movs	r3, #3
 80016be:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016c0:	463b      	mov	r3, r7
 80016c2:	4619      	mov	r1, r3
 80016c4:	480c      	ldr	r0, [pc, #48]	; (80016f8 <MX_ADC1_Init+0xf0>)
 80016c6:	f000 ff1d 	bl	8002504 <HAL_ADC_ConfigChannel>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 80016d0:	f000 f95c 	bl	800198c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80016d4:	2308      	movs	r3, #8
 80016d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80016d8:	2304      	movs	r3, #4
 80016da:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016dc:	463b      	mov	r3, r7
 80016de:	4619      	mov	r1, r3
 80016e0:	4805      	ldr	r0, [pc, #20]	; (80016f8 <MX_ADC1_Init+0xf0>)
 80016e2:	f000 ff0f 	bl	8002504 <HAL_ADC_ConfigChannel>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 80016ec:	f000 f94e 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80016f0:	bf00      	nop
 80016f2:	3710      	adds	r7, #16
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	20000208 	.word	0x20000208
 80016fc:	40012000 	.word	0x40012000

08001700 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001704:	4b12      	ldr	r3, [pc, #72]	; (8001750 <MX_I2C1_Init+0x50>)
 8001706:	4a13      	ldr	r2, [pc, #76]	; (8001754 <MX_I2C1_Init+0x54>)
 8001708:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800170a:	4b11      	ldr	r3, [pc, #68]	; (8001750 <MX_I2C1_Init+0x50>)
 800170c:	4a12      	ldr	r2, [pc, #72]	; (8001758 <MX_I2C1_Init+0x58>)
 800170e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001710:	4b0f      	ldr	r3, [pc, #60]	; (8001750 <MX_I2C1_Init+0x50>)
 8001712:	2200      	movs	r2, #0
 8001714:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001716:	4b0e      	ldr	r3, [pc, #56]	; (8001750 <MX_I2C1_Init+0x50>)
 8001718:	2200      	movs	r2, #0
 800171a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800171c:	4b0c      	ldr	r3, [pc, #48]	; (8001750 <MX_I2C1_Init+0x50>)
 800171e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001722:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001724:	4b0a      	ldr	r3, [pc, #40]	; (8001750 <MX_I2C1_Init+0x50>)
 8001726:	2200      	movs	r2, #0
 8001728:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800172a:	4b09      	ldr	r3, [pc, #36]	; (8001750 <MX_I2C1_Init+0x50>)
 800172c:	2200      	movs	r2, #0
 800172e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001730:	4b07      	ldr	r3, [pc, #28]	; (8001750 <MX_I2C1_Init+0x50>)
 8001732:	2200      	movs	r2, #0
 8001734:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001736:	4b06      	ldr	r3, [pc, #24]	; (8001750 <MX_I2C1_Init+0x50>)
 8001738:	2200      	movs	r2, #0
 800173a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800173c:	4804      	ldr	r0, [pc, #16]	; (8001750 <MX_I2C1_Init+0x50>)
 800173e:	f001 ffab 	bl	8003698 <HAL_I2C_Init>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001748:	f000 f920 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800174c:	bf00      	nop
 800174e:	bd80      	pop	{r7, pc}
 8001750:	200002b0 	.word	0x200002b0
 8001754:	40005400 	.word	0x40005400
 8001758:	000186a0 	.word	0x000186a0

0800175c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b086      	sub	sp, #24
 8001760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001762:	f107 0308 	add.w	r3, r7, #8
 8001766:	2200      	movs	r2, #0
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	605a      	str	r2, [r3, #4]
 800176c:	609a      	str	r2, [r3, #8]
 800176e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001770:	463b      	mov	r3, r7
 8001772:	2200      	movs	r2, #0
 8001774:	601a      	str	r2, [r3, #0]
 8001776:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001778:	4b1d      	ldr	r3, [pc, #116]	; (80017f0 <MX_TIM2_Init+0x94>)
 800177a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800177e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400;
 8001780:	4b1b      	ldr	r3, [pc, #108]	; (80017f0 <MX_TIM2_Init+0x94>)
 8001782:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8001786:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001788:	4b19      	ldr	r3, [pc, #100]	; (80017f0 <MX_TIM2_Init+0x94>)
 800178a:	2200      	movs	r2, #0
 800178c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 800178e:	4b18      	ldr	r3, [pc, #96]	; (80017f0 <MX_TIM2_Init+0x94>)
 8001790:	2264      	movs	r2, #100	; 0x64
 8001792:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001794:	4b16      	ldr	r3, [pc, #88]	; (80017f0 <MX_TIM2_Init+0x94>)
 8001796:	2200      	movs	r2, #0
 8001798:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800179a:	4b15      	ldr	r3, [pc, #84]	; (80017f0 <MX_TIM2_Init+0x94>)
 800179c:	2200      	movs	r2, #0
 800179e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017a0:	4813      	ldr	r0, [pc, #76]	; (80017f0 <MX_TIM2_Init+0x94>)
 80017a2:	f003 f85d 	bl	8004860 <HAL_TIM_Base_Init>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80017ac:	f000 f8ee 	bl	800198c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017b6:	f107 0308 	add.w	r3, r7, #8
 80017ba:	4619      	mov	r1, r3
 80017bc:	480c      	ldr	r0, [pc, #48]	; (80017f0 <MX_TIM2_Init+0x94>)
 80017be:	f003 f8f9 	bl	80049b4 <HAL_TIM_ConfigClockSource>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80017c8:	f000 f8e0 	bl	800198c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80017cc:	2320      	movs	r3, #32
 80017ce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017d0:	2300      	movs	r3, #0
 80017d2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017d4:	463b      	mov	r3, r7
 80017d6:	4619      	mov	r1, r3
 80017d8:	4805      	ldr	r0, [pc, #20]	; (80017f0 <MX_TIM2_Init+0x94>)
 80017da:	f003 facd 	bl	8004d78 <HAL_TIMEx_MasterConfigSynchronization>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80017e4:	f000 f8d2 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80017e8:	bf00      	nop
 80017ea:	3718      	adds	r7, #24
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	20000304 	.word	0x20000304

080017f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017f8:	4b11      	ldr	r3, [pc, #68]	; (8001840 <MX_USART2_UART_Init+0x4c>)
 80017fa:	4a12      	ldr	r2, [pc, #72]	; (8001844 <MX_USART2_UART_Init+0x50>)
 80017fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017fe:	4b10      	ldr	r3, [pc, #64]	; (8001840 <MX_USART2_UART_Init+0x4c>)
 8001800:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001804:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001806:	4b0e      	ldr	r3, [pc, #56]	; (8001840 <MX_USART2_UART_Init+0x4c>)
 8001808:	2200      	movs	r2, #0
 800180a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800180c:	4b0c      	ldr	r3, [pc, #48]	; (8001840 <MX_USART2_UART_Init+0x4c>)
 800180e:	2200      	movs	r2, #0
 8001810:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001812:	4b0b      	ldr	r3, [pc, #44]	; (8001840 <MX_USART2_UART_Init+0x4c>)
 8001814:	2200      	movs	r2, #0
 8001816:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001818:	4b09      	ldr	r3, [pc, #36]	; (8001840 <MX_USART2_UART_Init+0x4c>)
 800181a:	220c      	movs	r2, #12
 800181c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800181e:	4b08      	ldr	r3, [pc, #32]	; (8001840 <MX_USART2_UART_Init+0x4c>)
 8001820:	2200      	movs	r2, #0
 8001822:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001824:	4b06      	ldr	r3, [pc, #24]	; (8001840 <MX_USART2_UART_Init+0x4c>)
 8001826:	2200      	movs	r2, #0
 8001828:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800182a:	4805      	ldr	r0, [pc, #20]	; (8001840 <MX_USART2_UART_Init+0x4c>)
 800182c:	f003 fb12 	bl	8004e54 <HAL_UART_Init>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001836:	f000 f8a9 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	2000034c 	.word	0x2000034c
 8001844:	40004400 	.word	0x40004400

08001848 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	607b      	str	r3, [r7, #4]
 8001852:	4b0c      	ldr	r3, [pc, #48]	; (8001884 <MX_DMA_Init+0x3c>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	4a0b      	ldr	r2, [pc, #44]	; (8001884 <MX_DMA_Init+0x3c>)
 8001858:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800185c:	6313      	str	r3, [r2, #48]	; 0x30
 800185e:	4b09      	ldr	r3, [pc, #36]	; (8001884 <MX_DMA_Init+0x3c>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001866:	607b      	str	r3, [r7, #4]
 8001868:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800186a:	2200      	movs	r2, #0
 800186c:	2100      	movs	r1, #0
 800186e:	2038      	movs	r0, #56	; 0x38
 8001870:	f001 f9cd 	bl	8002c0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001874:	2038      	movs	r0, #56	; 0x38
 8001876:	f001 f9e6 	bl	8002c46 <HAL_NVIC_EnableIRQ>

}
 800187a:	bf00      	nop
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40023800 	.word	0x40023800

08001888 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b08a      	sub	sp, #40	; 0x28
 800188c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800188e:	f107 0314 	add.w	r3, r7, #20
 8001892:	2200      	movs	r2, #0
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	605a      	str	r2, [r3, #4]
 8001898:	609a      	str	r2, [r3, #8]
 800189a:	60da      	str	r2, [r3, #12]
 800189c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	613b      	str	r3, [r7, #16]
 80018a2:	4b37      	ldr	r3, [pc, #220]	; (8001980 <MX_GPIO_Init+0xf8>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	4a36      	ldr	r2, [pc, #216]	; (8001980 <MX_GPIO_Init+0xf8>)
 80018a8:	f043 0304 	orr.w	r3, r3, #4
 80018ac:	6313      	str	r3, [r2, #48]	; 0x30
 80018ae:	4b34      	ldr	r3, [pc, #208]	; (8001980 <MX_GPIO_Init+0xf8>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	f003 0304 	and.w	r3, r3, #4
 80018b6:	613b      	str	r3, [r7, #16]
 80018b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	60fb      	str	r3, [r7, #12]
 80018be:	4b30      	ldr	r3, [pc, #192]	; (8001980 <MX_GPIO_Init+0xf8>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	4a2f      	ldr	r2, [pc, #188]	; (8001980 <MX_GPIO_Init+0xf8>)
 80018c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018c8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ca:	4b2d      	ldr	r3, [pc, #180]	; (8001980 <MX_GPIO_Init+0xf8>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	60bb      	str	r3, [r7, #8]
 80018da:	4b29      	ldr	r3, [pc, #164]	; (8001980 <MX_GPIO_Init+0xf8>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	4a28      	ldr	r2, [pc, #160]	; (8001980 <MX_GPIO_Init+0xf8>)
 80018e0:	f043 0301 	orr.w	r3, r3, #1
 80018e4:	6313      	str	r3, [r2, #48]	; 0x30
 80018e6:	4b26      	ldr	r3, [pc, #152]	; (8001980 <MX_GPIO_Init+0xf8>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	60bb      	str	r3, [r7, #8]
 80018f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	607b      	str	r3, [r7, #4]
 80018f6:	4b22      	ldr	r3, [pc, #136]	; (8001980 <MX_GPIO_Init+0xf8>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	4a21      	ldr	r2, [pc, #132]	; (8001980 <MX_GPIO_Init+0xf8>)
 80018fc:	f043 0302 	orr.w	r3, r3, #2
 8001900:	6313      	str	r3, [r2, #48]	; 0x30
 8001902:	4b1f      	ldr	r3, [pc, #124]	; (8001980 <MX_GPIO_Init+0xf8>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001906:	f003 0302 	and.w	r3, r3, #2
 800190a:	607b      	str	r3, [r7, #4]
 800190c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 800190e:	2200      	movs	r2, #0
 8001910:	2102      	movs	r1, #2
 8001912:	481c      	ldr	r0, [pc, #112]	; (8001984 <MX_GPIO_Init+0xfc>)
 8001914:	f001 fea6 	bl	8003664 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001918:	2200      	movs	r2, #0
 800191a:	2120      	movs	r1, #32
 800191c:	481a      	ldr	r0, [pc, #104]	; (8001988 <MX_GPIO_Init+0x100>)
 800191e:	f001 fea1 	bl	8003664 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001922:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001926:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001928:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800192c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192e:	2300      	movs	r3, #0
 8001930:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001932:	f107 0314 	add.w	r3, r7, #20
 8001936:	4619      	mov	r1, r3
 8001938:	4812      	ldr	r0, [pc, #72]	; (8001984 <MX_GPIO_Init+0xfc>)
 800193a:	f001 fd0f 	bl	800335c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800193e:	2302      	movs	r3, #2
 8001940:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001942:	2301      	movs	r3, #1
 8001944:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001946:	2300      	movs	r3, #0
 8001948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194a:	2300      	movs	r3, #0
 800194c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800194e:	f107 0314 	add.w	r3, r7, #20
 8001952:	4619      	mov	r1, r3
 8001954:	480b      	ldr	r0, [pc, #44]	; (8001984 <MX_GPIO_Init+0xfc>)
 8001956:	f001 fd01 	bl	800335c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800195a:	2320      	movs	r3, #32
 800195c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800195e:	2301      	movs	r3, #1
 8001960:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001962:	2300      	movs	r3, #0
 8001964:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001966:	2300      	movs	r3, #0
 8001968:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800196a:	f107 0314 	add.w	r3, r7, #20
 800196e:	4619      	mov	r1, r3
 8001970:	4805      	ldr	r0, [pc, #20]	; (8001988 <MX_GPIO_Init+0x100>)
 8001972:	f001 fcf3 	bl	800335c <HAL_GPIO_Init>

}
 8001976:	bf00      	nop
 8001978:	3728      	adds	r7, #40	; 0x28
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	40023800 	.word	0x40023800
 8001984:	40020800 	.word	0x40020800
 8001988:	40020000 	.word	0x40020000

0800198c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001990:	b672      	cpsid	i
}
 8001992:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001994:	e7fe      	b.n	8001994 <Error_Handler+0x8>
	...

08001998 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800199e:	2300      	movs	r3, #0
 80019a0:	607b      	str	r3, [r7, #4]
 80019a2:	4b10      	ldr	r3, [pc, #64]	; (80019e4 <HAL_MspInit+0x4c>)
 80019a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a6:	4a0f      	ldr	r2, [pc, #60]	; (80019e4 <HAL_MspInit+0x4c>)
 80019a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019ac:	6453      	str	r3, [r2, #68]	; 0x44
 80019ae:	4b0d      	ldr	r3, [pc, #52]	; (80019e4 <HAL_MspInit+0x4c>)
 80019b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019b6:	607b      	str	r3, [r7, #4]
 80019b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	603b      	str	r3, [r7, #0]
 80019be:	4b09      	ldr	r3, [pc, #36]	; (80019e4 <HAL_MspInit+0x4c>)
 80019c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c2:	4a08      	ldr	r2, [pc, #32]	; (80019e4 <HAL_MspInit+0x4c>)
 80019c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019c8:	6413      	str	r3, [r2, #64]	; 0x40
 80019ca:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <HAL_MspInit+0x4c>)
 80019cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d2:	603b      	str	r3, [r7, #0]
 80019d4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80019d6:	2007      	movs	r0, #7
 80019d8:	f001 f90e 	bl	8002bf8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019dc:	bf00      	nop
 80019de:	3708      	adds	r7, #8
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	40023800 	.word	0x40023800

080019e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b08a      	sub	sp, #40	; 0x28
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f0:	f107 0314 	add.w	r3, r7, #20
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	605a      	str	r2, [r3, #4]
 80019fa:	609a      	str	r2, [r3, #8]
 80019fc:	60da      	str	r2, [r3, #12]
 80019fe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a40      	ldr	r2, [pc, #256]	; (8001b08 <HAL_ADC_MspInit+0x120>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d179      	bne.n	8001afe <HAL_ADC_MspInit+0x116>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	613b      	str	r3, [r7, #16]
 8001a0e:	4b3f      	ldr	r3, [pc, #252]	; (8001b0c <HAL_ADC_MspInit+0x124>)
 8001a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a12:	4a3e      	ldr	r2, [pc, #248]	; (8001b0c <HAL_ADC_MspInit+0x124>)
 8001a14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a18:	6453      	str	r3, [r2, #68]	; 0x44
 8001a1a:	4b3c      	ldr	r3, [pc, #240]	; (8001b0c <HAL_ADC_MspInit+0x124>)
 8001a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a22:	613b      	str	r3, [r7, #16]
 8001a24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	60fb      	str	r3, [r7, #12]
 8001a2a:	4b38      	ldr	r3, [pc, #224]	; (8001b0c <HAL_ADC_MspInit+0x124>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2e:	4a37      	ldr	r2, [pc, #220]	; (8001b0c <HAL_ADC_MspInit+0x124>)
 8001a30:	f043 0301 	orr.w	r3, r3, #1
 8001a34:	6313      	str	r3, [r2, #48]	; 0x30
 8001a36:	4b35      	ldr	r3, [pc, #212]	; (8001b0c <HAL_ADC_MspInit+0x124>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	60bb      	str	r3, [r7, #8]
 8001a46:	4b31      	ldr	r3, [pc, #196]	; (8001b0c <HAL_ADC_MspInit+0x124>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	4a30      	ldr	r2, [pc, #192]	; (8001b0c <HAL_ADC_MspInit+0x124>)
 8001a4c:	f043 0302 	orr.w	r3, r3, #2
 8001a50:	6313      	str	r3, [r2, #48]	; 0x30
 8001a52:	4b2e      	ldr	r3, [pc, #184]	; (8001b0c <HAL_ADC_MspInit+0x124>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	60bb      	str	r3, [r7, #8]
 8001a5c:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8001a5e:	2313      	movs	r3, #19
 8001a60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a62:	2303      	movs	r3, #3
 8001a64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a66:	2300      	movs	r3, #0
 8001a68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a6a:	f107 0314 	add.w	r3, r7, #20
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4827      	ldr	r0, [pc, #156]	; (8001b10 <HAL_ADC_MspInit+0x128>)
 8001a72:	f001 fc73 	bl	800335c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a76:	2301      	movs	r3, #1
 8001a78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a82:	f107 0314 	add.w	r3, r7, #20
 8001a86:	4619      	mov	r1, r3
 8001a88:	4822      	ldr	r0, [pc, #136]	; (8001b14 <HAL_ADC_MspInit+0x12c>)
 8001a8a:	f001 fc67 	bl	800335c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001a8e:	4b22      	ldr	r3, [pc, #136]	; (8001b18 <HAL_ADC_MspInit+0x130>)
 8001a90:	4a22      	ldr	r2, [pc, #136]	; (8001b1c <HAL_ADC_MspInit+0x134>)
 8001a92:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001a94:	4b20      	ldr	r3, [pc, #128]	; (8001b18 <HAL_ADC_MspInit+0x130>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a9a:	4b1f      	ldr	r3, [pc, #124]	; (8001b18 <HAL_ADC_MspInit+0x130>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001aa0:	4b1d      	ldr	r3, [pc, #116]	; (8001b18 <HAL_ADC_MspInit+0x130>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001aa6:	4b1c      	ldr	r3, [pc, #112]	; (8001b18 <HAL_ADC_MspInit+0x130>)
 8001aa8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001aac:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001aae:	4b1a      	ldr	r3, [pc, #104]	; (8001b18 <HAL_ADC_MspInit+0x130>)
 8001ab0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ab4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001ab6:	4b18      	ldr	r3, [pc, #96]	; (8001b18 <HAL_ADC_MspInit+0x130>)
 8001ab8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001abc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001abe:	4b16      	ldr	r3, [pc, #88]	; (8001b18 <HAL_ADC_MspInit+0x130>)
 8001ac0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ac4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001ac6:	4b14      	ldr	r3, [pc, #80]	; (8001b18 <HAL_ADC_MspInit+0x130>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001acc:	4b12      	ldr	r3, [pc, #72]	; (8001b18 <HAL_ADC_MspInit+0x130>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001ad2:	4811      	ldr	r0, [pc, #68]	; (8001b18 <HAL_ADC_MspInit+0x130>)
 8001ad4:	f001 f8d2 	bl	8002c7c <HAL_DMA_Init>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8001ade:	f7ff ff55 	bl	800198c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a0c      	ldr	r2, [pc, #48]	; (8001b18 <HAL_ADC_MspInit+0x130>)
 8001ae6:	639a      	str	r2, [r3, #56]	; 0x38
 8001ae8:	4a0b      	ldr	r2, [pc, #44]	; (8001b18 <HAL_ADC_MspInit+0x130>)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001aee:	2200      	movs	r2, #0
 8001af0:	2100      	movs	r1, #0
 8001af2:	2012      	movs	r0, #18
 8001af4:	f001 f88b 	bl	8002c0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001af8:	2012      	movs	r0, #18
 8001afa:	f001 f8a4 	bl	8002c46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001afe:	bf00      	nop
 8001b00:	3728      	adds	r7, #40	; 0x28
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	40012000 	.word	0x40012000
 8001b0c:	40023800 	.word	0x40023800
 8001b10:	40020000 	.word	0x40020000
 8001b14:	40020400 	.word	0x40020400
 8001b18:	20000250 	.word	0x20000250
 8001b1c:	40026410 	.word	0x40026410

08001b20 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b08a      	sub	sp, #40	; 0x28
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b28:	f107 0314 	add.w	r3, r7, #20
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	605a      	str	r2, [r3, #4]
 8001b32:	609a      	str	r2, [r3, #8]
 8001b34:	60da      	str	r2, [r3, #12]
 8001b36:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a19      	ldr	r2, [pc, #100]	; (8001ba4 <HAL_I2C_MspInit+0x84>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d12c      	bne.n	8001b9c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b42:	2300      	movs	r3, #0
 8001b44:	613b      	str	r3, [r7, #16]
 8001b46:	4b18      	ldr	r3, [pc, #96]	; (8001ba8 <HAL_I2C_MspInit+0x88>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4a:	4a17      	ldr	r2, [pc, #92]	; (8001ba8 <HAL_I2C_MspInit+0x88>)
 8001b4c:	f043 0302 	orr.w	r3, r3, #2
 8001b50:	6313      	str	r3, [r2, #48]	; 0x30
 8001b52:	4b15      	ldr	r3, [pc, #84]	; (8001ba8 <HAL_I2C_MspInit+0x88>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	613b      	str	r3, [r7, #16]
 8001b5c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b5e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b64:	2312      	movs	r3, #18
 8001b66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b70:	2304      	movs	r3, #4
 8001b72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b74:	f107 0314 	add.w	r3, r7, #20
 8001b78:	4619      	mov	r1, r3
 8001b7a:	480c      	ldr	r0, [pc, #48]	; (8001bac <HAL_I2C_MspInit+0x8c>)
 8001b7c:	f001 fbee 	bl	800335c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b80:	2300      	movs	r3, #0
 8001b82:	60fb      	str	r3, [r7, #12]
 8001b84:	4b08      	ldr	r3, [pc, #32]	; (8001ba8 <HAL_I2C_MspInit+0x88>)
 8001b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b88:	4a07      	ldr	r2, [pc, #28]	; (8001ba8 <HAL_I2C_MspInit+0x88>)
 8001b8a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b8e:	6413      	str	r3, [r2, #64]	; 0x40
 8001b90:	4b05      	ldr	r3, [pc, #20]	; (8001ba8 <HAL_I2C_MspInit+0x88>)
 8001b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b98:	60fb      	str	r3, [r7, #12]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b9c:	bf00      	nop
 8001b9e:	3728      	adds	r7, #40	; 0x28
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	40005400 	.word	0x40005400
 8001ba8:	40023800 	.word	0x40023800
 8001bac:	40020400 	.word	0x40020400

08001bb0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b085      	sub	sp, #20
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bc0:	d10d      	bne.n	8001bde <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	60fb      	str	r3, [r7, #12]
 8001bc6:	4b09      	ldr	r3, [pc, #36]	; (8001bec <HAL_TIM_Base_MspInit+0x3c>)
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bca:	4a08      	ldr	r2, [pc, #32]	; (8001bec <HAL_TIM_Base_MspInit+0x3c>)
 8001bcc:	f043 0301 	orr.w	r3, r3, #1
 8001bd0:	6413      	str	r3, [r2, #64]	; 0x40
 8001bd2:	4b06      	ldr	r3, [pc, #24]	; (8001bec <HAL_TIM_Base_MspInit+0x3c>)
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	60fb      	str	r3, [r7, #12]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001bde:	bf00      	nop
 8001be0:	3714      	adds	r7, #20
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	40023800 	.word	0x40023800

08001bf0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b08a      	sub	sp, #40	; 0x28
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf8:	f107 0314 	add.w	r3, r7, #20
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	605a      	str	r2, [r3, #4]
 8001c02:	609a      	str	r2, [r3, #8]
 8001c04:	60da      	str	r2, [r3, #12]
 8001c06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a19      	ldr	r2, [pc, #100]	; (8001c74 <HAL_UART_MspInit+0x84>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d12b      	bne.n	8001c6a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c12:	2300      	movs	r3, #0
 8001c14:	613b      	str	r3, [r7, #16]
 8001c16:	4b18      	ldr	r3, [pc, #96]	; (8001c78 <HAL_UART_MspInit+0x88>)
 8001c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1a:	4a17      	ldr	r2, [pc, #92]	; (8001c78 <HAL_UART_MspInit+0x88>)
 8001c1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c20:	6413      	str	r3, [r2, #64]	; 0x40
 8001c22:	4b15      	ldr	r3, [pc, #84]	; (8001c78 <HAL_UART_MspInit+0x88>)
 8001c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2a:	613b      	str	r3, [r7, #16]
 8001c2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c2e:	2300      	movs	r3, #0
 8001c30:	60fb      	str	r3, [r7, #12]
 8001c32:	4b11      	ldr	r3, [pc, #68]	; (8001c78 <HAL_UART_MspInit+0x88>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	4a10      	ldr	r2, [pc, #64]	; (8001c78 <HAL_UART_MspInit+0x88>)
 8001c38:	f043 0301 	orr.w	r3, r3, #1
 8001c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3e:	4b0e      	ldr	r3, [pc, #56]	; (8001c78 <HAL_UART_MspInit+0x88>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	60fb      	str	r3, [r7, #12]
 8001c48:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c4a:	230c      	movs	r3, #12
 8001c4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c4e:	2302      	movs	r3, #2
 8001c50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c52:	2300      	movs	r3, #0
 8001c54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c56:	2300      	movs	r3, #0
 8001c58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c5a:	2307      	movs	r3, #7
 8001c5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c5e:	f107 0314 	add.w	r3, r7, #20
 8001c62:	4619      	mov	r1, r3
 8001c64:	4805      	ldr	r0, [pc, #20]	; (8001c7c <HAL_UART_MspInit+0x8c>)
 8001c66:	f001 fb79 	bl	800335c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c6a:	bf00      	nop
 8001c6c:	3728      	adds	r7, #40	; 0x28
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	40004400 	.word	0x40004400
 8001c78:	40023800 	.word	0x40023800
 8001c7c:	40020000 	.word	0x40020000

08001c80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c84:	e7fe      	b.n	8001c84 <NMI_Handler+0x4>

08001c86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c86:	b480      	push	{r7}
 8001c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c8a:	e7fe      	b.n	8001c8a <HardFault_Handler+0x4>

08001c8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c90:	e7fe      	b.n	8001c90 <MemManage_Handler+0x4>

08001c92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c92:	b480      	push	{r7}
 8001c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c96:	e7fe      	b.n	8001c96 <BusFault_Handler+0x4>

08001c98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c9c:	e7fe      	b.n	8001c9c <UsageFault_Handler+0x4>

08001c9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ca2:	bf00      	nop
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cb0:	bf00      	nop
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr

08001cba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cbe:	bf00      	nop
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ccc:	f000 f96a 	bl	8001fa4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cd0:	bf00      	nop
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001cd8:	4802      	ldr	r0, [pc, #8]	; (8001ce4 <ADC_IRQHandler+0x10>)
 8001cda:	f000 f9ea 	bl	80020b2 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001cde:	bf00      	nop
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	20000208 	.word	0x20000208

08001ce8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001cec:	4802      	ldr	r0, [pc, #8]	; (8001cf8 <DMA2_Stream0_IRQHandler+0x10>)
 8001cee:	f001 f8cb 	bl	8002e88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001cf2:	bf00      	nop
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	20000250 	.word	0x20000250

08001cfc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
	return 1;
 8001d00:	2301      	movs	r3, #1
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <_kill>:

int _kill(int pid, int sig)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d16:	f003 fb5f 	bl	80053d8 <__errno>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2216      	movs	r2, #22
 8001d1e:	601a      	str	r2, [r3, #0]
	return -1;
 8001d20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3708      	adds	r7, #8
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <_exit>:

void _exit (int status)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d34:	f04f 31ff 	mov.w	r1, #4294967295
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f7ff ffe7 	bl	8001d0c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d3e:	e7fe      	b.n	8001d3e <_exit+0x12>

08001d40 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	60b9      	str	r1, [r7, #8]
 8001d4a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	617b      	str	r3, [r7, #20]
 8001d50:	e00a      	b.n	8001d68 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d52:	f3af 8000 	nop.w
 8001d56:	4601      	mov	r1, r0
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	1c5a      	adds	r2, r3, #1
 8001d5c:	60ba      	str	r2, [r7, #8]
 8001d5e:	b2ca      	uxtb	r2, r1
 8001d60:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	3301      	adds	r3, #1
 8001d66:	617b      	str	r3, [r7, #20]
 8001d68:	697a      	ldr	r2, [r7, #20]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	dbf0      	blt.n	8001d52 <_read+0x12>
	}

return len;
 8001d70:	687b      	ldr	r3, [r7, #4]
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3718      	adds	r7, #24
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b086      	sub	sp, #24
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	60f8      	str	r0, [r7, #12]
 8001d82:	60b9      	str	r1, [r7, #8]
 8001d84:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d86:	2300      	movs	r3, #0
 8001d88:	617b      	str	r3, [r7, #20]
 8001d8a:	e009      	b.n	8001da0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	1c5a      	adds	r2, r3, #1
 8001d90:	60ba      	str	r2, [r7, #8]
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	617b      	str	r3, [r7, #20]
 8001da0:	697a      	ldr	r2, [r7, #20]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	dbf1      	blt.n	8001d8c <_write+0x12>
	}
	return len;
 8001da8:	687b      	ldr	r3, [r7, #4]
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3718      	adds	r7, #24
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <_close>:

int _close(int file)
{
 8001db2:	b480      	push	{r7}
 8001db4:	b083      	sub	sp, #12
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
	return -1;
 8001dba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr

08001dca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	b083      	sub	sp, #12
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
 8001dd2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001dda:	605a      	str	r2, [r3, #4]
	return 0;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr

08001dea <_isatty>:

int _isatty(int file)
{
 8001dea:	b480      	push	{r7}
 8001dec:	b083      	sub	sp, #12
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
	return 1;
 8001df2:	2301      	movs	r3, #1
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b085      	sub	sp, #20
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	60b9      	str	r1, [r7, #8]
 8001e0a:	607a      	str	r2, [r7, #4]
	return 0;
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3714      	adds	r7, #20
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
	...

08001e1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e24:	4a14      	ldr	r2, [pc, #80]	; (8001e78 <_sbrk+0x5c>)
 8001e26:	4b15      	ldr	r3, [pc, #84]	; (8001e7c <_sbrk+0x60>)
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e30:	4b13      	ldr	r3, [pc, #76]	; (8001e80 <_sbrk+0x64>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d102      	bne.n	8001e3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e38:	4b11      	ldr	r3, [pc, #68]	; (8001e80 <_sbrk+0x64>)
 8001e3a:	4a12      	ldr	r2, [pc, #72]	; (8001e84 <_sbrk+0x68>)
 8001e3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e3e:	4b10      	ldr	r3, [pc, #64]	; (8001e80 <_sbrk+0x64>)
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4413      	add	r3, r2
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d207      	bcs.n	8001e5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e4c:	f003 fac4 	bl	80053d8 <__errno>
 8001e50:	4603      	mov	r3, r0
 8001e52:	220c      	movs	r2, #12
 8001e54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e56:	f04f 33ff 	mov.w	r3, #4294967295
 8001e5a:	e009      	b.n	8001e70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e5c:	4b08      	ldr	r3, [pc, #32]	; (8001e80 <_sbrk+0x64>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e62:	4b07      	ldr	r3, [pc, #28]	; (8001e80 <_sbrk+0x64>)
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4413      	add	r3, r2
 8001e6a:	4a05      	ldr	r2, [pc, #20]	; (8001e80 <_sbrk+0x64>)
 8001e6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3718      	adds	r7, #24
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	20018000 	.word	0x20018000
 8001e7c:	00000400 	.word	0x00000400
 8001e80:	200003b4 	.word	0x200003b4
 8001e84:	200003d0 	.word	0x200003d0

08001e88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e8c:	4b06      	ldr	r3, [pc, #24]	; (8001ea8 <SystemInit+0x20>)
 8001e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e92:	4a05      	ldr	r2, [pc, #20]	; (8001ea8 <SystemInit+0x20>)
 8001e94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e9c:	bf00      	nop
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	e000ed00 	.word	0xe000ed00

08001eac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001eac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ee4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001eb0:	480d      	ldr	r0, [pc, #52]	; (8001ee8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001eb2:	490e      	ldr	r1, [pc, #56]	; (8001eec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001eb4:	4a0e      	ldr	r2, [pc, #56]	; (8001ef0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001eb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001eb8:	e002      	b.n	8001ec0 <LoopCopyDataInit>

08001eba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ebc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ebe:	3304      	adds	r3, #4

08001ec0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ec0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ec2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ec4:	d3f9      	bcc.n	8001eba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ec6:	4a0b      	ldr	r2, [pc, #44]	; (8001ef4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ec8:	4c0b      	ldr	r4, [pc, #44]	; (8001ef8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001eca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ecc:	e001      	b.n	8001ed2 <LoopFillZerobss>

08001ece <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ece:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ed0:	3204      	adds	r2, #4

08001ed2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ed2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ed4:	d3fb      	bcc.n	8001ece <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ed6:	f7ff ffd7 	bl	8001e88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001eda:	f003 fa83 	bl	80053e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ede:	f7ff f9af 	bl	8001240 <main>
  bx  lr    
 8001ee2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ee4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001ee8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001eec:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8001ef0:	0800aacc 	.word	0x0800aacc
  ldr r2, =_sbss
 8001ef4:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8001ef8:	200003cc 	.word	0x200003cc

08001efc <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001efc:	e7fe      	b.n	8001efc <DMA1_Stream0_IRQHandler>
	...

08001f00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f04:	4b0e      	ldr	r3, [pc, #56]	; (8001f40 <HAL_Init+0x40>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a0d      	ldr	r2, [pc, #52]	; (8001f40 <HAL_Init+0x40>)
 8001f0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f10:	4b0b      	ldr	r3, [pc, #44]	; (8001f40 <HAL_Init+0x40>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a0a      	ldr	r2, [pc, #40]	; (8001f40 <HAL_Init+0x40>)
 8001f16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f1c:	4b08      	ldr	r3, [pc, #32]	; (8001f40 <HAL_Init+0x40>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a07      	ldr	r2, [pc, #28]	; (8001f40 <HAL_Init+0x40>)
 8001f22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f28:	2003      	movs	r0, #3
 8001f2a:	f000 fe65 	bl	8002bf8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f2e:	2000      	movs	r0, #0
 8001f30:	f000 f808 	bl	8001f44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f34:	f7ff fd30 	bl	8001998 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	40023c00 	.word	0x40023c00

08001f44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f4c:	4b12      	ldr	r3, [pc, #72]	; (8001f98 <HAL_InitTick+0x54>)
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	4b12      	ldr	r3, [pc, #72]	; (8001f9c <HAL_InitTick+0x58>)
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	4619      	mov	r1, r3
 8001f56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f62:	4618      	mov	r0, r3
 8001f64:	f000 fe7d 	bl	8002c62 <HAL_SYSTICK_Config>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e00e      	b.n	8001f90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2b0f      	cmp	r3, #15
 8001f76:	d80a      	bhi.n	8001f8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f78:	2200      	movs	r2, #0
 8001f7a:	6879      	ldr	r1, [r7, #4]
 8001f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f80:	f000 fe45 	bl	8002c0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f84:	4a06      	ldr	r2, [pc, #24]	; (8001fa0 <HAL_InitTick+0x5c>)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	e000      	b.n	8001f90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3708      	adds	r7, #8
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	2000000c 	.word	0x2000000c
 8001f9c:	20000014 	.word	0x20000014
 8001fa0:	20000010 	.word	0x20000010

08001fa4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fa8:	4b06      	ldr	r3, [pc, #24]	; (8001fc4 <HAL_IncTick+0x20>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	461a      	mov	r2, r3
 8001fae:	4b06      	ldr	r3, [pc, #24]	; (8001fc8 <HAL_IncTick+0x24>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	4a04      	ldr	r2, [pc, #16]	; (8001fc8 <HAL_IncTick+0x24>)
 8001fb6:	6013      	str	r3, [r2, #0]
}
 8001fb8:	bf00      	nop
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	20000014 	.word	0x20000014
 8001fc8:	200003b8 	.word	0x200003b8

08001fcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  return uwTick;
 8001fd0:	4b03      	ldr	r3, [pc, #12]	; (8001fe0 <HAL_GetTick+0x14>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	200003b8 	.word	0x200003b8

08001fe4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fec:	f7ff ffee 	bl	8001fcc <HAL_GetTick>
 8001ff0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ffc:	d005      	beq.n	800200a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ffe:	4b0a      	ldr	r3, [pc, #40]	; (8002028 <HAL_Delay+0x44>)
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	461a      	mov	r2, r3
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	4413      	add	r3, r2
 8002008:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800200a:	bf00      	nop
 800200c:	f7ff ffde 	bl	8001fcc <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	68fa      	ldr	r2, [r7, #12]
 8002018:	429a      	cmp	r2, r3
 800201a:	d8f7      	bhi.n	800200c <HAL_Delay+0x28>
  {
  }
}
 800201c:	bf00      	nop
 800201e:	bf00      	nop
 8002020:	3710      	adds	r7, #16
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	20000014 	.word	0x20000014

0800202c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002034:	2300      	movs	r3, #0
 8002036:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d101      	bne.n	8002042 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e033      	b.n	80020aa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002046:	2b00      	cmp	r3, #0
 8002048:	d109      	bne.n	800205e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f7ff fccc 	bl	80019e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002062:	f003 0310 	and.w	r3, r3, #16
 8002066:	2b00      	cmp	r3, #0
 8002068:	d118      	bne.n	800209c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002072:	f023 0302 	bic.w	r3, r3, #2
 8002076:	f043 0202 	orr.w	r2, r3, #2
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 fb62 	bl	8002748 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208e:	f023 0303 	bic.w	r3, r3, #3
 8002092:	f043 0201 	orr.w	r2, r3, #1
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	641a      	str	r2, [r3, #64]	; 0x40
 800209a:	e001      	b.n	80020a0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80020a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3710      	adds	r7, #16
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b086      	sub	sp, #24
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80020ba:	2300      	movs	r3, #0
 80020bc:	617b      	str	r3, [r7, #20]
 80020be:	2300      	movs	r3, #0
 80020c0:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f003 0302 	and.w	r3, r3, #2
 80020d8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	f003 0320 	and.w	r3, r3, #32
 80020e0:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d049      	beq.n	800217c <HAL_ADC_IRQHandler+0xca>
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d046      	beq.n	800217c <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f2:	f003 0310 	and.w	r3, r3, #16
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d105      	bne.n	8002106 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d12b      	bne.n	800216c <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002118:	2b00      	cmp	r3, #0
 800211a:	d127      	bne.n	800216c <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002122:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002126:	2b00      	cmp	r3, #0
 8002128:	d006      	beq.n	8002138 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002134:	2b00      	cmp	r3, #0
 8002136:	d119      	bne.n	800216c <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	685a      	ldr	r2, [r3, #4]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f022 0220 	bic.w	r2, r2, #32
 8002146:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002158:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d105      	bne.n	800216c <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002164:	f043 0201 	orr.w	r2, r3, #1
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f000 f9a1 	bl	80024b4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f06f 0212 	mvn.w	r2, #18
 800217a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	f003 0304 	and.w	r3, r3, #4
 8002182:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800218a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d057      	beq.n	8002242 <HAL_ADC_IRQHandler+0x190>
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d054      	beq.n	8002242 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219c:	f003 0310 	and.w	r3, r3, #16
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d105      	bne.n	80021b0 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d139      	bne.n	8002232 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021c4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d006      	beq.n	80021da <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d12b      	bne.n	8002232 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d124      	bne.n	8002232 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d11d      	bne.n	8002232 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d119      	bne.n	8002232 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	685a      	ldr	r2, [r3, #4]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800220c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002212:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002222:	2b00      	cmp	r3, #0
 8002224:	d105      	bne.n	8002232 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222a:	f043 0201 	orr.w	r2, r3, #1
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f000 fc06 	bl	8002a44 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f06f 020c 	mvn.w	r2, #12
 8002240:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f003 0301 	and.w	r3, r3, #1
 8002248:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002250:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d017      	beq.n	8002288 <HAL_ADC_IRQHandler+0x1d6>
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d014      	beq.n	8002288 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0301 	and.w	r3, r3, #1
 8002268:	2b01      	cmp	r3, #1
 800226a:	d10d      	bne.n	8002288 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002270:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f000 f92f 	bl	80024dc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f06f 0201 	mvn.w	r2, #1
 8002286:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f003 0320 	and.w	r3, r3, #32
 800228e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002296:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d015      	beq.n	80022ca <HAL_ADC_IRQHandler+0x218>
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d012      	beq.n	80022ca <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a8:	f043 0202 	orr.w	r2, r3, #2
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f06f 0220 	mvn.w	r2, #32
 80022b8:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f000 f918 	bl	80024f0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f06f 0220 	mvn.w	r2, #32
 80022c8:	601a      	str	r2, [r3, #0]
  }
}
 80022ca:	bf00      	nop
 80022cc:	3718      	adds	r7, #24
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
	...

080022d4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80022e0:	2300      	movs	r3, #0
 80022e2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d101      	bne.n	80022f2 <HAL_ADC_Start_DMA+0x1e>
 80022ee:	2302      	movs	r3, #2
 80022f0:	e0ce      	b.n	8002490 <HAL_ADC_Start_DMA+0x1bc>
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2201      	movs	r2, #1
 80022f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f003 0301 	and.w	r3, r3, #1
 8002304:	2b01      	cmp	r3, #1
 8002306:	d018      	beq.n	800233a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	689a      	ldr	r2, [r3, #8]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f042 0201 	orr.w	r2, r2, #1
 8002316:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002318:	4b5f      	ldr	r3, [pc, #380]	; (8002498 <HAL_ADC_Start_DMA+0x1c4>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a5f      	ldr	r2, [pc, #380]	; (800249c <HAL_ADC_Start_DMA+0x1c8>)
 800231e:	fba2 2303 	umull	r2, r3, r2, r3
 8002322:	0c9a      	lsrs	r2, r3, #18
 8002324:	4613      	mov	r3, r2
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	4413      	add	r3, r2
 800232a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800232c:	e002      	b.n	8002334 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	3b01      	subs	r3, #1
 8002332:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d1f9      	bne.n	800232e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002344:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002348:	d107      	bne.n	800235a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	689a      	ldr	r2, [r3, #8]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002358:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	f003 0301 	and.w	r3, r3, #1
 8002364:	2b01      	cmp	r3, #1
 8002366:	f040 8086 	bne.w	8002476 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002372:	f023 0301 	bic.w	r3, r3, #1
 8002376:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002388:	2b00      	cmp	r3, #0
 800238a:	d007      	beq.n	800239c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002390:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002394:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023a8:	d106      	bne.n	80023b8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ae:	f023 0206 	bic.w	r2, r3, #6
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	645a      	str	r2, [r3, #68]	; 0x44
 80023b6:	e002      	b.n	80023be <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2200      	movs	r2, #0
 80023bc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2200      	movs	r2, #0
 80023c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023c6:	4b36      	ldr	r3, [pc, #216]	; (80024a0 <HAL_ADC_Start_DMA+0x1cc>)
 80023c8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ce:	4a35      	ldr	r2, [pc, #212]	; (80024a4 <HAL_ADC_Start_DMA+0x1d0>)
 80023d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023d6:	4a34      	ldr	r2, [pc, #208]	; (80024a8 <HAL_ADC_Start_DMA+0x1d4>)
 80023d8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023de:	4a33      	ldr	r2, [pc, #204]	; (80024ac <HAL_ADC_Start_DMA+0x1d8>)
 80023e0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80023ea:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	685a      	ldr	r2, [r3, #4]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80023fa:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	689a      	ldr	r2, [r3, #8]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800240a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	334c      	adds	r3, #76	; 0x4c
 8002416:	4619      	mov	r1, r3
 8002418:	68ba      	ldr	r2, [r7, #8]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f000 fcdc 	bl	8002dd8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f003 031f 	and.w	r3, r3, #31
 8002428:	2b00      	cmp	r3, #0
 800242a:	d10f      	bne.n	800244c <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d129      	bne.n	800248e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	689a      	ldr	r2, [r3, #8]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002448:	609a      	str	r2, [r3, #8]
 800244a:	e020      	b.n	800248e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a17      	ldr	r2, [pc, #92]	; (80024b0 <HAL_ADC_Start_DMA+0x1dc>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d11b      	bne.n	800248e <HAL_ADC_Start_DMA+0x1ba>
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d114      	bne.n	800248e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	689a      	ldr	r2, [r3, #8]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002472:	609a      	str	r2, [r3, #8]
 8002474:	e00b      	b.n	800248e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247a:	f043 0210 	orr.w	r2, r3, #16
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002486:	f043 0201 	orr.w	r2, r3, #1
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800248e:	2300      	movs	r3, #0
}
 8002490:	4618      	mov	r0, r3
 8002492:	3718      	adds	r7, #24
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	2000000c 	.word	0x2000000c
 800249c:	431bde83 	.word	0x431bde83
 80024a0:	40012300 	.word	0x40012300
 80024a4:	08002941 	.word	0x08002941
 80024a8:	080029fb 	.word	0x080029fb
 80024ac:	08002a17 	.word	0x08002a17
 80024b0:	40012000 	.word	0x40012000

080024b4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80024bc:	bf00      	nop
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80024d0:	bf00      	nop
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80024e4:	bf00      	nop
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80024f8:	bf00      	nop
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002504:	b480      	push	{r7}
 8002506:	b085      	sub	sp, #20
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800250e:	2300      	movs	r3, #0
 8002510:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002518:	2b01      	cmp	r3, #1
 800251a:	d101      	bne.n	8002520 <HAL_ADC_ConfigChannel+0x1c>
 800251c:	2302      	movs	r3, #2
 800251e:	e105      	b.n	800272c <HAL_ADC_ConfigChannel+0x228>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2b09      	cmp	r3, #9
 800252e:	d925      	bls.n	800257c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	68d9      	ldr	r1, [r3, #12]
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	b29b      	uxth	r3, r3
 800253c:	461a      	mov	r2, r3
 800253e:	4613      	mov	r3, r2
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	4413      	add	r3, r2
 8002544:	3b1e      	subs	r3, #30
 8002546:	2207      	movs	r2, #7
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	43da      	mvns	r2, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	400a      	ands	r2, r1
 8002554:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	68d9      	ldr	r1, [r3, #12]
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	689a      	ldr	r2, [r3, #8]
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	b29b      	uxth	r3, r3
 8002566:	4618      	mov	r0, r3
 8002568:	4603      	mov	r3, r0
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	4403      	add	r3, r0
 800256e:	3b1e      	subs	r3, #30
 8002570:	409a      	lsls	r2, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	430a      	orrs	r2, r1
 8002578:	60da      	str	r2, [r3, #12]
 800257a:	e022      	b.n	80025c2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	6919      	ldr	r1, [r3, #16]
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	b29b      	uxth	r3, r3
 8002588:	461a      	mov	r2, r3
 800258a:	4613      	mov	r3, r2
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	4413      	add	r3, r2
 8002590:	2207      	movs	r2, #7
 8002592:	fa02 f303 	lsl.w	r3, r2, r3
 8002596:	43da      	mvns	r2, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	400a      	ands	r2, r1
 800259e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	6919      	ldr	r1, [r3, #16]
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	689a      	ldr	r2, [r3, #8]
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	4618      	mov	r0, r3
 80025b2:	4603      	mov	r3, r0
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	4403      	add	r3, r0
 80025b8:	409a      	lsls	r2, r3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	430a      	orrs	r2, r1
 80025c0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	2b06      	cmp	r3, #6
 80025c8:	d824      	bhi.n	8002614 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685a      	ldr	r2, [r3, #4]
 80025d4:	4613      	mov	r3, r2
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	4413      	add	r3, r2
 80025da:	3b05      	subs	r3, #5
 80025dc:	221f      	movs	r2, #31
 80025de:	fa02 f303 	lsl.w	r3, r2, r3
 80025e2:	43da      	mvns	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	400a      	ands	r2, r1
 80025ea:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	4618      	mov	r0, r3
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	685a      	ldr	r2, [r3, #4]
 80025fe:	4613      	mov	r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	4413      	add	r3, r2
 8002604:	3b05      	subs	r3, #5
 8002606:	fa00 f203 	lsl.w	r2, r0, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	430a      	orrs	r2, r1
 8002610:	635a      	str	r2, [r3, #52]	; 0x34
 8002612:	e04c      	b.n	80026ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	2b0c      	cmp	r3, #12
 800261a:	d824      	bhi.n	8002666 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	685a      	ldr	r2, [r3, #4]
 8002626:	4613      	mov	r3, r2
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	4413      	add	r3, r2
 800262c:	3b23      	subs	r3, #35	; 0x23
 800262e:	221f      	movs	r2, #31
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	43da      	mvns	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	400a      	ands	r2, r1
 800263c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	b29b      	uxth	r3, r3
 800264a:	4618      	mov	r0, r3
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	685a      	ldr	r2, [r3, #4]
 8002650:	4613      	mov	r3, r2
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	4413      	add	r3, r2
 8002656:	3b23      	subs	r3, #35	; 0x23
 8002658:	fa00 f203 	lsl.w	r2, r0, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	430a      	orrs	r2, r1
 8002662:	631a      	str	r2, [r3, #48]	; 0x30
 8002664:	e023      	b.n	80026ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685a      	ldr	r2, [r3, #4]
 8002670:	4613      	mov	r3, r2
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	4413      	add	r3, r2
 8002676:	3b41      	subs	r3, #65	; 0x41
 8002678:	221f      	movs	r2, #31
 800267a:	fa02 f303 	lsl.w	r3, r2, r3
 800267e:	43da      	mvns	r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	400a      	ands	r2, r1
 8002686:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	b29b      	uxth	r3, r3
 8002694:	4618      	mov	r0, r3
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685a      	ldr	r2, [r3, #4]
 800269a:	4613      	mov	r3, r2
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	4413      	add	r3, r2
 80026a0:	3b41      	subs	r3, #65	; 0x41
 80026a2:	fa00 f203 	lsl.w	r2, r0, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	430a      	orrs	r2, r1
 80026ac:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026ae:	4b22      	ldr	r3, [pc, #136]	; (8002738 <HAL_ADC_ConfigChannel+0x234>)
 80026b0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a21      	ldr	r2, [pc, #132]	; (800273c <HAL_ADC_ConfigChannel+0x238>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d109      	bne.n	80026d0 <HAL_ADC_ConfigChannel+0x1cc>
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2b12      	cmp	r3, #18
 80026c2:	d105      	bne.n	80026d0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a19      	ldr	r2, [pc, #100]	; (800273c <HAL_ADC_ConfigChannel+0x238>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d123      	bne.n	8002722 <HAL_ADC_ConfigChannel+0x21e>
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2b10      	cmp	r3, #16
 80026e0:	d003      	beq.n	80026ea <HAL_ADC_ConfigChannel+0x1e6>
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2b11      	cmp	r3, #17
 80026e8:	d11b      	bne.n	8002722 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2b10      	cmp	r3, #16
 80026fc:	d111      	bne.n	8002722 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80026fe:	4b10      	ldr	r3, [pc, #64]	; (8002740 <HAL_ADC_ConfigChannel+0x23c>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a10      	ldr	r2, [pc, #64]	; (8002744 <HAL_ADC_ConfigChannel+0x240>)
 8002704:	fba2 2303 	umull	r2, r3, r2, r3
 8002708:	0c9a      	lsrs	r2, r3, #18
 800270a:	4613      	mov	r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	4413      	add	r3, r2
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002714:	e002      	b.n	800271c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	3b01      	subs	r3, #1
 800271a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d1f9      	bne.n	8002716 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800272a:	2300      	movs	r3, #0
}
 800272c:	4618      	mov	r0, r3
 800272e:	3714      	adds	r7, #20
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr
 8002738:	40012300 	.word	0x40012300
 800273c:	40012000 	.word	0x40012000
 8002740:	2000000c 	.word	0x2000000c
 8002744:	431bde83 	.word	0x431bde83

08002748 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002748:	b480      	push	{r7}
 800274a:	b085      	sub	sp, #20
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002750:	4b79      	ldr	r3, [pc, #484]	; (8002938 <ADC_Init+0x1f0>)
 8002752:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	685a      	ldr	r2, [r3, #4]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	431a      	orrs	r2, r3
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	685a      	ldr	r2, [r3, #4]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800277c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	6859      	ldr	r1, [r3, #4]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	691b      	ldr	r3, [r3, #16]
 8002788:	021a      	lsls	r2, r3, #8
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	430a      	orrs	r2, r1
 8002790:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	685a      	ldr	r2, [r3, #4]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80027a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	6859      	ldr	r1, [r3, #4]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	689a      	ldr	r2, [r3, #8]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	430a      	orrs	r2, r1
 80027b2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	689a      	ldr	r2, [r3, #8]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	6899      	ldr	r1, [r3, #8]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	68da      	ldr	r2, [r3, #12]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	430a      	orrs	r2, r1
 80027d4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027da:	4a58      	ldr	r2, [pc, #352]	; (800293c <ADC_Init+0x1f4>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d022      	beq.n	8002826 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	689a      	ldr	r2, [r3, #8]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80027ee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	6899      	ldr	r1, [r3, #8]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	430a      	orrs	r2, r1
 8002800:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	689a      	ldr	r2, [r3, #8]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002810:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	6899      	ldr	r1, [r3, #8]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	430a      	orrs	r2, r1
 8002822:	609a      	str	r2, [r3, #8]
 8002824:	e00f      	b.n	8002846 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	689a      	ldr	r2, [r3, #8]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002834:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	689a      	ldr	r2, [r3, #8]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002844:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	689a      	ldr	r2, [r3, #8]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f022 0202 	bic.w	r2, r2, #2
 8002854:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	6899      	ldr	r1, [r3, #8]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	7e1b      	ldrb	r3, [r3, #24]
 8002860:	005a      	lsls	r2, r3, #1
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	430a      	orrs	r2, r1
 8002868:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d01b      	beq.n	80028ac <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	685a      	ldr	r2, [r3, #4]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002882:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	685a      	ldr	r2, [r3, #4]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002892:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	6859      	ldr	r1, [r3, #4]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289e:	3b01      	subs	r3, #1
 80028a0:	035a      	lsls	r2, r3, #13
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	430a      	orrs	r2, r1
 80028a8:	605a      	str	r2, [r3, #4]
 80028aa:	e007      	b.n	80028bc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	685a      	ldr	r2, [r3, #4]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028ba:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80028ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	69db      	ldr	r3, [r3, #28]
 80028d6:	3b01      	subs	r3, #1
 80028d8:	051a      	lsls	r2, r3, #20
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	430a      	orrs	r2, r1
 80028e0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	689a      	ldr	r2, [r3, #8]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80028f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	6899      	ldr	r1, [r3, #8]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80028fe:	025a      	lsls	r2, r3, #9
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	430a      	orrs	r2, r1
 8002906:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	689a      	ldr	r2, [r3, #8]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002916:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	6899      	ldr	r1, [r3, #8]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	695b      	ldr	r3, [r3, #20]
 8002922:	029a      	lsls	r2, r3, #10
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	430a      	orrs	r2, r1
 800292a:	609a      	str	r2, [r3, #8]
}
 800292c:	bf00      	nop
 800292e:	3714      	adds	r7, #20
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr
 8002938:	40012300 	.word	0x40012300
 800293c:	0f000001 	.word	0x0f000001

08002940 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800294c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002952:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002956:	2b00      	cmp	r3, #0
 8002958:	d13c      	bne.n	80029d4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d12b      	bne.n	80029cc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002978:	2b00      	cmp	r3, #0
 800297a:	d127      	bne.n	80029cc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002982:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002986:	2b00      	cmp	r3, #0
 8002988:	d006      	beq.n	8002998 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002994:	2b00      	cmp	r3, #0
 8002996:	d119      	bne.n	80029cc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	685a      	ldr	r2, [r3, #4]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f022 0220 	bic.w	r2, r2, #32
 80029a6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d105      	bne.n	80029cc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c4:	f043 0201 	orr.w	r2, r3, #1
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80029cc:	68f8      	ldr	r0, [r7, #12]
 80029ce:	f7ff fd71 	bl	80024b4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80029d2:	e00e      	b.n	80029f2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d8:	f003 0310 	and.w	r3, r3, #16
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d003      	beq.n	80029e8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80029e0:	68f8      	ldr	r0, [r7, #12]
 80029e2:	f7ff fd85 	bl	80024f0 <HAL_ADC_ErrorCallback>
}
 80029e6:	e004      	b.n	80029f2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	4798      	blx	r3
}
 80029f2:	bf00      	nop
 80029f4:	3710      	adds	r7, #16
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b084      	sub	sp, #16
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a06:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002a08:	68f8      	ldr	r0, [r7, #12]
 8002a0a:	f7ff fd5d 	bl	80024c8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a0e:	bf00      	nop
 8002a10:	3710      	adds	r7, #16
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b084      	sub	sp, #16
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a22:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2240      	movs	r2, #64	; 0x40
 8002a28:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a2e:	f043 0204 	orr.w	r2, r3, #4
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002a36:	68f8      	ldr	r0, [r7, #12]
 8002a38:	f7ff fd5a 	bl	80024f0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a3c:	bf00      	nop
 8002a3e:	3710      	adds	r7, #16
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002a4c:	bf00      	nop
 8002a4e:	370c      	adds	r7, #12
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b085      	sub	sp, #20
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f003 0307 	and.w	r3, r3, #7
 8002a66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a68:	4b0c      	ldr	r3, [pc, #48]	; (8002a9c <__NVIC_SetPriorityGrouping+0x44>)
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a6e:	68ba      	ldr	r2, [r7, #8]
 8002a70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a74:	4013      	ands	r3, r2
 8002a76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a8a:	4a04      	ldr	r2, [pc, #16]	; (8002a9c <__NVIC_SetPriorityGrouping+0x44>)
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	60d3      	str	r3, [r2, #12]
}
 8002a90:	bf00      	nop
 8002a92:	3714      	adds	r7, #20
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr
 8002a9c:	e000ed00 	.word	0xe000ed00

08002aa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002aa4:	4b04      	ldr	r3, [pc, #16]	; (8002ab8 <__NVIC_GetPriorityGrouping+0x18>)
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	0a1b      	lsrs	r3, r3, #8
 8002aaa:	f003 0307 	and.w	r3, r3, #7
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr
 8002ab8:	e000ed00 	.word	0xe000ed00

08002abc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	db0b      	blt.n	8002ae6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ace:	79fb      	ldrb	r3, [r7, #7]
 8002ad0:	f003 021f 	and.w	r2, r3, #31
 8002ad4:	4907      	ldr	r1, [pc, #28]	; (8002af4 <__NVIC_EnableIRQ+0x38>)
 8002ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ada:	095b      	lsrs	r3, r3, #5
 8002adc:	2001      	movs	r0, #1
 8002ade:	fa00 f202 	lsl.w	r2, r0, r2
 8002ae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ae6:	bf00      	nop
 8002ae8:	370c      	adds	r7, #12
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop
 8002af4:	e000e100 	.word	0xe000e100

08002af8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	4603      	mov	r3, r0
 8002b00:	6039      	str	r1, [r7, #0]
 8002b02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	db0a      	blt.n	8002b22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	b2da      	uxtb	r2, r3
 8002b10:	490c      	ldr	r1, [pc, #48]	; (8002b44 <__NVIC_SetPriority+0x4c>)
 8002b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b16:	0112      	lsls	r2, r2, #4
 8002b18:	b2d2      	uxtb	r2, r2
 8002b1a:	440b      	add	r3, r1
 8002b1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b20:	e00a      	b.n	8002b38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	b2da      	uxtb	r2, r3
 8002b26:	4908      	ldr	r1, [pc, #32]	; (8002b48 <__NVIC_SetPriority+0x50>)
 8002b28:	79fb      	ldrb	r3, [r7, #7]
 8002b2a:	f003 030f 	and.w	r3, r3, #15
 8002b2e:	3b04      	subs	r3, #4
 8002b30:	0112      	lsls	r2, r2, #4
 8002b32:	b2d2      	uxtb	r2, r2
 8002b34:	440b      	add	r3, r1
 8002b36:	761a      	strb	r2, [r3, #24]
}
 8002b38:	bf00      	nop
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr
 8002b44:	e000e100 	.word	0xe000e100
 8002b48:	e000ed00 	.word	0xe000ed00

08002b4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b089      	sub	sp, #36	; 0x24
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f003 0307 	and.w	r3, r3, #7
 8002b5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	f1c3 0307 	rsb	r3, r3, #7
 8002b66:	2b04      	cmp	r3, #4
 8002b68:	bf28      	it	cs
 8002b6a:	2304      	movcs	r3, #4
 8002b6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	3304      	adds	r3, #4
 8002b72:	2b06      	cmp	r3, #6
 8002b74:	d902      	bls.n	8002b7c <NVIC_EncodePriority+0x30>
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	3b03      	subs	r3, #3
 8002b7a:	e000      	b.n	8002b7e <NVIC_EncodePriority+0x32>
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b80:	f04f 32ff 	mov.w	r2, #4294967295
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8a:	43da      	mvns	r2, r3
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	401a      	ands	r2, r3
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b94:	f04f 31ff 	mov.w	r1, #4294967295
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b9e:	43d9      	mvns	r1, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ba4:	4313      	orrs	r3, r2
         );
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3724      	adds	r7, #36	; 0x24
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
	...

08002bb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bc4:	d301      	bcc.n	8002bca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e00f      	b.n	8002bea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bca:	4a0a      	ldr	r2, [pc, #40]	; (8002bf4 <SysTick_Config+0x40>)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bd2:	210f      	movs	r1, #15
 8002bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8002bd8:	f7ff ff8e 	bl	8002af8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bdc:	4b05      	ldr	r3, [pc, #20]	; (8002bf4 <SysTick_Config+0x40>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002be2:	4b04      	ldr	r3, [pc, #16]	; (8002bf4 <SysTick_Config+0x40>)
 8002be4:	2207      	movs	r2, #7
 8002be6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3708      	adds	r7, #8
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	e000e010 	.word	0xe000e010

08002bf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f7ff ff29 	bl	8002a58 <__NVIC_SetPriorityGrouping>
}
 8002c06:	bf00      	nop
 8002c08:	3708      	adds	r7, #8
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b086      	sub	sp, #24
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	4603      	mov	r3, r0
 8002c16:	60b9      	str	r1, [r7, #8]
 8002c18:	607a      	str	r2, [r7, #4]
 8002c1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c20:	f7ff ff3e 	bl	8002aa0 <__NVIC_GetPriorityGrouping>
 8002c24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	68b9      	ldr	r1, [r7, #8]
 8002c2a:	6978      	ldr	r0, [r7, #20]
 8002c2c:	f7ff ff8e 	bl	8002b4c <NVIC_EncodePriority>
 8002c30:	4602      	mov	r2, r0
 8002c32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c36:	4611      	mov	r1, r2
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7ff ff5d 	bl	8002af8 <__NVIC_SetPriority>
}
 8002c3e:	bf00      	nop
 8002c40:	3718      	adds	r7, #24
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b082      	sub	sp, #8
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7ff ff31 	bl	8002abc <__NVIC_EnableIRQ>
}
 8002c5a:	bf00      	nop
 8002c5c:	3708      	adds	r7, #8
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}

08002c62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c62:	b580      	push	{r7, lr}
 8002c64:	b082      	sub	sp, #8
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f7ff ffa2 	bl	8002bb4 <SysTick_Config>
 8002c70:	4603      	mov	r3, r0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3708      	adds	r7, #8
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
	...

08002c7c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b086      	sub	sp, #24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c84:	2300      	movs	r3, #0
 8002c86:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002c88:	f7ff f9a0 	bl	8001fcc <HAL_GetTick>
 8002c8c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d101      	bne.n	8002c98 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e099      	b.n	8002dcc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2202      	movs	r2, #2
 8002c9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f022 0201 	bic.w	r2, r2, #1
 8002cb6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cb8:	e00f      	b.n	8002cda <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002cba:	f7ff f987 	bl	8001fcc <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	2b05      	cmp	r3, #5
 8002cc6:	d908      	bls.n	8002cda <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2220      	movs	r2, #32
 8002ccc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2203      	movs	r2, #3
 8002cd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e078      	b.n	8002dcc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0301 	and.w	r3, r3, #1
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d1e8      	bne.n	8002cba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002cf0:	697a      	ldr	r2, [r7, #20]
 8002cf2:	4b38      	ldr	r3, [pc, #224]	; (8002dd4 <HAL_DMA_Init+0x158>)
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685a      	ldr	r2, [r3, #4]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d06:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	691b      	ldr	r3, [r3, #16]
 8002d0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d12:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d1e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a1b      	ldr	r3, [r3, #32]
 8002d24:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d26:	697a      	ldr	r2, [r7, #20]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d30:	2b04      	cmp	r3, #4
 8002d32:	d107      	bne.n	8002d44 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	697a      	ldr	r2, [r7, #20]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	697a      	ldr	r2, [r7, #20]
 8002d4a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	695b      	ldr	r3, [r3, #20]
 8002d52:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	f023 0307 	bic.w	r3, r3, #7
 8002d5a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d60:	697a      	ldr	r2, [r7, #20]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6a:	2b04      	cmp	r3, #4
 8002d6c:	d117      	bne.n	8002d9e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d72:	697a      	ldr	r2, [r7, #20]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d00e      	beq.n	8002d9e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f000 fa6f 	bl	8003264 <DMA_CheckFifoParam>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d008      	beq.n	8002d9e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2240      	movs	r2, #64	; 0x40
 8002d90:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2201      	movs	r2, #1
 8002d96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e016      	b.n	8002dcc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	697a      	ldr	r2, [r7, #20]
 8002da4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f000 fa26 	bl	80031f8 <DMA_CalcBaseAndBitshift>
 8002dac:	4603      	mov	r3, r0
 8002dae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002db4:	223f      	movs	r2, #63	; 0x3f
 8002db6:	409a      	lsls	r2, r3
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002dca:	2300      	movs	r3, #0
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3718      	adds	r7, #24
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	f010803f 	.word	0xf010803f

08002dd8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b086      	sub	sp, #24
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	607a      	str	r2, [r7, #4]
 8002de4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002de6:	2300      	movs	r3, #0
 8002de8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d101      	bne.n	8002dfe <HAL_DMA_Start_IT+0x26>
 8002dfa:	2302      	movs	r3, #2
 8002dfc:	e040      	b.n	8002e80 <HAL_DMA_Start_IT+0xa8>
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2201      	movs	r2, #1
 8002e02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d12f      	bne.n	8002e72 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2202      	movs	r2, #2
 8002e16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	68b9      	ldr	r1, [r7, #8]
 8002e26:	68f8      	ldr	r0, [r7, #12]
 8002e28:	f000 f9b8 	bl	800319c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e30:	223f      	movs	r2, #63	; 0x3f
 8002e32:	409a      	lsls	r2, r3
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f042 0216 	orr.w	r2, r2, #22
 8002e46:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d007      	beq.n	8002e60 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f042 0208 	orr.w	r2, r2, #8
 8002e5e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f042 0201 	orr.w	r2, r2, #1
 8002e6e:	601a      	str	r2, [r3, #0]
 8002e70:	e005      	b.n	8002e7e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002e7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3718      	adds	r7, #24
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b086      	sub	sp, #24
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002e90:	2300      	movs	r3, #0
 8002e92:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002e94:	4b8e      	ldr	r3, [pc, #568]	; (80030d0 <HAL_DMA_IRQHandler+0x248>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a8e      	ldr	r2, [pc, #568]	; (80030d4 <HAL_DMA_IRQHandler+0x24c>)
 8002e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e9e:	0a9b      	lsrs	r3, r3, #10
 8002ea0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ea6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eb2:	2208      	movs	r2, #8
 8002eb4:	409a      	lsls	r2, r3
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	4013      	ands	r3, r2
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d01a      	beq.n	8002ef4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0304 	and.w	r3, r3, #4
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d013      	beq.n	8002ef4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f022 0204 	bic.w	r2, r2, #4
 8002eda:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee0:	2208      	movs	r2, #8
 8002ee2:	409a      	lsls	r2, r3
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eec:	f043 0201 	orr.w	r2, r3, #1
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ef8:	2201      	movs	r2, #1
 8002efa:	409a      	lsls	r2, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	4013      	ands	r3, r2
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d012      	beq.n	8002f2a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	695b      	ldr	r3, [r3, #20]
 8002f0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d00b      	beq.n	8002f2a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f16:	2201      	movs	r2, #1
 8002f18:	409a      	lsls	r2, r3
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f22:	f043 0202 	orr.w	r2, r3, #2
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f2e:	2204      	movs	r2, #4
 8002f30:	409a      	lsls	r2, r3
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	4013      	ands	r3, r2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d012      	beq.n	8002f60 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0302 	and.w	r3, r3, #2
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d00b      	beq.n	8002f60 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f4c:	2204      	movs	r2, #4
 8002f4e:	409a      	lsls	r2, r3
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f58:	f043 0204 	orr.w	r2, r3, #4
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f64:	2210      	movs	r2, #16
 8002f66:	409a      	lsls	r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d043      	beq.n	8002ff8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0308 	and.w	r3, r3, #8
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d03c      	beq.n	8002ff8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f82:	2210      	movs	r2, #16
 8002f84:	409a      	lsls	r2, r3
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d018      	beq.n	8002fca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d108      	bne.n	8002fb8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d024      	beq.n	8002ff8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	4798      	blx	r3
 8002fb6:	e01f      	b.n	8002ff8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d01b      	beq.n	8002ff8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	4798      	blx	r3
 8002fc8:	e016      	b.n	8002ff8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d107      	bne.n	8002fe8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f022 0208 	bic.w	r2, r2, #8
 8002fe6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d003      	beq.n	8002ff8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ffc:	2220      	movs	r2, #32
 8002ffe:	409a      	lsls	r2, r3
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	4013      	ands	r3, r2
 8003004:	2b00      	cmp	r3, #0
 8003006:	f000 808f 	beq.w	8003128 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0310 	and.w	r3, r3, #16
 8003014:	2b00      	cmp	r3, #0
 8003016:	f000 8087 	beq.w	8003128 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800301e:	2220      	movs	r2, #32
 8003020:	409a      	lsls	r2, r3
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800302c:	b2db      	uxtb	r3, r3
 800302e:	2b05      	cmp	r3, #5
 8003030:	d136      	bne.n	80030a0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f022 0216 	bic.w	r2, r2, #22
 8003040:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	695a      	ldr	r2, [r3, #20]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003050:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003056:	2b00      	cmp	r3, #0
 8003058:	d103      	bne.n	8003062 <HAL_DMA_IRQHandler+0x1da>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800305e:	2b00      	cmp	r3, #0
 8003060:	d007      	beq.n	8003072 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f022 0208 	bic.w	r2, r2, #8
 8003070:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003076:	223f      	movs	r2, #63	; 0x3f
 8003078:	409a      	lsls	r2, r3
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2201      	movs	r2, #1
 8003082:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003092:	2b00      	cmp	r3, #0
 8003094:	d07e      	beq.n	8003194 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	4798      	blx	r3
        }
        return;
 800309e:	e079      	b.n	8003194 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d01d      	beq.n	80030ea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d10d      	bne.n	80030d8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d031      	beq.n	8003128 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	4798      	blx	r3
 80030cc:	e02c      	b.n	8003128 <HAL_DMA_IRQHandler+0x2a0>
 80030ce:	bf00      	nop
 80030d0:	2000000c 	.word	0x2000000c
 80030d4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d023      	beq.n	8003128 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	4798      	blx	r3
 80030e8:	e01e      	b.n	8003128 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d10f      	bne.n	8003118 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f022 0210 	bic.w	r2, r2, #16
 8003106:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800311c:	2b00      	cmp	r3, #0
 800311e:	d003      	beq.n	8003128 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800312c:	2b00      	cmp	r3, #0
 800312e:	d032      	beq.n	8003196 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003134:	f003 0301 	and.w	r3, r3, #1
 8003138:	2b00      	cmp	r3, #0
 800313a:	d022      	beq.n	8003182 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2205      	movs	r2, #5
 8003140:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f022 0201 	bic.w	r2, r2, #1
 8003152:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	3301      	adds	r3, #1
 8003158:	60bb      	str	r3, [r7, #8]
 800315a:	697a      	ldr	r2, [r7, #20]
 800315c:	429a      	cmp	r2, r3
 800315e:	d307      	bcc.n	8003170 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	2b00      	cmp	r3, #0
 800316c:	d1f2      	bne.n	8003154 <HAL_DMA_IRQHandler+0x2cc>
 800316e:	e000      	b.n	8003172 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003170:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2201      	movs	r2, #1
 8003176:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003186:	2b00      	cmp	r3, #0
 8003188:	d005      	beq.n	8003196 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	4798      	blx	r3
 8003192:	e000      	b.n	8003196 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003194:	bf00      	nop
    }
  }
}
 8003196:	3718      	adds	r7, #24
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800319c:	b480      	push	{r7}
 800319e:	b085      	sub	sp, #20
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]
 80031a8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80031b8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	683a      	ldr	r2, [r7, #0]
 80031c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	2b40      	cmp	r3, #64	; 0x40
 80031c8:	d108      	bne.n	80031dc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	68ba      	ldr	r2, [r7, #8]
 80031d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80031da:	e007      	b.n	80031ec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68ba      	ldr	r2, [r7, #8]
 80031e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	60da      	str	r2, [r3, #12]
}
 80031ec:	bf00      	nop
 80031ee:	3714      	adds	r7, #20
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b085      	sub	sp, #20
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	b2db      	uxtb	r3, r3
 8003206:	3b10      	subs	r3, #16
 8003208:	4a14      	ldr	r2, [pc, #80]	; (800325c <DMA_CalcBaseAndBitshift+0x64>)
 800320a:	fba2 2303 	umull	r2, r3, r2, r3
 800320e:	091b      	lsrs	r3, r3, #4
 8003210:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003212:	4a13      	ldr	r2, [pc, #76]	; (8003260 <DMA_CalcBaseAndBitshift+0x68>)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	4413      	add	r3, r2
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	461a      	mov	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2b03      	cmp	r3, #3
 8003224:	d909      	bls.n	800323a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800322e:	f023 0303 	bic.w	r3, r3, #3
 8003232:	1d1a      	adds	r2, r3, #4
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	659a      	str	r2, [r3, #88]	; 0x58
 8003238:	e007      	b.n	800324a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003242:	f023 0303 	bic.w	r3, r3, #3
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800324e:	4618      	mov	r0, r3
 8003250:	3714      	adds	r7, #20
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	aaaaaaab 	.word	0xaaaaaaab
 8003260:	0800a5f8 	.word	0x0800a5f8

08003264 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003264:	b480      	push	{r7}
 8003266:	b085      	sub	sp, #20
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800326c:	2300      	movs	r3, #0
 800326e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003274:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	699b      	ldr	r3, [r3, #24]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d11f      	bne.n	80032be <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	2b03      	cmp	r3, #3
 8003282:	d856      	bhi.n	8003332 <DMA_CheckFifoParam+0xce>
 8003284:	a201      	add	r2, pc, #4	; (adr r2, 800328c <DMA_CheckFifoParam+0x28>)
 8003286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800328a:	bf00      	nop
 800328c:	0800329d 	.word	0x0800329d
 8003290:	080032af 	.word	0x080032af
 8003294:	0800329d 	.word	0x0800329d
 8003298:	08003333 	.word	0x08003333
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d046      	beq.n	8003336 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032ac:	e043      	b.n	8003336 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80032b6:	d140      	bne.n	800333a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032bc:	e03d      	b.n	800333a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032c6:	d121      	bne.n	800330c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	2b03      	cmp	r3, #3
 80032cc:	d837      	bhi.n	800333e <DMA_CheckFifoParam+0xda>
 80032ce:	a201      	add	r2, pc, #4	; (adr r2, 80032d4 <DMA_CheckFifoParam+0x70>)
 80032d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032d4:	080032e5 	.word	0x080032e5
 80032d8:	080032eb 	.word	0x080032eb
 80032dc:	080032e5 	.word	0x080032e5
 80032e0:	080032fd 	.word	0x080032fd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	73fb      	strb	r3, [r7, #15]
      break;
 80032e8:	e030      	b.n	800334c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d025      	beq.n	8003342 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032fa:	e022      	b.n	8003342 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003300:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003304:	d11f      	bne.n	8003346 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800330a:	e01c      	b.n	8003346 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	2b02      	cmp	r3, #2
 8003310:	d903      	bls.n	800331a <DMA_CheckFifoParam+0xb6>
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	2b03      	cmp	r3, #3
 8003316:	d003      	beq.n	8003320 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003318:	e018      	b.n	800334c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	73fb      	strb	r3, [r7, #15]
      break;
 800331e:	e015      	b.n	800334c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003324:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d00e      	beq.n	800334a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	73fb      	strb	r3, [r7, #15]
      break;
 8003330:	e00b      	b.n	800334a <DMA_CheckFifoParam+0xe6>
      break;
 8003332:	bf00      	nop
 8003334:	e00a      	b.n	800334c <DMA_CheckFifoParam+0xe8>
      break;
 8003336:	bf00      	nop
 8003338:	e008      	b.n	800334c <DMA_CheckFifoParam+0xe8>
      break;
 800333a:	bf00      	nop
 800333c:	e006      	b.n	800334c <DMA_CheckFifoParam+0xe8>
      break;
 800333e:	bf00      	nop
 8003340:	e004      	b.n	800334c <DMA_CheckFifoParam+0xe8>
      break;
 8003342:	bf00      	nop
 8003344:	e002      	b.n	800334c <DMA_CheckFifoParam+0xe8>
      break;   
 8003346:	bf00      	nop
 8003348:	e000      	b.n	800334c <DMA_CheckFifoParam+0xe8>
      break;
 800334a:	bf00      	nop
    }
  } 
  
  return status; 
 800334c:	7bfb      	ldrb	r3, [r7, #15]
}
 800334e:	4618      	mov	r0, r3
 8003350:	3714      	adds	r7, #20
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop

0800335c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800335c:	b480      	push	{r7}
 800335e:	b089      	sub	sp, #36	; 0x24
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003366:	2300      	movs	r3, #0
 8003368:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800336a:	2300      	movs	r3, #0
 800336c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800336e:	2300      	movs	r3, #0
 8003370:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003372:	2300      	movs	r3, #0
 8003374:	61fb      	str	r3, [r7, #28]
 8003376:	e159      	b.n	800362c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003378:	2201      	movs	r2, #1
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	fa02 f303 	lsl.w	r3, r2, r3
 8003380:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	697a      	ldr	r2, [r7, #20]
 8003388:	4013      	ands	r3, r2
 800338a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800338c:	693a      	ldr	r2, [r7, #16]
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	429a      	cmp	r2, r3
 8003392:	f040 8148 	bne.w	8003626 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f003 0303 	and.w	r3, r3, #3
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d005      	beq.n	80033ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d130      	bne.n	8003410 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	005b      	lsls	r3, r3, #1
 80033b8:	2203      	movs	r2, #3
 80033ba:	fa02 f303 	lsl.w	r3, r2, r3
 80033be:	43db      	mvns	r3, r3
 80033c0:	69ba      	ldr	r2, [r7, #24]
 80033c2:	4013      	ands	r3, r2
 80033c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	68da      	ldr	r2, [r3, #12]
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	005b      	lsls	r3, r3, #1
 80033ce:	fa02 f303 	lsl.w	r3, r2, r3
 80033d2:	69ba      	ldr	r2, [r7, #24]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	69ba      	ldr	r2, [r7, #24]
 80033dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033e4:	2201      	movs	r2, #1
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ec:	43db      	mvns	r3, r3
 80033ee:	69ba      	ldr	r2, [r7, #24]
 80033f0:	4013      	ands	r3, r2
 80033f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	091b      	lsrs	r3, r3, #4
 80033fa:	f003 0201 	and.w	r2, r3, #1
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	fa02 f303 	lsl.w	r3, r2, r3
 8003404:	69ba      	ldr	r2, [r7, #24]
 8003406:	4313      	orrs	r3, r2
 8003408:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	69ba      	ldr	r2, [r7, #24]
 800340e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f003 0303 	and.w	r3, r3, #3
 8003418:	2b03      	cmp	r3, #3
 800341a:	d017      	beq.n	800344c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	005b      	lsls	r3, r3, #1
 8003426:	2203      	movs	r2, #3
 8003428:	fa02 f303 	lsl.w	r3, r2, r3
 800342c:	43db      	mvns	r3, r3
 800342e:	69ba      	ldr	r2, [r7, #24]
 8003430:	4013      	ands	r3, r2
 8003432:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	689a      	ldr	r2, [r3, #8]
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	005b      	lsls	r3, r3, #1
 800343c:	fa02 f303 	lsl.w	r3, r2, r3
 8003440:	69ba      	ldr	r2, [r7, #24]
 8003442:	4313      	orrs	r3, r2
 8003444:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	69ba      	ldr	r2, [r7, #24]
 800344a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f003 0303 	and.w	r3, r3, #3
 8003454:	2b02      	cmp	r3, #2
 8003456:	d123      	bne.n	80034a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	08da      	lsrs	r2, r3, #3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	3208      	adds	r2, #8
 8003460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003464:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	f003 0307 	and.w	r3, r3, #7
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	220f      	movs	r2, #15
 8003470:	fa02 f303 	lsl.w	r3, r2, r3
 8003474:	43db      	mvns	r3, r3
 8003476:	69ba      	ldr	r2, [r7, #24]
 8003478:	4013      	ands	r3, r2
 800347a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	691a      	ldr	r2, [r3, #16]
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	f003 0307 	and.w	r3, r3, #7
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	fa02 f303 	lsl.w	r3, r2, r3
 800348c:	69ba      	ldr	r2, [r7, #24]
 800348e:	4313      	orrs	r3, r2
 8003490:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	08da      	lsrs	r2, r3, #3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	3208      	adds	r2, #8
 800349a:	69b9      	ldr	r1, [r7, #24]
 800349c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	005b      	lsls	r3, r3, #1
 80034aa:	2203      	movs	r2, #3
 80034ac:	fa02 f303 	lsl.w	r3, r2, r3
 80034b0:	43db      	mvns	r3, r3
 80034b2:	69ba      	ldr	r2, [r7, #24]
 80034b4:	4013      	ands	r3, r2
 80034b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f003 0203 	and.w	r2, r3, #3
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	005b      	lsls	r3, r3, #1
 80034c4:	fa02 f303 	lsl.w	r3, r2, r3
 80034c8:	69ba      	ldr	r2, [r7, #24]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	69ba      	ldr	r2, [r7, #24]
 80034d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	f000 80a2 	beq.w	8003626 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034e2:	2300      	movs	r3, #0
 80034e4:	60fb      	str	r3, [r7, #12]
 80034e6:	4b57      	ldr	r3, [pc, #348]	; (8003644 <HAL_GPIO_Init+0x2e8>)
 80034e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ea:	4a56      	ldr	r2, [pc, #344]	; (8003644 <HAL_GPIO_Init+0x2e8>)
 80034ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034f0:	6453      	str	r3, [r2, #68]	; 0x44
 80034f2:	4b54      	ldr	r3, [pc, #336]	; (8003644 <HAL_GPIO_Init+0x2e8>)
 80034f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034fa:	60fb      	str	r3, [r7, #12]
 80034fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034fe:	4a52      	ldr	r2, [pc, #328]	; (8003648 <HAL_GPIO_Init+0x2ec>)
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	089b      	lsrs	r3, r3, #2
 8003504:	3302      	adds	r3, #2
 8003506:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800350a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	f003 0303 	and.w	r3, r3, #3
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	220f      	movs	r2, #15
 8003516:	fa02 f303 	lsl.w	r3, r2, r3
 800351a:	43db      	mvns	r3, r3
 800351c:	69ba      	ldr	r2, [r7, #24]
 800351e:	4013      	ands	r3, r2
 8003520:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a49      	ldr	r2, [pc, #292]	; (800364c <HAL_GPIO_Init+0x2f0>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d019      	beq.n	800355e <HAL_GPIO_Init+0x202>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a48      	ldr	r2, [pc, #288]	; (8003650 <HAL_GPIO_Init+0x2f4>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d013      	beq.n	800355a <HAL_GPIO_Init+0x1fe>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a47      	ldr	r2, [pc, #284]	; (8003654 <HAL_GPIO_Init+0x2f8>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d00d      	beq.n	8003556 <HAL_GPIO_Init+0x1fa>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a46      	ldr	r2, [pc, #280]	; (8003658 <HAL_GPIO_Init+0x2fc>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d007      	beq.n	8003552 <HAL_GPIO_Init+0x1f6>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a45      	ldr	r2, [pc, #276]	; (800365c <HAL_GPIO_Init+0x300>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d101      	bne.n	800354e <HAL_GPIO_Init+0x1f2>
 800354a:	2304      	movs	r3, #4
 800354c:	e008      	b.n	8003560 <HAL_GPIO_Init+0x204>
 800354e:	2307      	movs	r3, #7
 8003550:	e006      	b.n	8003560 <HAL_GPIO_Init+0x204>
 8003552:	2303      	movs	r3, #3
 8003554:	e004      	b.n	8003560 <HAL_GPIO_Init+0x204>
 8003556:	2302      	movs	r3, #2
 8003558:	e002      	b.n	8003560 <HAL_GPIO_Init+0x204>
 800355a:	2301      	movs	r3, #1
 800355c:	e000      	b.n	8003560 <HAL_GPIO_Init+0x204>
 800355e:	2300      	movs	r3, #0
 8003560:	69fa      	ldr	r2, [r7, #28]
 8003562:	f002 0203 	and.w	r2, r2, #3
 8003566:	0092      	lsls	r2, r2, #2
 8003568:	4093      	lsls	r3, r2
 800356a:	69ba      	ldr	r2, [r7, #24]
 800356c:	4313      	orrs	r3, r2
 800356e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003570:	4935      	ldr	r1, [pc, #212]	; (8003648 <HAL_GPIO_Init+0x2ec>)
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	089b      	lsrs	r3, r3, #2
 8003576:	3302      	adds	r3, #2
 8003578:	69ba      	ldr	r2, [r7, #24]
 800357a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800357e:	4b38      	ldr	r3, [pc, #224]	; (8003660 <HAL_GPIO_Init+0x304>)
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	43db      	mvns	r3, r3
 8003588:	69ba      	ldr	r2, [r7, #24]
 800358a:	4013      	ands	r3, r2
 800358c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d003      	beq.n	80035a2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800359a:	69ba      	ldr	r2, [r7, #24]
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	4313      	orrs	r3, r2
 80035a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035a2:	4a2f      	ldr	r2, [pc, #188]	; (8003660 <HAL_GPIO_Init+0x304>)
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80035a8:	4b2d      	ldr	r3, [pc, #180]	; (8003660 <HAL_GPIO_Init+0x304>)
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	43db      	mvns	r3, r3
 80035b2:	69ba      	ldr	r2, [r7, #24]
 80035b4:	4013      	ands	r3, r2
 80035b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d003      	beq.n	80035cc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80035c4:	69ba      	ldr	r2, [r7, #24]
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80035cc:	4a24      	ldr	r2, [pc, #144]	; (8003660 <HAL_GPIO_Init+0x304>)
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80035d2:	4b23      	ldr	r3, [pc, #140]	; (8003660 <HAL_GPIO_Init+0x304>)
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	43db      	mvns	r3, r3
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	4013      	ands	r3, r2
 80035e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d003      	beq.n	80035f6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80035ee:	69ba      	ldr	r2, [r7, #24]
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035f6:	4a1a      	ldr	r2, [pc, #104]	; (8003660 <HAL_GPIO_Init+0x304>)
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035fc:	4b18      	ldr	r3, [pc, #96]	; (8003660 <HAL_GPIO_Init+0x304>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	43db      	mvns	r3, r3
 8003606:	69ba      	ldr	r2, [r7, #24]
 8003608:	4013      	ands	r3, r2
 800360a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003614:	2b00      	cmp	r3, #0
 8003616:	d003      	beq.n	8003620 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003618:	69ba      	ldr	r2, [r7, #24]
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	4313      	orrs	r3, r2
 800361e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003620:	4a0f      	ldr	r2, [pc, #60]	; (8003660 <HAL_GPIO_Init+0x304>)
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	3301      	adds	r3, #1
 800362a:	61fb      	str	r3, [r7, #28]
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	2b0f      	cmp	r3, #15
 8003630:	f67f aea2 	bls.w	8003378 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003634:	bf00      	nop
 8003636:	bf00      	nop
 8003638:	3724      	adds	r7, #36	; 0x24
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	40023800 	.word	0x40023800
 8003648:	40013800 	.word	0x40013800
 800364c:	40020000 	.word	0x40020000
 8003650:	40020400 	.word	0x40020400
 8003654:	40020800 	.word	0x40020800
 8003658:	40020c00 	.word	0x40020c00
 800365c:	40021000 	.word	0x40021000
 8003660:	40013c00 	.word	0x40013c00

08003664 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	460b      	mov	r3, r1
 800366e:	807b      	strh	r3, [r7, #2]
 8003670:	4613      	mov	r3, r2
 8003672:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003674:	787b      	ldrb	r3, [r7, #1]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d003      	beq.n	8003682 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800367a:	887a      	ldrh	r2, [r7, #2]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003680:	e003      	b.n	800368a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003682:	887b      	ldrh	r3, [r7, #2]
 8003684:	041a      	lsls	r2, r3, #16
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	619a      	str	r2, [r3, #24]
}
 800368a:	bf00      	nop
 800368c:	370c      	adds	r7, #12
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
	...

08003698 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d101      	bne.n	80036aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e12b      	b.n	8003902 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d106      	bne.n	80036c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f7fe fa2e 	bl	8001b20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2224      	movs	r2, #36	; 0x24
 80036c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f022 0201 	bic.w	r2, r2, #1
 80036da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80036fc:	f001 f888 	bl	8004810 <HAL_RCC_GetPCLK1Freq>
 8003700:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	4a81      	ldr	r2, [pc, #516]	; (800390c <HAL_I2C_Init+0x274>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d807      	bhi.n	800371c <HAL_I2C_Init+0x84>
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	4a80      	ldr	r2, [pc, #512]	; (8003910 <HAL_I2C_Init+0x278>)
 8003710:	4293      	cmp	r3, r2
 8003712:	bf94      	ite	ls
 8003714:	2301      	movls	r3, #1
 8003716:	2300      	movhi	r3, #0
 8003718:	b2db      	uxtb	r3, r3
 800371a:	e006      	b.n	800372a <HAL_I2C_Init+0x92>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	4a7d      	ldr	r2, [pc, #500]	; (8003914 <HAL_I2C_Init+0x27c>)
 8003720:	4293      	cmp	r3, r2
 8003722:	bf94      	ite	ls
 8003724:	2301      	movls	r3, #1
 8003726:	2300      	movhi	r3, #0
 8003728:	b2db      	uxtb	r3, r3
 800372a:	2b00      	cmp	r3, #0
 800372c:	d001      	beq.n	8003732 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e0e7      	b.n	8003902 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	4a78      	ldr	r2, [pc, #480]	; (8003918 <HAL_I2C_Init+0x280>)
 8003736:	fba2 2303 	umull	r2, r3, r2, r3
 800373a:	0c9b      	lsrs	r3, r3, #18
 800373c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	68ba      	ldr	r2, [r7, #8]
 800374e:	430a      	orrs	r2, r1
 8003750:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	6a1b      	ldr	r3, [r3, #32]
 8003758:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	4a6a      	ldr	r2, [pc, #424]	; (800390c <HAL_I2C_Init+0x274>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d802      	bhi.n	800376c <HAL_I2C_Init+0xd4>
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	3301      	adds	r3, #1
 800376a:	e009      	b.n	8003780 <HAL_I2C_Init+0xe8>
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003772:	fb02 f303 	mul.w	r3, r2, r3
 8003776:	4a69      	ldr	r2, [pc, #420]	; (800391c <HAL_I2C_Init+0x284>)
 8003778:	fba2 2303 	umull	r2, r3, r2, r3
 800377c:	099b      	lsrs	r3, r3, #6
 800377e:	3301      	adds	r3, #1
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	6812      	ldr	r2, [r2, #0]
 8003784:	430b      	orrs	r3, r1
 8003786:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	69db      	ldr	r3, [r3, #28]
 800378e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003792:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	495c      	ldr	r1, [pc, #368]	; (800390c <HAL_I2C_Init+0x274>)
 800379c:	428b      	cmp	r3, r1
 800379e:	d819      	bhi.n	80037d4 <HAL_I2C_Init+0x13c>
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	1e59      	subs	r1, r3, #1
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	005b      	lsls	r3, r3, #1
 80037aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80037ae:	1c59      	adds	r1, r3, #1
 80037b0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80037b4:	400b      	ands	r3, r1
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d00a      	beq.n	80037d0 <HAL_I2C_Init+0x138>
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	1e59      	subs	r1, r3, #1
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	005b      	lsls	r3, r3, #1
 80037c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80037c8:	3301      	adds	r3, #1
 80037ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037ce:	e051      	b.n	8003874 <HAL_I2C_Init+0x1dc>
 80037d0:	2304      	movs	r3, #4
 80037d2:	e04f      	b.n	8003874 <HAL_I2C_Init+0x1dc>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d111      	bne.n	8003800 <HAL_I2C_Init+0x168>
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	1e58      	subs	r0, r3, #1
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6859      	ldr	r1, [r3, #4]
 80037e4:	460b      	mov	r3, r1
 80037e6:	005b      	lsls	r3, r3, #1
 80037e8:	440b      	add	r3, r1
 80037ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80037ee:	3301      	adds	r3, #1
 80037f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	bf0c      	ite	eq
 80037f8:	2301      	moveq	r3, #1
 80037fa:	2300      	movne	r3, #0
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	e012      	b.n	8003826 <HAL_I2C_Init+0x18e>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	1e58      	subs	r0, r3, #1
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6859      	ldr	r1, [r3, #4]
 8003808:	460b      	mov	r3, r1
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	440b      	add	r3, r1
 800380e:	0099      	lsls	r1, r3, #2
 8003810:	440b      	add	r3, r1
 8003812:	fbb0 f3f3 	udiv	r3, r0, r3
 8003816:	3301      	adds	r3, #1
 8003818:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800381c:	2b00      	cmp	r3, #0
 800381e:	bf0c      	ite	eq
 8003820:	2301      	moveq	r3, #1
 8003822:	2300      	movne	r3, #0
 8003824:	b2db      	uxtb	r3, r3
 8003826:	2b00      	cmp	r3, #0
 8003828:	d001      	beq.n	800382e <HAL_I2C_Init+0x196>
 800382a:	2301      	movs	r3, #1
 800382c:	e022      	b.n	8003874 <HAL_I2C_Init+0x1dc>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d10e      	bne.n	8003854 <HAL_I2C_Init+0x1bc>
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	1e58      	subs	r0, r3, #1
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6859      	ldr	r1, [r3, #4]
 800383e:	460b      	mov	r3, r1
 8003840:	005b      	lsls	r3, r3, #1
 8003842:	440b      	add	r3, r1
 8003844:	fbb0 f3f3 	udiv	r3, r0, r3
 8003848:	3301      	adds	r3, #1
 800384a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800384e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003852:	e00f      	b.n	8003874 <HAL_I2C_Init+0x1dc>
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	1e58      	subs	r0, r3, #1
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6859      	ldr	r1, [r3, #4]
 800385c:	460b      	mov	r3, r1
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	440b      	add	r3, r1
 8003862:	0099      	lsls	r1, r3, #2
 8003864:	440b      	add	r3, r1
 8003866:	fbb0 f3f3 	udiv	r3, r0, r3
 800386a:	3301      	adds	r3, #1
 800386c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003870:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003874:	6879      	ldr	r1, [r7, #4]
 8003876:	6809      	ldr	r1, [r1, #0]
 8003878:	4313      	orrs	r3, r2
 800387a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	69da      	ldr	r2, [r3, #28]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a1b      	ldr	r3, [r3, #32]
 800388e:	431a      	orrs	r2, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	430a      	orrs	r2, r1
 8003896:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80038a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	6911      	ldr	r1, [r2, #16]
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	68d2      	ldr	r2, [r2, #12]
 80038ae:	4311      	orrs	r1, r2
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	6812      	ldr	r2, [r2, #0]
 80038b4:	430b      	orrs	r3, r1
 80038b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	695a      	ldr	r2, [r3, #20]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	699b      	ldr	r3, [r3, #24]
 80038ca:	431a      	orrs	r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	430a      	orrs	r2, r1
 80038d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f042 0201 	orr.w	r2, r2, #1
 80038e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2220      	movs	r2, #32
 80038ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3710      	adds	r7, #16
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	000186a0 	.word	0x000186a0
 8003910:	001e847f 	.word	0x001e847f
 8003914:	003d08ff 	.word	0x003d08ff
 8003918:	431bde83 	.word	0x431bde83
 800391c:	10624dd3 	.word	0x10624dd3

08003920 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b088      	sub	sp, #32
 8003924:	af02      	add	r7, sp, #8
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	607a      	str	r2, [r7, #4]
 800392a:	461a      	mov	r2, r3
 800392c:	460b      	mov	r3, r1
 800392e:	817b      	strh	r3, [r7, #10]
 8003930:	4613      	mov	r3, r2
 8003932:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003934:	f7fe fb4a 	bl	8001fcc <HAL_GetTick>
 8003938:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003940:	b2db      	uxtb	r3, r3
 8003942:	2b20      	cmp	r3, #32
 8003944:	f040 80e0 	bne.w	8003b08 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	9300      	str	r3, [sp, #0]
 800394c:	2319      	movs	r3, #25
 800394e:	2201      	movs	r2, #1
 8003950:	4970      	ldr	r1, [pc, #448]	; (8003b14 <HAL_I2C_Master_Transmit+0x1f4>)
 8003952:	68f8      	ldr	r0, [r7, #12]
 8003954:	f000 f964 	bl	8003c20 <I2C_WaitOnFlagUntilTimeout>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d001      	beq.n	8003962 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800395e:	2302      	movs	r3, #2
 8003960:	e0d3      	b.n	8003b0a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003968:	2b01      	cmp	r3, #1
 800396a:	d101      	bne.n	8003970 <HAL_I2C_Master_Transmit+0x50>
 800396c:	2302      	movs	r3, #2
 800396e:	e0cc      	b.n	8003b0a <HAL_I2C_Master_Transmit+0x1ea>
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	2b01      	cmp	r3, #1
 8003984:	d007      	beq.n	8003996 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f042 0201 	orr.w	r2, r2, #1
 8003994:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039a4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2221      	movs	r2, #33	; 0x21
 80039aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2210      	movs	r2, #16
 80039b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	893a      	ldrh	r2, [r7, #8]
 80039c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039cc:	b29a      	uxth	r2, r3
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	4a50      	ldr	r2, [pc, #320]	; (8003b18 <HAL_I2C_Master_Transmit+0x1f8>)
 80039d6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80039d8:	8979      	ldrh	r1, [r7, #10]
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	6a3a      	ldr	r2, [r7, #32]
 80039de:	68f8      	ldr	r0, [r7, #12]
 80039e0:	f000 f89c 	bl	8003b1c <I2C_MasterRequestWrite>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d001      	beq.n	80039ee <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e08d      	b.n	8003b0a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039ee:	2300      	movs	r3, #0
 80039f0:	613b      	str	r3, [r7, #16]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	695b      	ldr	r3, [r3, #20]
 80039f8:	613b      	str	r3, [r7, #16]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	699b      	ldr	r3, [r3, #24]
 8003a00:	613b      	str	r3, [r7, #16]
 8003a02:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003a04:	e066      	b.n	8003ad4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a06:	697a      	ldr	r2, [r7, #20]
 8003a08:	6a39      	ldr	r1, [r7, #32]
 8003a0a:	68f8      	ldr	r0, [r7, #12]
 8003a0c:	f000 f9de 	bl	8003dcc <I2C_WaitOnTXEFlagUntilTimeout>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d00d      	beq.n	8003a32 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1a:	2b04      	cmp	r3, #4
 8003a1c:	d107      	bne.n	8003a2e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a2c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e06b      	b.n	8003b0a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a36:	781a      	ldrb	r2, [r3, #0]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a42:	1c5a      	adds	r2, r3, #1
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	b29a      	uxth	r2, r3
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a5a:	3b01      	subs	r3, #1
 8003a5c:	b29a      	uxth	r2, r3
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	695b      	ldr	r3, [r3, #20]
 8003a68:	f003 0304 	and.w	r3, r3, #4
 8003a6c:	2b04      	cmp	r3, #4
 8003a6e:	d11b      	bne.n	8003aa8 <HAL_I2C_Master_Transmit+0x188>
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d017      	beq.n	8003aa8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7c:	781a      	ldrb	r2, [r3, #0]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a88:	1c5a      	adds	r2, r3, #1
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	3b01      	subs	r3, #1
 8003a96:	b29a      	uxth	r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aa0:	3b01      	subs	r3, #1
 8003aa2:	b29a      	uxth	r2, r3
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003aa8:	697a      	ldr	r2, [r7, #20]
 8003aaa:	6a39      	ldr	r1, [r7, #32]
 8003aac:	68f8      	ldr	r0, [r7, #12]
 8003aae:	f000 f9ce 	bl	8003e4e <I2C_WaitOnBTFFlagUntilTimeout>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d00d      	beq.n	8003ad4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abc:	2b04      	cmp	r3, #4
 8003abe:	d107      	bne.n	8003ad0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ace:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e01a      	b.n	8003b0a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d194      	bne.n	8003a06 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2220      	movs	r2, #32
 8003af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b04:	2300      	movs	r3, #0
 8003b06:	e000      	b.n	8003b0a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003b08:	2302      	movs	r3, #2
  }
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3718      	adds	r7, #24
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	00100002 	.word	0x00100002
 8003b18:	ffff0000 	.word	0xffff0000

08003b1c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b088      	sub	sp, #32
 8003b20:	af02      	add	r7, sp, #8
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	607a      	str	r2, [r7, #4]
 8003b26:	603b      	str	r3, [r7, #0]
 8003b28:	460b      	mov	r3, r1
 8003b2a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b30:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	2b08      	cmp	r3, #8
 8003b36:	d006      	beq.n	8003b46 <I2C_MasterRequestWrite+0x2a>
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d003      	beq.n	8003b46 <I2C_MasterRequestWrite+0x2a>
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003b44:	d108      	bne.n	8003b58 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b54:	601a      	str	r2, [r3, #0]
 8003b56:	e00b      	b.n	8003b70 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5c:	2b12      	cmp	r3, #18
 8003b5e:	d107      	bne.n	8003b70 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b6e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	9300      	str	r3, [sp, #0]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b7c:	68f8      	ldr	r0, [r7, #12]
 8003b7e:	f000 f84f 	bl	8003c20 <I2C_WaitOnFlagUntilTimeout>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d00d      	beq.n	8003ba4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b96:	d103      	bne.n	8003ba0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b9e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e035      	b.n	8003c10 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	691b      	ldr	r3, [r3, #16]
 8003ba8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bac:	d108      	bne.n	8003bc0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003bae:	897b      	ldrh	r3, [r7, #10]
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003bbc:	611a      	str	r2, [r3, #16]
 8003bbe:	e01b      	b.n	8003bf8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003bc0:	897b      	ldrh	r3, [r7, #10]
 8003bc2:	11db      	asrs	r3, r3, #7
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	f003 0306 	and.w	r3, r3, #6
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	f063 030f 	orn	r3, r3, #15
 8003bd0:	b2da      	uxtb	r2, r3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	490e      	ldr	r1, [pc, #56]	; (8003c18 <I2C_MasterRequestWrite+0xfc>)
 8003bde:	68f8      	ldr	r0, [r7, #12]
 8003be0:	f000 f875 	bl	8003cce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d001      	beq.n	8003bee <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e010      	b.n	8003c10 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003bee:	897b      	ldrh	r3, [r7, #10]
 8003bf0:	b2da      	uxtb	r2, r3
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	4907      	ldr	r1, [pc, #28]	; (8003c1c <I2C_MasterRequestWrite+0x100>)
 8003bfe:	68f8      	ldr	r0, [r7, #12]
 8003c00:	f000 f865 	bl	8003cce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d001      	beq.n	8003c0e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e000      	b.n	8003c10 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003c0e:	2300      	movs	r3, #0
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3718      	adds	r7, #24
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	00010008 	.word	0x00010008
 8003c1c:	00010002 	.word	0x00010002

08003c20 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	603b      	str	r3, [r7, #0]
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c30:	e025      	b.n	8003c7e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c38:	d021      	beq.n	8003c7e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c3a:	f7fe f9c7 	bl	8001fcc <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	683a      	ldr	r2, [r7, #0]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d302      	bcc.n	8003c50 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d116      	bne.n	8003c7e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2200      	movs	r2, #0
 8003c54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2220      	movs	r2, #32
 8003c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6a:	f043 0220 	orr.w	r2, r3, #32
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e023      	b.n	8003cc6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	0c1b      	lsrs	r3, r3, #16
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d10d      	bne.n	8003ca4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	695b      	ldr	r3, [r3, #20]
 8003c8e:	43da      	mvns	r2, r3
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	4013      	ands	r3, r2
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	bf0c      	ite	eq
 8003c9a:	2301      	moveq	r3, #1
 8003c9c:	2300      	movne	r3, #0
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	e00c      	b.n	8003cbe <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	699b      	ldr	r3, [r3, #24]
 8003caa:	43da      	mvns	r2, r3
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	4013      	ands	r3, r2
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	bf0c      	ite	eq
 8003cb6:	2301      	moveq	r3, #1
 8003cb8:	2300      	movne	r3, #0
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	79fb      	ldrb	r3, [r7, #7]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d0b6      	beq.n	8003c32 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3710      	adds	r7, #16
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}

08003cce <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003cce:	b580      	push	{r7, lr}
 8003cd0:	b084      	sub	sp, #16
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	60f8      	str	r0, [r7, #12]
 8003cd6:	60b9      	str	r1, [r7, #8]
 8003cd8:	607a      	str	r2, [r7, #4]
 8003cda:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003cdc:	e051      	b.n	8003d82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	695b      	ldr	r3, [r3, #20]
 8003ce4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ce8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cec:	d123      	bne.n	8003d36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cfc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d06:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2220      	movs	r2, #32
 8003d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d22:	f043 0204 	orr.w	r2, r3, #4
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e046      	b.n	8003dc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d3c:	d021      	beq.n	8003d82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d3e:	f7fe f945 	bl	8001fcc <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d302      	bcc.n	8003d54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d116      	bne.n	8003d82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2200      	movs	r2, #0
 8003d58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2220      	movs	r2, #32
 8003d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6e:	f043 0220 	orr.w	r2, r3, #32
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e020      	b.n	8003dc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	0c1b      	lsrs	r3, r3, #16
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d10c      	bne.n	8003da6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	695b      	ldr	r3, [r3, #20]
 8003d92:	43da      	mvns	r2, r3
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	4013      	ands	r3, r2
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	bf14      	ite	ne
 8003d9e:	2301      	movne	r3, #1
 8003da0:	2300      	moveq	r3, #0
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	e00b      	b.n	8003dbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	699b      	ldr	r3, [r3, #24]
 8003dac:	43da      	mvns	r2, r3
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	4013      	ands	r3, r2
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	bf14      	ite	ne
 8003db8:	2301      	movne	r3, #1
 8003dba:	2300      	moveq	r3, #0
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d18d      	bne.n	8003cde <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003dc2:	2300      	movs	r3, #0
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3710      	adds	r7, #16
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003dd8:	e02d      	b.n	8003e36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003dda:	68f8      	ldr	r0, [r7, #12]
 8003ddc:	f000 f878 	bl	8003ed0 <I2C_IsAcknowledgeFailed>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d001      	beq.n	8003dea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e02d      	b.n	8003e46 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003df0:	d021      	beq.n	8003e36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003df2:	f7fe f8eb 	bl	8001fcc <HAL_GetTick>
 8003df6:	4602      	mov	r2, r0
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	68ba      	ldr	r2, [r7, #8]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d302      	bcc.n	8003e08 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d116      	bne.n	8003e36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2220      	movs	r2, #32
 8003e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e22:	f043 0220 	orr.w	r2, r3, #32
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e007      	b.n	8003e46 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	695b      	ldr	r3, [r3, #20]
 8003e3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e40:	2b80      	cmp	r3, #128	; 0x80
 8003e42:	d1ca      	bne.n	8003dda <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3710      	adds	r7, #16
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	b084      	sub	sp, #16
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	60f8      	str	r0, [r7, #12]
 8003e56:	60b9      	str	r1, [r7, #8]
 8003e58:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e5a:	e02d      	b.n	8003eb8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e5c:	68f8      	ldr	r0, [r7, #12]
 8003e5e:	f000 f837 	bl	8003ed0 <I2C_IsAcknowledgeFailed>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d001      	beq.n	8003e6c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e02d      	b.n	8003ec8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e72:	d021      	beq.n	8003eb8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e74:	f7fe f8aa 	bl	8001fcc <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	68ba      	ldr	r2, [r7, #8]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d302      	bcc.n	8003e8a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d116      	bne.n	8003eb8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2220      	movs	r2, #32
 8003e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea4:	f043 0220 	orr.w	r2, r3, #32
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e007      	b.n	8003ec8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	695b      	ldr	r3, [r3, #20]
 8003ebe:	f003 0304 	and.w	r3, r3, #4
 8003ec2:	2b04      	cmp	r3, #4
 8003ec4:	d1ca      	bne.n	8003e5c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ec6:	2300      	movs	r3, #0
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3710      	adds	r7, #16
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	695b      	ldr	r3, [r3, #20]
 8003ede:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ee2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ee6:	d11b      	bne.n	8003f20 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ef0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2220      	movs	r2, #32
 8003efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0c:	f043 0204 	orr.w	r2, r3, #4
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e000      	b.n	8003f22 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	370c      	adds	r7, #12
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
	...

08003f30 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b086      	sub	sp, #24
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d101      	bne.n	8003f42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e267      	b.n	8004412 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0301 	and.w	r3, r3, #1
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d075      	beq.n	800403a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f4e:	4b88      	ldr	r3, [pc, #544]	; (8004170 <HAL_RCC_OscConfig+0x240>)
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	f003 030c 	and.w	r3, r3, #12
 8003f56:	2b04      	cmp	r3, #4
 8003f58:	d00c      	beq.n	8003f74 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f5a:	4b85      	ldr	r3, [pc, #532]	; (8004170 <HAL_RCC_OscConfig+0x240>)
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f62:	2b08      	cmp	r3, #8
 8003f64:	d112      	bne.n	8003f8c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f66:	4b82      	ldr	r3, [pc, #520]	; (8004170 <HAL_RCC_OscConfig+0x240>)
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f72:	d10b      	bne.n	8003f8c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f74:	4b7e      	ldr	r3, [pc, #504]	; (8004170 <HAL_RCC_OscConfig+0x240>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d05b      	beq.n	8004038 <HAL_RCC_OscConfig+0x108>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d157      	bne.n	8004038 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e242      	b.n	8004412 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f94:	d106      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x74>
 8003f96:	4b76      	ldr	r3, [pc, #472]	; (8004170 <HAL_RCC_OscConfig+0x240>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a75      	ldr	r2, [pc, #468]	; (8004170 <HAL_RCC_OscConfig+0x240>)
 8003f9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fa0:	6013      	str	r3, [r2, #0]
 8003fa2:	e01d      	b.n	8003fe0 <HAL_RCC_OscConfig+0xb0>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fac:	d10c      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x98>
 8003fae:	4b70      	ldr	r3, [pc, #448]	; (8004170 <HAL_RCC_OscConfig+0x240>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a6f      	ldr	r2, [pc, #444]	; (8004170 <HAL_RCC_OscConfig+0x240>)
 8003fb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fb8:	6013      	str	r3, [r2, #0]
 8003fba:	4b6d      	ldr	r3, [pc, #436]	; (8004170 <HAL_RCC_OscConfig+0x240>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a6c      	ldr	r2, [pc, #432]	; (8004170 <HAL_RCC_OscConfig+0x240>)
 8003fc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fc4:	6013      	str	r3, [r2, #0]
 8003fc6:	e00b      	b.n	8003fe0 <HAL_RCC_OscConfig+0xb0>
 8003fc8:	4b69      	ldr	r3, [pc, #420]	; (8004170 <HAL_RCC_OscConfig+0x240>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a68      	ldr	r2, [pc, #416]	; (8004170 <HAL_RCC_OscConfig+0x240>)
 8003fce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fd2:	6013      	str	r3, [r2, #0]
 8003fd4:	4b66      	ldr	r3, [pc, #408]	; (8004170 <HAL_RCC_OscConfig+0x240>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a65      	ldr	r2, [pc, #404]	; (8004170 <HAL_RCC_OscConfig+0x240>)
 8003fda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d013      	beq.n	8004010 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fe8:	f7fd fff0 	bl	8001fcc <HAL_GetTick>
 8003fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fee:	e008      	b.n	8004002 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ff0:	f7fd ffec 	bl	8001fcc <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	2b64      	cmp	r3, #100	; 0x64
 8003ffc:	d901      	bls.n	8004002 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e207      	b.n	8004412 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004002:	4b5b      	ldr	r3, [pc, #364]	; (8004170 <HAL_RCC_OscConfig+0x240>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d0f0      	beq.n	8003ff0 <HAL_RCC_OscConfig+0xc0>
 800400e:	e014      	b.n	800403a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004010:	f7fd ffdc 	bl	8001fcc <HAL_GetTick>
 8004014:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004016:	e008      	b.n	800402a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004018:	f7fd ffd8 	bl	8001fcc <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	2b64      	cmp	r3, #100	; 0x64
 8004024:	d901      	bls.n	800402a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e1f3      	b.n	8004412 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800402a:	4b51      	ldr	r3, [pc, #324]	; (8004170 <HAL_RCC_OscConfig+0x240>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d1f0      	bne.n	8004018 <HAL_RCC_OscConfig+0xe8>
 8004036:	e000      	b.n	800403a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004038:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0302 	and.w	r3, r3, #2
 8004042:	2b00      	cmp	r3, #0
 8004044:	d063      	beq.n	800410e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004046:	4b4a      	ldr	r3, [pc, #296]	; (8004170 <HAL_RCC_OscConfig+0x240>)
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	f003 030c 	and.w	r3, r3, #12
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00b      	beq.n	800406a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004052:	4b47      	ldr	r3, [pc, #284]	; (8004170 <HAL_RCC_OscConfig+0x240>)
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800405a:	2b08      	cmp	r3, #8
 800405c:	d11c      	bne.n	8004098 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800405e:	4b44      	ldr	r3, [pc, #272]	; (8004170 <HAL_RCC_OscConfig+0x240>)
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d116      	bne.n	8004098 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800406a:	4b41      	ldr	r3, [pc, #260]	; (8004170 <HAL_RCC_OscConfig+0x240>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0302 	and.w	r3, r3, #2
 8004072:	2b00      	cmp	r3, #0
 8004074:	d005      	beq.n	8004082 <HAL_RCC_OscConfig+0x152>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	2b01      	cmp	r3, #1
 800407c:	d001      	beq.n	8004082 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e1c7      	b.n	8004412 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004082:	4b3b      	ldr	r3, [pc, #236]	; (8004170 <HAL_RCC_OscConfig+0x240>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	00db      	lsls	r3, r3, #3
 8004090:	4937      	ldr	r1, [pc, #220]	; (8004170 <HAL_RCC_OscConfig+0x240>)
 8004092:	4313      	orrs	r3, r2
 8004094:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004096:	e03a      	b.n	800410e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d020      	beq.n	80040e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040a0:	4b34      	ldr	r3, [pc, #208]	; (8004174 <HAL_RCC_OscConfig+0x244>)
 80040a2:	2201      	movs	r2, #1
 80040a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040a6:	f7fd ff91 	bl	8001fcc <HAL_GetTick>
 80040aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040ac:	e008      	b.n	80040c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040ae:	f7fd ff8d 	bl	8001fcc <HAL_GetTick>
 80040b2:	4602      	mov	r2, r0
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d901      	bls.n	80040c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e1a8      	b.n	8004412 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040c0:	4b2b      	ldr	r3, [pc, #172]	; (8004170 <HAL_RCC_OscConfig+0x240>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0302 	and.w	r3, r3, #2
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d0f0      	beq.n	80040ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040cc:	4b28      	ldr	r3, [pc, #160]	; (8004170 <HAL_RCC_OscConfig+0x240>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	691b      	ldr	r3, [r3, #16]
 80040d8:	00db      	lsls	r3, r3, #3
 80040da:	4925      	ldr	r1, [pc, #148]	; (8004170 <HAL_RCC_OscConfig+0x240>)
 80040dc:	4313      	orrs	r3, r2
 80040de:	600b      	str	r3, [r1, #0]
 80040e0:	e015      	b.n	800410e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040e2:	4b24      	ldr	r3, [pc, #144]	; (8004174 <HAL_RCC_OscConfig+0x244>)
 80040e4:	2200      	movs	r2, #0
 80040e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040e8:	f7fd ff70 	bl	8001fcc <HAL_GetTick>
 80040ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040ee:	e008      	b.n	8004102 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040f0:	f7fd ff6c 	bl	8001fcc <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d901      	bls.n	8004102 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e187      	b.n	8004412 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004102:	4b1b      	ldr	r3, [pc, #108]	; (8004170 <HAL_RCC_OscConfig+0x240>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0302 	and.w	r3, r3, #2
 800410a:	2b00      	cmp	r3, #0
 800410c:	d1f0      	bne.n	80040f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 0308 	and.w	r3, r3, #8
 8004116:	2b00      	cmp	r3, #0
 8004118:	d036      	beq.n	8004188 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	695b      	ldr	r3, [r3, #20]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d016      	beq.n	8004150 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004122:	4b15      	ldr	r3, [pc, #84]	; (8004178 <HAL_RCC_OscConfig+0x248>)
 8004124:	2201      	movs	r2, #1
 8004126:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004128:	f7fd ff50 	bl	8001fcc <HAL_GetTick>
 800412c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800412e:	e008      	b.n	8004142 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004130:	f7fd ff4c 	bl	8001fcc <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	2b02      	cmp	r3, #2
 800413c:	d901      	bls.n	8004142 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e167      	b.n	8004412 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004142:	4b0b      	ldr	r3, [pc, #44]	; (8004170 <HAL_RCC_OscConfig+0x240>)
 8004144:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004146:	f003 0302 	and.w	r3, r3, #2
 800414a:	2b00      	cmp	r3, #0
 800414c:	d0f0      	beq.n	8004130 <HAL_RCC_OscConfig+0x200>
 800414e:	e01b      	b.n	8004188 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004150:	4b09      	ldr	r3, [pc, #36]	; (8004178 <HAL_RCC_OscConfig+0x248>)
 8004152:	2200      	movs	r2, #0
 8004154:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004156:	f7fd ff39 	bl	8001fcc <HAL_GetTick>
 800415a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800415c:	e00e      	b.n	800417c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800415e:	f7fd ff35 	bl	8001fcc <HAL_GetTick>
 8004162:	4602      	mov	r2, r0
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	2b02      	cmp	r3, #2
 800416a:	d907      	bls.n	800417c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	e150      	b.n	8004412 <HAL_RCC_OscConfig+0x4e2>
 8004170:	40023800 	.word	0x40023800
 8004174:	42470000 	.word	0x42470000
 8004178:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800417c:	4b88      	ldr	r3, [pc, #544]	; (80043a0 <HAL_RCC_OscConfig+0x470>)
 800417e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004180:	f003 0302 	and.w	r3, r3, #2
 8004184:	2b00      	cmp	r3, #0
 8004186:	d1ea      	bne.n	800415e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0304 	and.w	r3, r3, #4
 8004190:	2b00      	cmp	r3, #0
 8004192:	f000 8097 	beq.w	80042c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004196:	2300      	movs	r3, #0
 8004198:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800419a:	4b81      	ldr	r3, [pc, #516]	; (80043a0 <HAL_RCC_OscConfig+0x470>)
 800419c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d10f      	bne.n	80041c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041a6:	2300      	movs	r3, #0
 80041a8:	60bb      	str	r3, [r7, #8]
 80041aa:	4b7d      	ldr	r3, [pc, #500]	; (80043a0 <HAL_RCC_OscConfig+0x470>)
 80041ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ae:	4a7c      	ldr	r2, [pc, #496]	; (80043a0 <HAL_RCC_OscConfig+0x470>)
 80041b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041b4:	6413      	str	r3, [r2, #64]	; 0x40
 80041b6:	4b7a      	ldr	r3, [pc, #488]	; (80043a0 <HAL_RCC_OscConfig+0x470>)
 80041b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041be:	60bb      	str	r3, [r7, #8]
 80041c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041c2:	2301      	movs	r3, #1
 80041c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041c6:	4b77      	ldr	r3, [pc, #476]	; (80043a4 <HAL_RCC_OscConfig+0x474>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d118      	bne.n	8004204 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041d2:	4b74      	ldr	r3, [pc, #464]	; (80043a4 <HAL_RCC_OscConfig+0x474>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a73      	ldr	r2, [pc, #460]	; (80043a4 <HAL_RCC_OscConfig+0x474>)
 80041d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041de:	f7fd fef5 	bl	8001fcc <HAL_GetTick>
 80041e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041e4:	e008      	b.n	80041f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041e6:	f7fd fef1 	bl	8001fcc <HAL_GetTick>
 80041ea:	4602      	mov	r2, r0
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d901      	bls.n	80041f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	e10c      	b.n	8004412 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041f8:	4b6a      	ldr	r3, [pc, #424]	; (80043a4 <HAL_RCC_OscConfig+0x474>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004200:	2b00      	cmp	r3, #0
 8004202:	d0f0      	beq.n	80041e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	2b01      	cmp	r3, #1
 800420a:	d106      	bne.n	800421a <HAL_RCC_OscConfig+0x2ea>
 800420c:	4b64      	ldr	r3, [pc, #400]	; (80043a0 <HAL_RCC_OscConfig+0x470>)
 800420e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004210:	4a63      	ldr	r2, [pc, #396]	; (80043a0 <HAL_RCC_OscConfig+0x470>)
 8004212:	f043 0301 	orr.w	r3, r3, #1
 8004216:	6713      	str	r3, [r2, #112]	; 0x70
 8004218:	e01c      	b.n	8004254 <HAL_RCC_OscConfig+0x324>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	2b05      	cmp	r3, #5
 8004220:	d10c      	bne.n	800423c <HAL_RCC_OscConfig+0x30c>
 8004222:	4b5f      	ldr	r3, [pc, #380]	; (80043a0 <HAL_RCC_OscConfig+0x470>)
 8004224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004226:	4a5e      	ldr	r2, [pc, #376]	; (80043a0 <HAL_RCC_OscConfig+0x470>)
 8004228:	f043 0304 	orr.w	r3, r3, #4
 800422c:	6713      	str	r3, [r2, #112]	; 0x70
 800422e:	4b5c      	ldr	r3, [pc, #368]	; (80043a0 <HAL_RCC_OscConfig+0x470>)
 8004230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004232:	4a5b      	ldr	r2, [pc, #364]	; (80043a0 <HAL_RCC_OscConfig+0x470>)
 8004234:	f043 0301 	orr.w	r3, r3, #1
 8004238:	6713      	str	r3, [r2, #112]	; 0x70
 800423a:	e00b      	b.n	8004254 <HAL_RCC_OscConfig+0x324>
 800423c:	4b58      	ldr	r3, [pc, #352]	; (80043a0 <HAL_RCC_OscConfig+0x470>)
 800423e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004240:	4a57      	ldr	r2, [pc, #348]	; (80043a0 <HAL_RCC_OscConfig+0x470>)
 8004242:	f023 0301 	bic.w	r3, r3, #1
 8004246:	6713      	str	r3, [r2, #112]	; 0x70
 8004248:	4b55      	ldr	r3, [pc, #340]	; (80043a0 <HAL_RCC_OscConfig+0x470>)
 800424a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800424c:	4a54      	ldr	r2, [pc, #336]	; (80043a0 <HAL_RCC_OscConfig+0x470>)
 800424e:	f023 0304 	bic.w	r3, r3, #4
 8004252:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d015      	beq.n	8004288 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800425c:	f7fd feb6 	bl	8001fcc <HAL_GetTick>
 8004260:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004262:	e00a      	b.n	800427a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004264:	f7fd feb2 	bl	8001fcc <HAL_GetTick>
 8004268:	4602      	mov	r2, r0
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004272:	4293      	cmp	r3, r2
 8004274:	d901      	bls.n	800427a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e0cb      	b.n	8004412 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800427a:	4b49      	ldr	r3, [pc, #292]	; (80043a0 <HAL_RCC_OscConfig+0x470>)
 800427c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800427e:	f003 0302 	and.w	r3, r3, #2
 8004282:	2b00      	cmp	r3, #0
 8004284:	d0ee      	beq.n	8004264 <HAL_RCC_OscConfig+0x334>
 8004286:	e014      	b.n	80042b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004288:	f7fd fea0 	bl	8001fcc <HAL_GetTick>
 800428c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800428e:	e00a      	b.n	80042a6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004290:	f7fd fe9c 	bl	8001fcc <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	f241 3288 	movw	r2, #5000	; 0x1388
 800429e:	4293      	cmp	r3, r2
 80042a0:	d901      	bls.n	80042a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e0b5      	b.n	8004412 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042a6:	4b3e      	ldr	r3, [pc, #248]	; (80043a0 <HAL_RCC_OscConfig+0x470>)
 80042a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042aa:	f003 0302 	and.w	r3, r3, #2
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d1ee      	bne.n	8004290 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042b2:	7dfb      	ldrb	r3, [r7, #23]
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d105      	bne.n	80042c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042b8:	4b39      	ldr	r3, [pc, #228]	; (80043a0 <HAL_RCC_OscConfig+0x470>)
 80042ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042bc:	4a38      	ldr	r2, [pc, #224]	; (80043a0 <HAL_RCC_OscConfig+0x470>)
 80042be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042c2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	699b      	ldr	r3, [r3, #24]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	f000 80a1 	beq.w	8004410 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042ce:	4b34      	ldr	r3, [pc, #208]	; (80043a0 <HAL_RCC_OscConfig+0x470>)
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	f003 030c 	and.w	r3, r3, #12
 80042d6:	2b08      	cmp	r3, #8
 80042d8:	d05c      	beq.n	8004394 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	699b      	ldr	r3, [r3, #24]
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d141      	bne.n	8004366 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042e2:	4b31      	ldr	r3, [pc, #196]	; (80043a8 <HAL_RCC_OscConfig+0x478>)
 80042e4:	2200      	movs	r2, #0
 80042e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042e8:	f7fd fe70 	bl	8001fcc <HAL_GetTick>
 80042ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042ee:	e008      	b.n	8004302 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042f0:	f7fd fe6c 	bl	8001fcc <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d901      	bls.n	8004302 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e087      	b.n	8004412 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004302:	4b27      	ldr	r3, [pc, #156]	; (80043a0 <HAL_RCC_OscConfig+0x470>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d1f0      	bne.n	80042f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	69da      	ldr	r2, [r3, #28]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a1b      	ldr	r3, [r3, #32]
 8004316:	431a      	orrs	r2, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431c:	019b      	lsls	r3, r3, #6
 800431e:	431a      	orrs	r2, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004324:	085b      	lsrs	r3, r3, #1
 8004326:	3b01      	subs	r3, #1
 8004328:	041b      	lsls	r3, r3, #16
 800432a:	431a      	orrs	r2, r3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004330:	061b      	lsls	r3, r3, #24
 8004332:	491b      	ldr	r1, [pc, #108]	; (80043a0 <HAL_RCC_OscConfig+0x470>)
 8004334:	4313      	orrs	r3, r2
 8004336:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004338:	4b1b      	ldr	r3, [pc, #108]	; (80043a8 <HAL_RCC_OscConfig+0x478>)
 800433a:	2201      	movs	r2, #1
 800433c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800433e:	f7fd fe45 	bl	8001fcc <HAL_GetTick>
 8004342:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004344:	e008      	b.n	8004358 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004346:	f7fd fe41 	bl	8001fcc <HAL_GetTick>
 800434a:	4602      	mov	r2, r0
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	2b02      	cmp	r3, #2
 8004352:	d901      	bls.n	8004358 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	e05c      	b.n	8004412 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004358:	4b11      	ldr	r3, [pc, #68]	; (80043a0 <HAL_RCC_OscConfig+0x470>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d0f0      	beq.n	8004346 <HAL_RCC_OscConfig+0x416>
 8004364:	e054      	b.n	8004410 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004366:	4b10      	ldr	r3, [pc, #64]	; (80043a8 <HAL_RCC_OscConfig+0x478>)
 8004368:	2200      	movs	r2, #0
 800436a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800436c:	f7fd fe2e 	bl	8001fcc <HAL_GetTick>
 8004370:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004372:	e008      	b.n	8004386 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004374:	f7fd fe2a 	bl	8001fcc <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	2b02      	cmp	r3, #2
 8004380:	d901      	bls.n	8004386 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e045      	b.n	8004412 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004386:	4b06      	ldr	r3, [pc, #24]	; (80043a0 <HAL_RCC_OscConfig+0x470>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800438e:	2b00      	cmp	r3, #0
 8004390:	d1f0      	bne.n	8004374 <HAL_RCC_OscConfig+0x444>
 8004392:	e03d      	b.n	8004410 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	699b      	ldr	r3, [r3, #24]
 8004398:	2b01      	cmp	r3, #1
 800439a:	d107      	bne.n	80043ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	e038      	b.n	8004412 <HAL_RCC_OscConfig+0x4e2>
 80043a0:	40023800 	.word	0x40023800
 80043a4:	40007000 	.word	0x40007000
 80043a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80043ac:	4b1b      	ldr	r3, [pc, #108]	; (800441c <HAL_RCC_OscConfig+0x4ec>)
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	699b      	ldr	r3, [r3, #24]
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d028      	beq.n	800440c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d121      	bne.n	800440c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d11a      	bne.n	800440c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043d6:	68fa      	ldr	r2, [r7, #12]
 80043d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80043dc:	4013      	ands	r3, r2
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80043e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d111      	bne.n	800440c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f2:	085b      	lsrs	r3, r3, #1
 80043f4:	3b01      	subs	r3, #1
 80043f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d107      	bne.n	800440c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004406:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004408:	429a      	cmp	r2, r3
 800440a:	d001      	beq.n	8004410 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e000      	b.n	8004412 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3718      	adds	r7, #24
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	40023800 	.word	0x40023800

08004420 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d101      	bne.n	8004434 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e0cc      	b.n	80045ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004434:	4b68      	ldr	r3, [pc, #416]	; (80045d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0307 	and.w	r3, r3, #7
 800443c:	683a      	ldr	r2, [r7, #0]
 800443e:	429a      	cmp	r2, r3
 8004440:	d90c      	bls.n	800445c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004442:	4b65      	ldr	r3, [pc, #404]	; (80045d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004444:	683a      	ldr	r2, [r7, #0]
 8004446:	b2d2      	uxtb	r2, r2
 8004448:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800444a:	4b63      	ldr	r3, [pc, #396]	; (80045d8 <HAL_RCC_ClockConfig+0x1b8>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 0307 	and.w	r3, r3, #7
 8004452:	683a      	ldr	r2, [r7, #0]
 8004454:	429a      	cmp	r2, r3
 8004456:	d001      	beq.n	800445c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e0b8      	b.n	80045ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0302 	and.w	r3, r3, #2
 8004464:	2b00      	cmp	r3, #0
 8004466:	d020      	beq.n	80044aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0304 	and.w	r3, r3, #4
 8004470:	2b00      	cmp	r3, #0
 8004472:	d005      	beq.n	8004480 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004474:	4b59      	ldr	r3, [pc, #356]	; (80045dc <HAL_RCC_ClockConfig+0x1bc>)
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	4a58      	ldr	r2, [pc, #352]	; (80045dc <HAL_RCC_ClockConfig+0x1bc>)
 800447a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800447e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0308 	and.w	r3, r3, #8
 8004488:	2b00      	cmp	r3, #0
 800448a:	d005      	beq.n	8004498 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800448c:	4b53      	ldr	r3, [pc, #332]	; (80045dc <HAL_RCC_ClockConfig+0x1bc>)
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	4a52      	ldr	r2, [pc, #328]	; (80045dc <HAL_RCC_ClockConfig+0x1bc>)
 8004492:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004496:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004498:	4b50      	ldr	r3, [pc, #320]	; (80045dc <HAL_RCC_ClockConfig+0x1bc>)
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	494d      	ldr	r1, [pc, #308]	; (80045dc <HAL_RCC_ClockConfig+0x1bc>)
 80044a6:	4313      	orrs	r3, r2
 80044a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0301 	and.w	r3, r3, #1
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d044      	beq.n	8004540 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d107      	bne.n	80044ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044be:	4b47      	ldr	r3, [pc, #284]	; (80045dc <HAL_RCC_ClockConfig+0x1bc>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d119      	bne.n	80044fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e07f      	b.n	80045ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d003      	beq.n	80044de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044da:	2b03      	cmp	r3, #3
 80044dc:	d107      	bne.n	80044ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044de:	4b3f      	ldr	r3, [pc, #252]	; (80045dc <HAL_RCC_ClockConfig+0x1bc>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d109      	bne.n	80044fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e06f      	b.n	80045ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044ee:	4b3b      	ldr	r3, [pc, #236]	; (80045dc <HAL_RCC_ClockConfig+0x1bc>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0302 	and.w	r3, r3, #2
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d101      	bne.n	80044fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e067      	b.n	80045ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044fe:	4b37      	ldr	r3, [pc, #220]	; (80045dc <HAL_RCC_ClockConfig+0x1bc>)
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	f023 0203 	bic.w	r2, r3, #3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	4934      	ldr	r1, [pc, #208]	; (80045dc <HAL_RCC_ClockConfig+0x1bc>)
 800450c:	4313      	orrs	r3, r2
 800450e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004510:	f7fd fd5c 	bl	8001fcc <HAL_GetTick>
 8004514:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004516:	e00a      	b.n	800452e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004518:	f7fd fd58 	bl	8001fcc <HAL_GetTick>
 800451c:	4602      	mov	r2, r0
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	f241 3288 	movw	r2, #5000	; 0x1388
 8004526:	4293      	cmp	r3, r2
 8004528:	d901      	bls.n	800452e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	e04f      	b.n	80045ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800452e:	4b2b      	ldr	r3, [pc, #172]	; (80045dc <HAL_RCC_ClockConfig+0x1bc>)
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	f003 020c 	and.w	r2, r3, #12
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	429a      	cmp	r2, r3
 800453e:	d1eb      	bne.n	8004518 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004540:	4b25      	ldr	r3, [pc, #148]	; (80045d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0307 	and.w	r3, r3, #7
 8004548:	683a      	ldr	r2, [r7, #0]
 800454a:	429a      	cmp	r2, r3
 800454c:	d20c      	bcs.n	8004568 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800454e:	4b22      	ldr	r3, [pc, #136]	; (80045d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004550:	683a      	ldr	r2, [r7, #0]
 8004552:	b2d2      	uxtb	r2, r2
 8004554:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004556:	4b20      	ldr	r3, [pc, #128]	; (80045d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0307 	and.w	r3, r3, #7
 800455e:	683a      	ldr	r2, [r7, #0]
 8004560:	429a      	cmp	r2, r3
 8004562:	d001      	beq.n	8004568 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e032      	b.n	80045ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0304 	and.w	r3, r3, #4
 8004570:	2b00      	cmp	r3, #0
 8004572:	d008      	beq.n	8004586 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004574:	4b19      	ldr	r3, [pc, #100]	; (80045dc <HAL_RCC_ClockConfig+0x1bc>)
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	4916      	ldr	r1, [pc, #88]	; (80045dc <HAL_RCC_ClockConfig+0x1bc>)
 8004582:	4313      	orrs	r3, r2
 8004584:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0308 	and.w	r3, r3, #8
 800458e:	2b00      	cmp	r3, #0
 8004590:	d009      	beq.n	80045a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004592:	4b12      	ldr	r3, [pc, #72]	; (80045dc <HAL_RCC_ClockConfig+0x1bc>)
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	00db      	lsls	r3, r3, #3
 80045a0:	490e      	ldr	r1, [pc, #56]	; (80045dc <HAL_RCC_ClockConfig+0x1bc>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045a6:	f000 f821 	bl	80045ec <HAL_RCC_GetSysClockFreq>
 80045aa:	4602      	mov	r2, r0
 80045ac:	4b0b      	ldr	r3, [pc, #44]	; (80045dc <HAL_RCC_ClockConfig+0x1bc>)
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	091b      	lsrs	r3, r3, #4
 80045b2:	f003 030f 	and.w	r3, r3, #15
 80045b6:	490a      	ldr	r1, [pc, #40]	; (80045e0 <HAL_RCC_ClockConfig+0x1c0>)
 80045b8:	5ccb      	ldrb	r3, [r1, r3]
 80045ba:	fa22 f303 	lsr.w	r3, r2, r3
 80045be:	4a09      	ldr	r2, [pc, #36]	; (80045e4 <HAL_RCC_ClockConfig+0x1c4>)
 80045c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80045c2:	4b09      	ldr	r3, [pc, #36]	; (80045e8 <HAL_RCC_ClockConfig+0x1c8>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4618      	mov	r0, r3
 80045c8:	f7fd fcbc 	bl	8001f44 <HAL_InitTick>

  return HAL_OK;
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3710      	adds	r7, #16
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	40023c00 	.word	0x40023c00
 80045dc:	40023800 	.word	0x40023800
 80045e0:	0800a5e0 	.word	0x0800a5e0
 80045e4:	2000000c 	.word	0x2000000c
 80045e8:	20000010 	.word	0x20000010

080045ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045f0:	b094      	sub	sp, #80	; 0x50
 80045f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80045f4:	2300      	movs	r3, #0
 80045f6:	647b      	str	r3, [r7, #68]	; 0x44
 80045f8:	2300      	movs	r3, #0
 80045fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045fc:	2300      	movs	r3, #0
 80045fe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004600:	2300      	movs	r3, #0
 8004602:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004604:	4b79      	ldr	r3, [pc, #484]	; (80047ec <HAL_RCC_GetSysClockFreq+0x200>)
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	f003 030c 	and.w	r3, r3, #12
 800460c:	2b08      	cmp	r3, #8
 800460e:	d00d      	beq.n	800462c <HAL_RCC_GetSysClockFreq+0x40>
 8004610:	2b08      	cmp	r3, #8
 8004612:	f200 80e1 	bhi.w	80047d8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004616:	2b00      	cmp	r3, #0
 8004618:	d002      	beq.n	8004620 <HAL_RCC_GetSysClockFreq+0x34>
 800461a:	2b04      	cmp	r3, #4
 800461c:	d003      	beq.n	8004626 <HAL_RCC_GetSysClockFreq+0x3a>
 800461e:	e0db      	b.n	80047d8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004620:	4b73      	ldr	r3, [pc, #460]	; (80047f0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004622:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004624:	e0db      	b.n	80047de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004626:	4b73      	ldr	r3, [pc, #460]	; (80047f4 <HAL_RCC_GetSysClockFreq+0x208>)
 8004628:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800462a:	e0d8      	b.n	80047de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800462c:	4b6f      	ldr	r3, [pc, #444]	; (80047ec <HAL_RCC_GetSysClockFreq+0x200>)
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004634:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004636:	4b6d      	ldr	r3, [pc, #436]	; (80047ec <HAL_RCC_GetSysClockFreq+0x200>)
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d063      	beq.n	800470a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004642:	4b6a      	ldr	r3, [pc, #424]	; (80047ec <HAL_RCC_GetSysClockFreq+0x200>)
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	099b      	lsrs	r3, r3, #6
 8004648:	2200      	movs	r2, #0
 800464a:	63bb      	str	r3, [r7, #56]	; 0x38
 800464c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800464e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004650:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004654:	633b      	str	r3, [r7, #48]	; 0x30
 8004656:	2300      	movs	r3, #0
 8004658:	637b      	str	r3, [r7, #52]	; 0x34
 800465a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800465e:	4622      	mov	r2, r4
 8004660:	462b      	mov	r3, r5
 8004662:	f04f 0000 	mov.w	r0, #0
 8004666:	f04f 0100 	mov.w	r1, #0
 800466a:	0159      	lsls	r1, r3, #5
 800466c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004670:	0150      	lsls	r0, r2, #5
 8004672:	4602      	mov	r2, r0
 8004674:	460b      	mov	r3, r1
 8004676:	4621      	mov	r1, r4
 8004678:	1a51      	subs	r1, r2, r1
 800467a:	6139      	str	r1, [r7, #16]
 800467c:	4629      	mov	r1, r5
 800467e:	eb63 0301 	sbc.w	r3, r3, r1
 8004682:	617b      	str	r3, [r7, #20]
 8004684:	f04f 0200 	mov.w	r2, #0
 8004688:	f04f 0300 	mov.w	r3, #0
 800468c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004690:	4659      	mov	r1, fp
 8004692:	018b      	lsls	r3, r1, #6
 8004694:	4651      	mov	r1, sl
 8004696:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800469a:	4651      	mov	r1, sl
 800469c:	018a      	lsls	r2, r1, #6
 800469e:	4651      	mov	r1, sl
 80046a0:	ebb2 0801 	subs.w	r8, r2, r1
 80046a4:	4659      	mov	r1, fp
 80046a6:	eb63 0901 	sbc.w	r9, r3, r1
 80046aa:	f04f 0200 	mov.w	r2, #0
 80046ae:	f04f 0300 	mov.w	r3, #0
 80046b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80046b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80046ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80046be:	4690      	mov	r8, r2
 80046c0:	4699      	mov	r9, r3
 80046c2:	4623      	mov	r3, r4
 80046c4:	eb18 0303 	adds.w	r3, r8, r3
 80046c8:	60bb      	str	r3, [r7, #8]
 80046ca:	462b      	mov	r3, r5
 80046cc:	eb49 0303 	adc.w	r3, r9, r3
 80046d0:	60fb      	str	r3, [r7, #12]
 80046d2:	f04f 0200 	mov.w	r2, #0
 80046d6:	f04f 0300 	mov.w	r3, #0
 80046da:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80046de:	4629      	mov	r1, r5
 80046e0:	024b      	lsls	r3, r1, #9
 80046e2:	4621      	mov	r1, r4
 80046e4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80046e8:	4621      	mov	r1, r4
 80046ea:	024a      	lsls	r2, r1, #9
 80046ec:	4610      	mov	r0, r2
 80046ee:	4619      	mov	r1, r3
 80046f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046f2:	2200      	movs	r2, #0
 80046f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80046f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80046fc:	f7fc facc 	bl	8000c98 <__aeabi_uldivmod>
 8004700:	4602      	mov	r2, r0
 8004702:	460b      	mov	r3, r1
 8004704:	4613      	mov	r3, r2
 8004706:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004708:	e058      	b.n	80047bc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800470a:	4b38      	ldr	r3, [pc, #224]	; (80047ec <HAL_RCC_GetSysClockFreq+0x200>)
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	099b      	lsrs	r3, r3, #6
 8004710:	2200      	movs	r2, #0
 8004712:	4618      	mov	r0, r3
 8004714:	4611      	mov	r1, r2
 8004716:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800471a:	623b      	str	r3, [r7, #32]
 800471c:	2300      	movs	r3, #0
 800471e:	627b      	str	r3, [r7, #36]	; 0x24
 8004720:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004724:	4642      	mov	r2, r8
 8004726:	464b      	mov	r3, r9
 8004728:	f04f 0000 	mov.w	r0, #0
 800472c:	f04f 0100 	mov.w	r1, #0
 8004730:	0159      	lsls	r1, r3, #5
 8004732:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004736:	0150      	lsls	r0, r2, #5
 8004738:	4602      	mov	r2, r0
 800473a:	460b      	mov	r3, r1
 800473c:	4641      	mov	r1, r8
 800473e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004742:	4649      	mov	r1, r9
 8004744:	eb63 0b01 	sbc.w	fp, r3, r1
 8004748:	f04f 0200 	mov.w	r2, #0
 800474c:	f04f 0300 	mov.w	r3, #0
 8004750:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004754:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004758:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800475c:	ebb2 040a 	subs.w	r4, r2, sl
 8004760:	eb63 050b 	sbc.w	r5, r3, fp
 8004764:	f04f 0200 	mov.w	r2, #0
 8004768:	f04f 0300 	mov.w	r3, #0
 800476c:	00eb      	lsls	r3, r5, #3
 800476e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004772:	00e2      	lsls	r2, r4, #3
 8004774:	4614      	mov	r4, r2
 8004776:	461d      	mov	r5, r3
 8004778:	4643      	mov	r3, r8
 800477a:	18e3      	adds	r3, r4, r3
 800477c:	603b      	str	r3, [r7, #0]
 800477e:	464b      	mov	r3, r9
 8004780:	eb45 0303 	adc.w	r3, r5, r3
 8004784:	607b      	str	r3, [r7, #4]
 8004786:	f04f 0200 	mov.w	r2, #0
 800478a:	f04f 0300 	mov.w	r3, #0
 800478e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004792:	4629      	mov	r1, r5
 8004794:	028b      	lsls	r3, r1, #10
 8004796:	4621      	mov	r1, r4
 8004798:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800479c:	4621      	mov	r1, r4
 800479e:	028a      	lsls	r2, r1, #10
 80047a0:	4610      	mov	r0, r2
 80047a2:	4619      	mov	r1, r3
 80047a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047a6:	2200      	movs	r2, #0
 80047a8:	61bb      	str	r3, [r7, #24]
 80047aa:	61fa      	str	r2, [r7, #28]
 80047ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047b0:	f7fc fa72 	bl	8000c98 <__aeabi_uldivmod>
 80047b4:	4602      	mov	r2, r0
 80047b6:	460b      	mov	r3, r1
 80047b8:	4613      	mov	r3, r2
 80047ba:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80047bc:	4b0b      	ldr	r3, [pc, #44]	; (80047ec <HAL_RCC_GetSysClockFreq+0x200>)
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	0c1b      	lsrs	r3, r3, #16
 80047c2:	f003 0303 	and.w	r3, r3, #3
 80047c6:	3301      	adds	r3, #1
 80047c8:	005b      	lsls	r3, r3, #1
 80047ca:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80047cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80047ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80047d6:	e002      	b.n	80047de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80047d8:	4b05      	ldr	r3, [pc, #20]	; (80047f0 <HAL_RCC_GetSysClockFreq+0x204>)
 80047da:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80047dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3750      	adds	r7, #80	; 0x50
 80047e4:	46bd      	mov	sp, r7
 80047e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047ea:	bf00      	nop
 80047ec:	40023800 	.word	0x40023800
 80047f0:	00f42400 	.word	0x00f42400
 80047f4:	007a1200 	.word	0x007a1200

080047f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047f8:	b480      	push	{r7}
 80047fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047fc:	4b03      	ldr	r3, [pc, #12]	; (800480c <HAL_RCC_GetHCLKFreq+0x14>)
 80047fe:	681b      	ldr	r3, [r3, #0]
}
 8004800:	4618      	mov	r0, r3
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr
 800480a:	bf00      	nop
 800480c:	2000000c 	.word	0x2000000c

08004810 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004814:	f7ff fff0 	bl	80047f8 <HAL_RCC_GetHCLKFreq>
 8004818:	4602      	mov	r2, r0
 800481a:	4b05      	ldr	r3, [pc, #20]	; (8004830 <HAL_RCC_GetPCLK1Freq+0x20>)
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	0a9b      	lsrs	r3, r3, #10
 8004820:	f003 0307 	and.w	r3, r3, #7
 8004824:	4903      	ldr	r1, [pc, #12]	; (8004834 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004826:	5ccb      	ldrb	r3, [r1, r3]
 8004828:	fa22 f303 	lsr.w	r3, r2, r3
}
 800482c:	4618      	mov	r0, r3
 800482e:	bd80      	pop	{r7, pc}
 8004830:	40023800 	.word	0x40023800
 8004834:	0800a5f0 	.word	0x0800a5f0

08004838 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800483c:	f7ff ffdc 	bl	80047f8 <HAL_RCC_GetHCLKFreq>
 8004840:	4602      	mov	r2, r0
 8004842:	4b05      	ldr	r3, [pc, #20]	; (8004858 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	0b5b      	lsrs	r3, r3, #13
 8004848:	f003 0307 	and.w	r3, r3, #7
 800484c:	4903      	ldr	r1, [pc, #12]	; (800485c <HAL_RCC_GetPCLK2Freq+0x24>)
 800484e:	5ccb      	ldrb	r3, [r1, r3]
 8004850:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004854:	4618      	mov	r0, r3
 8004856:	bd80      	pop	{r7, pc}
 8004858:	40023800 	.word	0x40023800
 800485c:	0800a5f0 	.word	0x0800a5f0

08004860 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b082      	sub	sp, #8
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d101      	bne.n	8004872 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e041      	b.n	80048f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004878:	b2db      	uxtb	r3, r3
 800487a:	2b00      	cmp	r3, #0
 800487c:	d106      	bne.n	800488c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f7fd f992 	bl	8001bb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2202      	movs	r2, #2
 8004890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	3304      	adds	r3, #4
 800489c:	4619      	mov	r1, r3
 800489e:	4610      	mov	r0, r2
 80048a0:	f000 f950 	bl	8004b44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048f4:	2300      	movs	r3, #0
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3708      	adds	r7, #8
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
	...

08004900 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004900:	b480      	push	{r7}
 8004902:	b085      	sub	sp, #20
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800490e:	b2db      	uxtb	r3, r3
 8004910:	2b01      	cmp	r3, #1
 8004912:	d001      	beq.n	8004918 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e03c      	b.n	8004992 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2202      	movs	r2, #2
 800491c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a1e      	ldr	r2, [pc, #120]	; (80049a0 <HAL_TIM_Base_Start+0xa0>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d018      	beq.n	800495c <HAL_TIM_Base_Start+0x5c>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004932:	d013      	beq.n	800495c <HAL_TIM_Base_Start+0x5c>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a1a      	ldr	r2, [pc, #104]	; (80049a4 <HAL_TIM_Base_Start+0xa4>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d00e      	beq.n	800495c <HAL_TIM_Base_Start+0x5c>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a19      	ldr	r2, [pc, #100]	; (80049a8 <HAL_TIM_Base_Start+0xa8>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d009      	beq.n	800495c <HAL_TIM_Base_Start+0x5c>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a17      	ldr	r2, [pc, #92]	; (80049ac <HAL_TIM_Base_Start+0xac>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d004      	beq.n	800495c <HAL_TIM_Base_Start+0x5c>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a16      	ldr	r2, [pc, #88]	; (80049b0 <HAL_TIM_Base_Start+0xb0>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d111      	bne.n	8004980 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f003 0307 	and.w	r3, r3, #7
 8004966:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2b06      	cmp	r3, #6
 800496c:	d010      	beq.n	8004990 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f042 0201 	orr.w	r2, r2, #1
 800497c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800497e:	e007      	b.n	8004990 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f042 0201 	orr.w	r2, r2, #1
 800498e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	3714      	adds	r7, #20
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop
 80049a0:	40010000 	.word	0x40010000
 80049a4:	40000400 	.word	0x40000400
 80049a8:	40000800 	.word	0x40000800
 80049ac:	40000c00 	.word	0x40000c00
 80049b0:	40014000 	.word	0x40014000

080049b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b084      	sub	sp, #16
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049be:	2300      	movs	r3, #0
 80049c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d101      	bne.n	80049d0 <HAL_TIM_ConfigClockSource+0x1c>
 80049cc:	2302      	movs	r3, #2
 80049ce:	e0b4      	b.n	8004b3a <HAL_TIM_ConfigClockSource+0x186>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2202      	movs	r2, #2
 80049dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80049ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	68ba      	ldr	r2, [r7, #8]
 80049fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a08:	d03e      	beq.n	8004a88 <HAL_TIM_ConfigClockSource+0xd4>
 8004a0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a0e:	f200 8087 	bhi.w	8004b20 <HAL_TIM_ConfigClockSource+0x16c>
 8004a12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a16:	f000 8086 	beq.w	8004b26 <HAL_TIM_ConfigClockSource+0x172>
 8004a1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a1e:	d87f      	bhi.n	8004b20 <HAL_TIM_ConfigClockSource+0x16c>
 8004a20:	2b70      	cmp	r3, #112	; 0x70
 8004a22:	d01a      	beq.n	8004a5a <HAL_TIM_ConfigClockSource+0xa6>
 8004a24:	2b70      	cmp	r3, #112	; 0x70
 8004a26:	d87b      	bhi.n	8004b20 <HAL_TIM_ConfigClockSource+0x16c>
 8004a28:	2b60      	cmp	r3, #96	; 0x60
 8004a2a:	d050      	beq.n	8004ace <HAL_TIM_ConfigClockSource+0x11a>
 8004a2c:	2b60      	cmp	r3, #96	; 0x60
 8004a2e:	d877      	bhi.n	8004b20 <HAL_TIM_ConfigClockSource+0x16c>
 8004a30:	2b50      	cmp	r3, #80	; 0x50
 8004a32:	d03c      	beq.n	8004aae <HAL_TIM_ConfigClockSource+0xfa>
 8004a34:	2b50      	cmp	r3, #80	; 0x50
 8004a36:	d873      	bhi.n	8004b20 <HAL_TIM_ConfigClockSource+0x16c>
 8004a38:	2b40      	cmp	r3, #64	; 0x40
 8004a3a:	d058      	beq.n	8004aee <HAL_TIM_ConfigClockSource+0x13a>
 8004a3c:	2b40      	cmp	r3, #64	; 0x40
 8004a3e:	d86f      	bhi.n	8004b20 <HAL_TIM_ConfigClockSource+0x16c>
 8004a40:	2b30      	cmp	r3, #48	; 0x30
 8004a42:	d064      	beq.n	8004b0e <HAL_TIM_ConfigClockSource+0x15a>
 8004a44:	2b30      	cmp	r3, #48	; 0x30
 8004a46:	d86b      	bhi.n	8004b20 <HAL_TIM_ConfigClockSource+0x16c>
 8004a48:	2b20      	cmp	r3, #32
 8004a4a:	d060      	beq.n	8004b0e <HAL_TIM_ConfigClockSource+0x15a>
 8004a4c:	2b20      	cmp	r3, #32
 8004a4e:	d867      	bhi.n	8004b20 <HAL_TIM_ConfigClockSource+0x16c>
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d05c      	beq.n	8004b0e <HAL_TIM_ConfigClockSource+0x15a>
 8004a54:	2b10      	cmp	r3, #16
 8004a56:	d05a      	beq.n	8004b0e <HAL_TIM_ConfigClockSource+0x15a>
 8004a58:	e062      	b.n	8004b20 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6818      	ldr	r0, [r3, #0]
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	6899      	ldr	r1, [r3, #8]
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	685a      	ldr	r2, [r3, #4]
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	f000 f965 	bl	8004d38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a7c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	68ba      	ldr	r2, [r7, #8]
 8004a84:	609a      	str	r2, [r3, #8]
      break;
 8004a86:	e04f      	b.n	8004b28 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6818      	ldr	r0, [r3, #0]
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	6899      	ldr	r1, [r3, #8]
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	685a      	ldr	r2, [r3, #4]
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	f000 f94e 	bl	8004d38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	689a      	ldr	r2, [r3, #8]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004aaa:	609a      	str	r2, [r3, #8]
      break;
 8004aac:	e03c      	b.n	8004b28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6818      	ldr	r0, [r3, #0]
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	6859      	ldr	r1, [r3, #4]
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	461a      	mov	r2, r3
 8004abc:	f000 f8c2 	bl	8004c44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2150      	movs	r1, #80	; 0x50
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f000 f91b 	bl	8004d02 <TIM_ITRx_SetConfig>
      break;
 8004acc:	e02c      	b.n	8004b28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6818      	ldr	r0, [r3, #0]
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	6859      	ldr	r1, [r3, #4]
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	461a      	mov	r2, r3
 8004adc:	f000 f8e1 	bl	8004ca2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2160      	movs	r1, #96	; 0x60
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f000 f90b 	bl	8004d02 <TIM_ITRx_SetConfig>
      break;
 8004aec:	e01c      	b.n	8004b28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6818      	ldr	r0, [r3, #0]
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	6859      	ldr	r1, [r3, #4]
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	461a      	mov	r2, r3
 8004afc:	f000 f8a2 	bl	8004c44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2140      	movs	r1, #64	; 0x40
 8004b06:	4618      	mov	r0, r3
 8004b08:	f000 f8fb 	bl	8004d02 <TIM_ITRx_SetConfig>
      break;
 8004b0c:	e00c      	b.n	8004b28 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4619      	mov	r1, r3
 8004b18:	4610      	mov	r0, r2
 8004b1a:	f000 f8f2 	bl	8004d02 <TIM_ITRx_SetConfig>
      break;
 8004b1e:	e003      	b.n	8004b28 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	73fb      	strb	r3, [r7, #15]
      break;
 8004b24:	e000      	b.n	8004b28 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004b26:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3710      	adds	r7, #16
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
	...

08004b44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b085      	sub	sp, #20
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4a34      	ldr	r2, [pc, #208]	; (8004c28 <TIM_Base_SetConfig+0xe4>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d00f      	beq.n	8004b7c <TIM_Base_SetConfig+0x38>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b62:	d00b      	beq.n	8004b7c <TIM_Base_SetConfig+0x38>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4a31      	ldr	r2, [pc, #196]	; (8004c2c <TIM_Base_SetConfig+0xe8>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d007      	beq.n	8004b7c <TIM_Base_SetConfig+0x38>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4a30      	ldr	r2, [pc, #192]	; (8004c30 <TIM_Base_SetConfig+0xec>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d003      	beq.n	8004b7c <TIM_Base_SetConfig+0x38>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	4a2f      	ldr	r2, [pc, #188]	; (8004c34 <TIM_Base_SetConfig+0xf0>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d108      	bne.n	8004b8e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	68fa      	ldr	r2, [r7, #12]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4a25      	ldr	r2, [pc, #148]	; (8004c28 <TIM_Base_SetConfig+0xe4>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d01b      	beq.n	8004bce <TIM_Base_SetConfig+0x8a>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b9c:	d017      	beq.n	8004bce <TIM_Base_SetConfig+0x8a>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a22      	ldr	r2, [pc, #136]	; (8004c2c <TIM_Base_SetConfig+0xe8>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d013      	beq.n	8004bce <TIM_Base_SetConfig+0x8a>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a21      	ldr	r2, [pc, #132]	; (8004c30 <TIM_Base_SetConfig+0xec>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d00f      	beq.n	8004bce <TIM_Base_SetConfig+0x8a>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4a20      	ldr	r2, [pc, #128]	; (8004c34 <TIM_Base_SetConfig+0xf0>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d00b      	beq.n	8004bce <TIM_Base_SetConfig+0x8a>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4a1f      	ldr	r2, [pc, #124]	; (8004c38 <TIM_Base_SetConfig+0xf4>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d007      	beq.n	8004bce <TIM_Base_SetConfig+0x8a>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a1e      	ldr	r2, [pc, #120]	; (8004c3c <TIM_Base_SetConfig+0xf8>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d003      	beq.n	8004bce <TIM_Base_SetConfig+0x8a>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4a1d      	ldr	r2, [pc, #116]	; (8004c40 <TIM_Base_SetConfig+0xfc>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d108      	bne.n	8004be0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	68fa      	ldr	r2, [r7, #12]
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	695b      	ldr	r3, [r3, #20]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	68fa      	ldr	r2, [r7, #12]
 8004bf2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	689a      	ldr	r2, [r3, #8]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	4a08      	ldr	r2, [pc, #32]	; (8004c28 <TIM_Base_SetConfig+0xe4>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d103      	bne.n	8004c14 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	691a      	ldr	r2, [r3, #16]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	615a      	str	r2, [r3, #20]
}
 8004c1a:	bf00      	nop
 8004c1c:	3714      	adds	r7, #20
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr
 8004c26:	bf00      	nop
 8004c28:	40010000 	.word	0x40010000
 8004c2c:	40000400 	.word	0x40000400
 8004c30:	40000800 	.word	0x40000800
 8004c34:	40000c00 	.word	0x40000c00
 8004c38:	40014000 	.word	0x40014000
 8004c3c:	40014400 	.word	0x40014400
 8004c40:	40014800 	.word	0x40014800

08004c44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b087      	sub	sp, #28
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	60b9      	str	r1, [r7, #8]
 8004c4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6a1b      	ldr	r3, [r3, #32]
 8004c54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	6a1b      	ldr	r3, [r3, #32]
 8004c5a:	f023 0201 	bic.w	r2, r3, #1
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	699b      	ldr	r3, [r3, #24]
 8004c66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	011b      	lsls	r3, r3, #4
 8004c74:	693a      	ldr	r2, [r7, #16]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	f023 030a 	bic.w	r3, r3, #10
 8004c80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c82:	697a      	ldr	r2, [r7, #20]
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	4313      	orrs	r3, r2
 8004c88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	693a      	ldr	r2, [r7, #16]
 8004c8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	697a      	ldr	r2, [r7, #20]
 8004c94:	621a      	str	r2, [r3, #32]
}
 8004c96:	bf00      	nop
 8004c98:	371c      	adds	r7, #28
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr

08004ca2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ca2:	b480      	push	{r7}
 8004ca4:	b087      	sub	sp, #28
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	60f8      	str	r0, [r7, #12]
 8004caa:	60b9      	str	r1, [r7, #8]
 8004cac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	6a1b      	ldr	r3, [r3, #32]
 8004cb2:	f023 0210 	bic.w	r2, r3, #16
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	699b      	ldr	r3, [r3, #24]
 8004cbe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6a1b      	ldr	r3, [r3, #32]
 8004cc4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ccc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	031b      	lsls	r3, r3, #12
 8004cd2:	697a      	ldr	r2, [r7, #20]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004cde:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	011b      	lsls	r3, r3, #4
 8004ce4:	693a      	ldr	r2, [r7, #16]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	697a      	ldr	r2, [r7, #20]
 8004cee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	693a      	ldr	r2, [r7, #16]
 8004cf4:	621a      	str	r2, [r3, #32]
}
 8004cf6:	bf00      	nop
 8004cf8:	371c      	adds	r7, #28
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr

08004d02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d02:	b480      	push	{r7}
 8004d04:	b085      	sub	sp, #20
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
 8004d0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d1a:	683a      	ldr	r2, [r7, #0]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	f043 0307 	orr.w	r3, r3, #7
 8004d24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	68fa      	ldr	r2, [r7, #12]
 8004d2a:	609a      	str	r2, [r3, #8]
}
 8004d2c:	bf00      	nop
 8004d2e:	3714      	adds	r7, #20
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b087      	sub	sp, #28
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	60b9      	str	r1, [r7, #8]
 8004d42:	607a      	str	r2, [r7, #4]
 8004d44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	021a      	lsls	r2, r3, #8
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	431a      	orrs	r2, r3
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	697a      	ldr	r2, [r7, #20]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	697a      	ldr	r2, [r7, #20]
 8004d6a:	609a      	str	r2, [r3, #8]
}
 8004d6c:	bf00      	nop
 8004d6e:	371c      	adds	r7, #28
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr

08004d78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b085      	sub	sp, #20
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d101      	bne.n	8004d90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d8c:	2302      	movs	r3, #2
 8004d8e:	e050      	b.n	8004e32 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2202      	movs	r2, #2
 8004d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004db6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	68fa      	ldr	r2, [r7, #12]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	68fa      	ldr	r2, [r7, #12]
 8004dc8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a1c      	ldr	r2, [pc, #112]	; (8004e40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d018      	beq.n	8004e06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ddc:	d013      	beq.n	8004e06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a18      	ldr	r2, [pc, #96]	; (8004e44 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d00e      	beq.n	8004e06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a16      	ldr	r2, [pc, #88]	; (8004e48 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d009      	beq.n	8004e06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a15      	ldr	r2, [pc, #84]	; (8004e4c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d004      	beq.n	8004e06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a13      	ldr	r2, [pc, #76]	; (8004e50 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d10c      	bne.n	8004e20 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	68ba      	ldr	r2, [r7, #8]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	68ba      	ldr	r2, [r7, #8]
 8004e1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e30:	2300      	movs	r3, #0
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3714      	adds	r7, #20
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr
 8004e3e:	bf00      	nop
 8004e40:	40010000 	.word	0x40010000
 8004e44:	40000400 	.word	0x40000400
 8004e48:	40000800 	.word	0x40000800
 8004e4c:	40000c00 	.word	0x40000c00
 8004e50:	40014000 	.word	0x40014000

08004e54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b082      	sub	sp, #8
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d101      	bne.n	8004e66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e03f      	b.n	8004ee6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d106      	bne.n	8004e80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f7fc feb8 	bl	8001bf0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2224      	movs	r2, #36	; 0x24
 8004e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	68da      	ldr	r2, [r3, #12]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f000 f829 	bl	8004ef0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	691a      	ldr	r2, [r3, #16]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004eac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	695a      	ldr	r2, [r3, #20]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ebc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	68da      	ldr	r2, [r3, #12]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ecc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2220      	movs	r2, #32
 8004ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2220      	movs	r2, #32
 8004ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3708      	adds	r7, #8
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
	...

08004ef0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ef0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ef4:	b0c0      	sub	sp, #256	; 0x100
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	691b      	ldr	r3, [r3, #16]
 8004f04:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f0c:	68d9      	ldr	r1, [r3, #12]
 8004f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	ea40 0301 	orr.w	r3, r0, r1
 8004f18:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f1e:	689a      	ldr	r2, [r3, #8]
 8004f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	431a      	orrs	r2, r3
 8004f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f2c:	695b      	ldr	r3, [r3, #20]
 8004f2e:	431a      	orrs	r2, r3
 8004f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f34:	69db      	ldr	r3, [r3, #28]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004f48:	f021 010c 	bic.w	r1, r1, #12
 8004f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004f56:	430b      	orrs	r3, r1
 8004f58:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	695b      	ldr	r3, [r3, #20]
 8004f62:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004f66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f6a:	6999      	ldr	r1, [r3, #24]
 8004f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	ea40 0301 	orr.w	r3, r0, r1
 8004f76:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	4b8f      	ldr	r3, [pc, #572]	; (80051bc <UART_SetConfig+0x2cc>)
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d005      	beq.n	8004f90 <UART_SetConfig+0xa0>
 8004f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	4b8d      	ldr	r3, [pc, #564]	; (80051c0 <UART_SetConfig+0x2d0>)
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d104      	bne.n	8004f9a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f90:	f7ff fc52 	bl	8004838 <HAL_RCC_GetPCLK2Freq>
 8004f94:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004f98:	e003      	b.n	8004fa2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004f9a:	f7ff fc39 	bl	8004810 <HAL_RCC_GetPCLK1Freq>
 8004f9e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fa6:	69db      	ldr	r3, [r3, #28]
 8004fa8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fac:	f040 810c 	bne.w	80051c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004fb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004fba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004fbe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004fc2:	4622      	mov	r2, r4
 8004fc4:	462b      	mov	r3, r5
 8004fc6:	1891      	adds	r1, r2, r2
 8004fc8:	65b9      	str	r1, [r7, #88]	; 0x58
 8004fca:	415b      	adcs	r3, r3
 8004fcc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004fce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004fd2:	4621      	mov	r1, r4
 8004fd4:	eb12 0801 	adds.w	r8, r2, r1
 8004fd8:	4629      	mov	r1, r5
 8004fda:	eb43 0901 	adc.w	r9, r3, r1
 8004fde:	f04f 0200 	mov.w	r2, #0
 8004fe2:	f04f 0300 	mov.w	r3, #0
 8004fe6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004fea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004fee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ff2:	4690      	mov	r8, r2
 8004ff4:	4699      	mov	r9, r3
 8004ff6:	4623      	mov	r3, r4
 8004ff8:	eb18 0303 	adds.w	r3, r8, r3
 8004ffc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005000:	462b      	mov	r3, r5
 8005002:	eb49 0303 	adc.w	r3, r9, r3
 8005006:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800500a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005016:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800501a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800501e:	460b      	mov	r3, r1
 8005020:	18db      	adds	r3, r3, r3
 8005022:	653b      	str	r3, [r7, #80]	; 0x50
 8005024:	4613      	mov	r3, r2
 8005026:	eb42 0303 	adc.w	r3, r2, r3
 800502a:	657b      	str	r3, [r7, #84]	; 0x54
 800502c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005030:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005034:	f7fb fe30 	bl	8000c98 <__aeabi_uldivmod>
 8005038:	4602      	mov	r2, r0
 800503a:	460b      	mov	r3, r1
 800503c:	4b61      	ldr	r3, [pc, #388]	; (80051c4 <UART_SetConfig+0x2d4>)
 800503e:	fba3 2302 	umull	r2, r3, r3, r2
 8005042:	095b      	lsrs	r3, r3, #5
 8005044:	011c      	lsls	r4, r3, #4
 8005046:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800504a:	2200      	movs	r2, #0
 800504c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005050:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005054:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005058:	4642      	mov	r2, r8
 800505a:	464b      	mov	r3, r9
 800505c:	1891      	adds	r1, r2, r2
 800505e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005060:	415b      	adcs	r3, r3
 8005062:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005064:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005068:	4641      	mov	r1, r8
 800506a:	eb12 0a01 	adds.w	sl, r2, r1
 800506e:	4649      	mov	r1, r9
 8005070:	eb43 0b01 	adc.w	fp, r3, r1
 8005074:	f04f 0200 	mov.w	r2, #0
 8005078:	f04f 0300 	mov.w	r3, #0
 800507c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005080:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005084:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005088:	4692      	mov	sl, r2
 800508a:	469b      	mov	fp, r3
 800508c:	4643      	mov	r3, r8
 800508e:	eb1a 0303 	adds.w	r3, sl, r3
 8005092:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005096:	464b      	mov	r3, r9
 8005098:	eb4b 0303 	adc.w	r3, fp, r3
 800509c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80050a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80050ac:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80050b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80050b4:	460b      	mov	r3, r1
 80050b6:	18db      	adds	r3, r3, r3
 80050b8:	643b      	str	r3, [r7, #64]	; 0x40
 80050ba:	4613      	mov	r3, r2
 80050bc:	eb42 0303 	adc.w	r3, r2, r3
 80050c0:	647b      	str	r3, [r7, #68]	; 0x44
 80050c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80050c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80050ca:	f7fb fde5 	bl	8000c98 <__aeabi_uldivmod>
 80050ce:	4602      	mov	r2, r0
 80050d0:	460b      	mov	r3, r1
 80050d2:	4611      	mov	r1, r2
 80050d4:	4b3b      	ldr	r3, [pc, #236]	; (80051c4 <UART_SetConfig+0x2d4>)
 80050d6:	fba3 2301 	umull	r2, r3, r3, r1
 80050da:	095b      	lsrs	r3, r3, #5
 80050dc:	2264      	movs	r2, #100	; 0x64
 80050de:	fb02 f303 	mul.w	r3, r2, r3
 80050e2:	1acb      	subs	r3, r1, r3
 80050e4:	00db      	lsls	r3, r3, #3
 80050e6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80050ea:	4b36      	ldr	r3, [pc, #216]	; (80051c4 <UART_SetConfig+0x2d4>)
 80050ec:	fba3 2302 	umull	r2, r3, r3, r2
 80050f0:	095b      	lsrs	r3, r3, #5
 80050f2:	005b      	lsls	r3, r3, #1
 80050f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80050f8:	441c      	add	r4, r3
 80050fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050fe:	2200      	movs	r2, #0
 8005100:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005104:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005108:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800510c:	4642      	mov	r2, r8
 800510e:	464b      	mov	r3, r9
 8005110:	1891      	adds	r1, r2, r2
 8005112:	63b9      	str	r1, [r7, #56]	; 0x38
 8005114:	415b      	adcs	r3, r3
 8005116:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005118:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800511c:	4641      	mov	r1, r8
 800511e:	1851      	adds	r1, r2, r1
 8005120:	6339      	str	r1, [r7, #48]	; 0x30
 8005122:	4649      	mov	r1, r9
 8005124:	414b      	adcs	r3, r1
 8005126:	637b      	str	r3, [r7, #52]	; 0x34
 8005128:	f04f 0200 	mov.w	r2, #0
 800512c:	f04f 0300 	mov.w	r3, #0
 8005130:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005134:	4659      	mov	r1, fp
 8005136:	00cb      	lsls	r3, r1, #3
 8005138:	4651      	mov	r1, sl
 800513a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800513e:	4651      	mov	r1, sl
 8005140:	00ca      	lsls	r2, r1, #3
 8005142:	4610      	mov	r0, r2
 8005144:	4619      	mov	r1, r3
 8005146:	4603      	mov	r3, r0
 8005148:	4642      	mov	r2, r8
 800514a:	189b      	adds	r3, r3, r2
 800514c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005150:	464b      	mov	r3, r9
 8005152:	460a      	mov	r2, r1
 8005154:	eb42 0303 	adc.w	r3, r2, r3
 8005158:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800515c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005168:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800516c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005170:	460b      	mov	r3, r1
 8005172:	18db      	adds	r3, r3, r3
 8005174:	62bb      	str	r3, [r7, #40]	; 0x28
 8005176:	4613      	mov	r3, r2
 8005178:	eb42 0303 	adc.w	r3, r2, r3
 800517c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800517e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005182:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005186:	f7fb fd87 	bl	8000c98 <__aeabi_uldivmod>
 800518a:	4602      	mov	r2, r0
 800518c:	460b      	mov	r3, r1
 800518e:	4b0d      	ldr	r3, [pc, #52]	; (80051c4 <UART_SetConfig+0x2d4>)
 8005190:	fba3 1302 	umull	r1, r3, r3, r2
 8005194:	095b      	lsrs	r3, r3, #5
 8005196:	2164      	movs	r1, #100	; 0x64
 8005198:	fb01 f303 	mul.w	r3, r1, r3
 800519c:	1ad3      	subs	r3, r2, r3
 800519e:	00db      	lsls	r3, r3, #3
 80051a0:	3332      	adds	r3, #50	; 0x32
 80051a2:	4a08      	ldr	r2, [pc, #32]	; (80051c4 <UART_SetConfig+0x2d4>)
 80051a4:	fba2 2303 	umull	r2, r3, r2, r3
 80051a8:	095b      	lsrs	r3, r3, #5
 80051aa:	f003 0207 	and.w	r2, r3, #7
 80051ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4422      	add	r2, r4
 80051b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80051b8:	e105      	b.n	80053c6 <UART_SetConfig+0x4d6>
 80051ba:	bf00      	nop
 80051bc:	40011000 	.word	0x40011000
 80051c0:	40011400 	.word	0x40011400
 80051c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80051c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051cc:	2200      	movs	r2, #0
 80051ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80051d2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80051d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80051da:	4642      	mov	r2, r8
 80051dc:	464b      	mov	r3, r9
 80051de:	1891      	adds	r1, r2, r2
 80051e0:	6239      	str	r1, [r7, #32]
 80051e2:	415b      	adcs	r3, r3
 80051e4:	627b      	str	r3, [r7, #36]	; 0x24
 80051e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80051ea:	4641      	mov	r1, r8
 80051ec:	1854      	adds	r4, r2, r1
 80051ee:	4649      	mov	r1, r9
 80051f0:	eb43 0501 	adc.w	r5, r3, r1
 80051f4:	f04f 0200 	mov.w	r2, #0
 80051f8:	f04f 0300 	mov.w	r3, #0
 80051fc:	00eb      	lsls	r3, r5, #3
 80051fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005202:	00e2      	lsls	r2, r4, #3
 8005204:	4614      	mov	r4, r2
 8005206:	461d      	mov	r5, r3
 8005208:	4643      	mov	r3, r8
 800520a:	18e3      	adds	r3, r4, r3
 800520c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005210:	464b      	mov	r3, r9
 8005212:	eb45 0303 	adc.w	r3, r5, r3
 8005216:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800521a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005226:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800522a:	f04f 0200 	mov.w	r2, #0
 800522e:	f04f 0300 	mov.w	r3, #0
 8005232:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005236:	4629      	mov	r1, r5
 8005238:	008b      	lsls	r3, r1, #2
 800523a:	4621      	mov	r1, r4
 800523c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005240:	4621      	mov	r1, r4
 8005242:	008a      	lsls	r2, r1, #2
 8005244:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005248:	f7fb fd26 	bl	8000c98 <__aeabi_uldivmod>
 800524c:	4602      	mov	r2, r0
 800524e:	460b      	mov	r3, r1
 8005250:	4b60      	ldr	r3, [pc, #384]	; (80053d4 <UART_SetConfig+0x4e4>)
 8005252:	fba3 2302 	umull	r2, r3, r3, r2
 8005256:	095b      	lsrs	r3, r3, #5
 8005258:	011c      	lsls	r4, r3, #4
 800525a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800525e:	2200      	movs	r2, #0
 8005260:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005264:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005268:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800526c:	4642      	mov	r2, r8
 800526e:	464b      	mov	r3, r9
 8005270:	1891      	adds	r1, r2, r2
 8005272:	61b9      	str	r1, [r7, #24]
 8005274:	415b      	adcs	r3, r3
 8005276:	61fb      	str	r3, [r7, #28]
 8005278:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800527c:	4641      	mov	r1, r8
 800527e:	1851      	adds	r1, r2, r1
 8005280:	6139      	str	r1, [r7, #16]
 8005282:	4649      	mov	r1, r9
 8005284:	414b      	adcs	r3, r1
 8005286:	617b      	str	r3, [r7, #20]
 8005288:	f04f 0200 	mov.w	r2, #0
 800528c:	f04f 0300 	mov.w	r3, #0
 8005290:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005294:	4659      	mov	r1, fp
 8005296:	00cb      	lsls	r3, r1, #3
 8005298:	4651      	mov	r1, sl
 800529a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800529e:	4651      	mov	r1, sl
 80052a0:	00ca      	lsls	r2, r1, #3
 80052a2:	4610      	mov	r0, r2
 80052a4:	4619      	mov	r1, r3
 80052a6:	4603      	mov	r3, r0
 80052a8:	4642      	mov	r2, r8
 80052aa:	189b      	adds	r3, r3, r2
 80052ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80052b0:	464b      	mov	r3, r9
 80052b2:	460a      	mov	r2, r1
 80052b4:	eb42 0303 	adc.w	r3, r2, r3
 80052b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80052bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	67bb      	str	r3, [r7, #120]	; 0x78
 80052c6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80052c8:	f04f 0200 	mov.w	r2, #0
 80052cc:	f04f 0300 	mov.w	r3, #0
 80052d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80052d4:	4649      	mov	r1, r9
 80052d6:	008b      	lsls	r3, r1, #2
 80052d8:	4641      	mov	r1, r8
 80052da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052de:	4641      	mov	r1, r8
 80052e0:	008a      	lsls	r2, r1, #2
 80052e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80052e6:	f7fb fcd7 	bl	8000c98 <__aeabi_uldivmod>
 80052ea:	4602      	mov	r2, r0
 80052ec:	460b      	mov	r3, r1
 80052ee:	4b39      	ldr	r3, [pc, #228]	; (80053d4 <UART_SetConfig+0x4e4>)
 80052f0:	fba3 1302 	umull	r1, r3, r3, r2
 80052f4:	095b      	lsrs	r3, r3, #5
 80052f6:	2164      	movs	r1, #100	; 0x64
 80052f8:	fb01 f303 	mul.w	r3, r1, r3
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	011b      	lsls	r3, r3, #4
 8005300:	3332      	adds	r3, #50	; 0x32
 8005302:	4a34      	ldr	r2, [pc, #208]	; (80053d4 <UART_SetConfig+0x4e4>)
 8005304:	fba2 2303 	umull	r2, r3, r2, r3
 8005308:	095b      	lsrs	r3, r3, #5
 800530a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800530e:	441c      	add	r4, r3
 8005310:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005314:	2200      	movs	r2, #0
 8005316:	673b      	str	r3, [r7, #112]	; 0x70
 8005318:	677a      	str	r2, [r7, #116]	; 0x74
 800531a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800531e:	4642      	mov	r2, r8
 8005320:	464b      	mov	r3, r9
 8005322:	1891      	adds	r1, r2, r2
 8005324:	60b9      	str	r1, [r7, #8]
 8005326:	415b      	adcs	r3, r3
 8005328:	60fb      	str	r3, [r7, #12]
 800532a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800532e:	4641      	mov	r1, r8
 8005330:	1851      	adds	r1, r2, r1
 8005332:	6039      	str	r1, [r7, #0]
 8005334:	4649      	mov	r1, r9
 8005336:	414b      	adcs	r3, r1
 8005338:	607b      	str	r3, [r7, #4]
 800533a:	f04f 0200 	mov.w	r2, #0
 800533e:	f04f 0300 	mov.w	r3, #0
 8005342:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005346:	4659      	mov	r1, fp
 8005348:	00cb      	lsls	r3, r1, #3
 800534a:	4651      	mov	r1, sl
 800534c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005350:	4651      	mov	r1, sl
 8005352:	00ca      	lsls	r2, r1, #3
 8005354:	4610      	mov	r0, r2
 8005356:	4619      	mov	r1, r3
 8005358:	4603      	mov	r3, r0
 800535a:	4642      	mov	r2, r8
 800535c:	189b      	adds	r3, r3, r2
 800535e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005360:	464b      	mov	r3, r9
 8005362:	460a      	mov	r2, r1
 8005364:	eb42 0303 	adc.w	r3, r2, r3
 8005368:	66fb      	str	r3, [r7, #108]	; 0x6c
 800536a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	663b      	str	r3, [r7, #96]	; 0x60
 8005374:	667a      	str	r2, [r7, #100]	; 0x64
 8005376:	f04f 0200 	mov.w	r2, #0
 800537a:	f04f 0300 	mov.w	r3, #0
 800537e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005382:	4649      	mov	r1, r9
 8005384:	008b      	lsls	r3, r1, #2
 8005386:	4641      	mov	r1, r8
 8005388:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800538c:	4641      	mov	r1, r8
 800538e:	008a      	lsls	r2, r1, #2
 8005390:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005394:	f7fb fc80 	bl	8000c98 <__aeabi_uldivmod>
 8005398:	4602      	mov	r2, r0
 800539a:	460b      	mov	r3, r1
 800539c:	4b0d      	ldr	r3, [pc, #52]	; (80053d4 <UART_SetConfig+0x4e4>)
 800539e:	fba3 1302 	umull	r1, r3, r3, r2
 80053a2:	095b      	lsrs	r3, r3, #5
 80053a4:	2164      	movs	r1, #100	; 0x64
 80053a6:	fb01 f303 	mul.w	r3, r1, r3
 80053aa:	1ad3      	subs	r3, r2, r3
 80053ac:	011b      	lsls	r3, r3, #4
 80053ae:	3332      	adds	r3, #50	; 0x32
 80053b0:	4a08      	ldr	r2, [pc, #32]	; (80053d4 <UART_SetConfig+0x4e4>)
 80053b2:	fba2 2303 	umull	r2, r3, r2, r3
 80053b6:	095b      	lsrs	r3, r3, #5
 80053b8:	f003 020f 	and.w	r2, r3, #15
 80053bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4422      	add	r2, r4
 80053c4:	609a      	str	r2, [r3, #8]
}
 80053c6:	bf00      	nop
 80053c8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80053cc:	46bd      	mov	sp, r7
 80053ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053d2:	bf00      	nop
 80053d4:	51eb851f 	.word	0x51eb851f

080053d8 <__errno>:
 80053d8:	4b01      	ldr	r3, [pc, #4]	; (80053e0 <__errno+0x8>)
 80053da:	6818      	ldr	r0, [r3, #0]
 80053dc:	4770      	bx	lr
 80053de:	bf00      	nop
 80053e0:	20000018 	.word	0x20000018

080053e4 <__libc_init_array>:
 80053e4:	b570      	push	{r4, r5, r6, lr}
 80053e6:	4d0d      	ldr	r5, [pc, #52]	; (800541c <__libc_init_array+0x38>)
 80053e8:	4c0d      	ldr	r4, [pc, #52]	; (8005420 <__libc_init_array+0x3c>)
 80053ea:	1b64      	subs	r4, r4, r5
 80053ec:	10a4      	asrs	r4, r4, #2
 80053ee:	2600      	movs	r6, #0
 80053f0:	42a6      	cmp	r6, r4
 80053f2:	d109      	bne.n	8005408 <__libc_init_array+0x24>
 80053f4:	4d0b      	ldr	r5, [pc, #44]	; (8005424 <__libc_init_array+0x40>)
 80053f6:	4c0c      	ldr	r4, [pc, #48]	; (8005428 <__libc_init_array+0x44>)
 80053f8:	f005 f8c8 	bl	800a58c <_init>
 80053fc:	1b64      	subs	r4, r4, r5
 80053fe:	10a4      	asrs	r4, r4, #2
 8005400:	2600      	movs	r6, #0
 8005402:	42a6      	cmp	r6, r4
 8005404:	d105      	bne.n	8005412 <__libc_init_array+0x2e>
 8005406:	bd70      	pop	{r4, r5, r6, pc}
 8005408:	f855 3b04 	ldr.w	r3, [r5], #4
 800540c:	4798      	blx	r3
 800540e:	3601      	adds	r6, #1
 8005410:	e7ee      	b.n	80053f0 <__libc_init_array+0xc>
 8005412:	f855 3b04 	ldr.w	r3, [r5], #4
 8005416:	4798      	blx	r3
 8005418:	3601      	adds	r6, #1
 800541a:	e7f2      	b.n	8005402 <__libc_init_array+0x1e>
 800541c:	0800aac4 	.word	0x0800aac4
 8005420:	0800aac4 	.word	0x0800aac4
 8005424:	0800aac4 	.word	0x0800aac4
 8005428:	0800aac8 	.word	0x0800aac8

0800542c <memset>:
 800542c:	4402      	add	r2, r0
 800542e:	4603      	mov	r3, r0
 8005430:	4293      	cmp	r3, r2
 8005432:	d100      	bne.n	8005436 <memset+0xa>
 8005434:	4770      	bx	lr
 8005436:	f803 1b01 	strb.w	r1, [r3], #1
 800543a:	e7f9      	b.n	8005430 <memset+0x4>

0800543c <__cvt>:
 800543c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005440:	ec55 4b10 	vmov	r4, r5, d0
 8005444:	2d00      	cmp	r5, #0
 8005446:	460e      	mov	r6, r1
 8005448:	4619      	mov	r1, r3
 800544a:	462b      	mov	r3, r5
 800544c:	bfbb      	ittet	lt
 800544e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005452:	461d      	movlt	r5, r3
 8005454:	2300      	movge	r3, #0
 8005456:	232d      	movlt	r3, #45	; 0x2d
 8005458:	700b      	strb	r3, [r1, #0]
 800545a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800545c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005460:	4691      	mov	r9, r2
 8005462:	f023 0820 	bic.w	r8, r3, #32
 8005466:	bfbc      	itt	lt
 8005468:	4622      	movlt	r2, r4
 800546a:	4614      	movlt	r4, r2
 800546c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005470:	d005      	beq.n	800547e <__cvt+0x42>
 8005472:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005476:	d100      	bne.n	800547a <__cvt+0x3e>
 8005478:	3601      	adds	r6, #1
 800547a:	2102      	movs	r1, #2
 800547c:	e000      	b.n	8005480 <__cvt+0x44>
 800547e:	2103      	movs	r1, #3
 8005480:	ab03      	add	r3, sp, #12
 8005482:	9301      	str	r3, [sp, #4]
 8005484:	ab02      	add	r3, sp, #8
 8005486:	9300      	str	r3, [sp, #0]
 8005488:	ec45 4b10 	vmov	d0, r4, r5
 800548c:	4653      	mov	r3, sl
 800548e:	4632      	mov	r2, r6
 8005490:	f001 fe42 	bl	8007118 <_dtoa_r>
 8005494:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005498:	4607      	mov	r7, r0
 800549a:	d102      	bne.n	80054a2 <__cvt+0x66>
 800549c:	f019 0f01 	tst.w	r9, #1
 80054a0:	d022      	beq.n	80054e8 <__cvt+0xac>
 80054a2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80054a6:	eb07 0906 	add.w	r9, r7, r6
 80054aa:	d110      	bne.n	80054ce <__cvt+0x92>
 80054ac:	783b      	ldrb	r3, [r7, #0]
 80054ae:	2b30      	cmp	r3, #48	; 0x30
 80054b0:	d10a      	bne.n	80054c8 <__cvt+0x8c>
 80054b2:	2200      	movs	r2, #0
 80054b4:	2300      	movs	r3, #0
 80054b6:	4620      	mov	r0, r4
 80054b8:	4629      	mov	r1, r5
 80054ba:	f7fb fb0d 	bl	8000ad8 <__aeabi_dcmpeq>
 80054be:	b918      	cbnz	r0, 80054c8 <__cvt+0x8c>
 80054c0:	f1c6 0601 	rsb	r6, r6, #1
 80054c4:	f8ca 6000 	str.w	r6, [sl]
 80054c8:	f8da 3000 	ldr.w	r3, [sl]
 80054cc:	4499      	add	r9, r3
 80054ce:	2200      	movs	r2, #0
 80054d0:	2300      	movs	r3, #0
 80054d2:	4620      	mov	r0, r4
 80054d4:	4629      	mov	r1, r5
 80054d6:	f7fb faff 	bl	8000ad8 <__aeabi_dcmpeq>
 80054da:	b108      	cbz	r0, 80054e0 <__cvt+0xa4>
 80054dc:	f8cd 900c 	str.w	r9, [sp, #12]
 80054e0:	2230      	movs	r2, #48	; 0x30
 80054e2:	9b03      	ldr	r3, [sp, #12]
 80054e4:	454b      	cmp	r3, r9
 80054e6:	d307      	bcc.n	80054f8 <__cvt+0xbc>
 80054e8:	9b03      	ldr	r3, [sp, #12]
 80054ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80054ec:	1bdb      	subs	r3, r3, r7
 80054ee:	4638      	mov	r0, r7
 80054f0:	6013      	str	r3, [r2, #0]
 80054f2:	b004      	add	sp, #16
 80054f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054f8:	1c59      	adds	r1, r3, #1
 80054fa:	9103      	str	r1, [sp, #12]
 80054fc:	701a      	strb	r2, [r3, #0]
 80054fe:	e7f0      	b.n	80054e2 <__cvt+0xa6>

08005500 <__exponent>:
 8005500:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005502:	4603      	mov	r3, r0
 8005504:	2900      	cmp	r1, #0
 8005506:	bfb8      	it	lt
 8005508:	4249      	neglt	r1, r1
 800550a:	f803 2b02 	strb.w	r2, [r3], #2
 800550e:	bfb4      	ite	lt
 8005510:	222d      	movlt	r2, #45	; 0x2d
 8005512:	222b      	movge	r2, #43	; 0x2b
 8005514:	2909      	cmp	r1, #9
 8005516:	7042      	strb	r2, [r0, #1]
 8005518:	dd2a      	ble.n	8005570 <__exponent+0x70>
 800551a:	f10d 0407 	add.w	r4, sp, #7
 800551e:	46a4      	mov	ip, r4
 8005520:	270a      	movs	r7, #10
 8005522:	46a6      	mov	lr, r4
 8005524:	460a      	mov	r2, r1
 8005526:	fb91 f6f7 	sdiv	r6, r1, r7
 800552a:	fb07 1516 	mls	r5, r7, r6, r1
 800552e:	3530      	adds	r5, #48	; 0x30
 8005530:	2a63      	cmp	r2, #99	; 0x63
 8005532:	f104 34ff 	add.w	r4, r4, #4294967295
 8005536:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800553a:	4631      	mov	r1, r6
 800553c:	dcf1      	bgt.n	8005522 <__exponent+0x22>
 800553e:	3130      	adds	r1, #48	; 0x30
 8005540:	f1ae 0502 	sub.w	r5, lr, #2
 8005544:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005548:	1c44      	adds	r4, r0, #1
 800554a:	4629      	mov	r1, r5
 800554c:	4561      	cmp	r1, ip
 800554e:	d30a      	bcc.n	8005566 <__exponent+0x66>
 8005550:	f10d 0209 	add.w	r2, sp, #9
 8005554:	eba2 020e 	sub.w	r2, r2, lr
 8005558:	4565      	cmp	r5, ip
 800555a:	bf88      	it	hi
 800555c:	2200      	movhi	r2, #0
 800555e:	4413      	add	r3, r2
 8005560:	1a18      	subs	r0, r3, r0
 8005562:	b003      	add	sp, #12
 8005564:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005566:	f811 2b01 	ldrb.w	r2, [r1], #1
 800556a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800556e:	e7ed      	b.n	800554c <__exponent+0x4c>
 8005570:	2330      	movs	r3, #48	; 0x30
 8005572:	3130      	adds	r1, #48	; 0x30
 8005574:	7083      	strb	r3, [r0, #2]
 8005576:	70c1      	strb	r1, [r0, #3]
 8005578:	1d03      	adds	r3, r0, #4
 800557a:	e7f1      	b.n	8005560 <__exponent+0x60>

0800557c <_printf_float>:
 800557c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005580:	ed2d 8b02 	vpush	{d8}
 8005584:	b08d      	sub	sp, #52	; 0x34
 8005586:	460c      	mov	r4, r1
 8005588:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800558c:	4616      	mov	r6, r2
 800558e:	461f      	mov	r7, r3
 8005590:	4605      	mov	r5, r0
 8005592:	f002 ff1f 	bl	80083d4 <_localeconv_r>
 8005596:	f8d0 a000 	ldr.w	sl, [r0]
 800559a:	4650      	mov	r0, sl
 800559c:	f7fa fe20 	bl	80001e0 <strlen>
 80055a0:	2300      	movs	r3, #0
 80055a2:	930a      	str	r3, [sp, #40]	; 0x28
 80055a4:	6823      	ldr	r3, [r4, #0]
 80055a6:	9305      	str	r3, [sp, #20]
 80055a8:	f8d8 3000 	ldr.w	r3, [r8]
 80055ac:	f894 b018 	ldrb.w	fp, [r4, #24]
 80055b0:	3307      	adds	r3, #7
 80055b2:	f023 0307 	bic.w	r3, r3, #7
 80055b6:	f103 0208 	add.w	r2, r3, #8
 80055ba:	f8c8 2000 	str.w	r2, [r8]
 80055be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80055c6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80055ca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80055ce:	9307      	str	r3, [sp, #28]
 80055d0:	f8cd 8018 	str.w	r8, [sp, #24]
 80055d4:	ee08 0a10 	vmov	s16, r0
 80055d8:	4b9f      	ldr	r3, [pc, #636]	; (8005858 <_printf_float+0x2dc>)
 80055da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80055de:	f04f 32ff 	mov.w	r2, #4294967295
 80055e2:	f7fb faab 	bl	8000b3c <__aeabi_dcmpun>
 80055e6:	bb88      	cbnz	r0, 800564c <_printf_float+0xd0>
 80055e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80055ec:	4b9a      	ldr	r3, [pc, #616]	; (8005858 <_printf_float+0x2dc>)
 80055ee:	f04f 32ff 	mov.w	r2, #4294967295
 80055f2:	f7fb fa85 	bl	8000b00 <__aeabi_dcmple>
 80055f6:	bb48      	cbnz	r0, 800564c <_printf_float+0xd0>
 80055f8:	2200      	movs	r2, #0
 80055fa:	2300      	movs	r3, #0
 80055fc:	4640      	mov	r0, r8
 80055fe:	4649      	mov	r1, r9
 8005600:	f7fb fa74 	bl	8000aec <__aeabi_dcmplt>
 8005604:	b110      	cbz	r0, 800560c <_printf_float+0x90>
 8005606:	232d      	movs	r3, #45	; 0x2d
 8005608:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800560c:	4b93      	ldr	r3, [pc, #588]	; (800585c <_printf_float+0x2e0>)
 800560e:	4894      	ldr	r0, [pc, #592]	; (8005860 <_printf_float+0x2e4>)
 8005610:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005614:	bf94      	ite	ls
 8005616:	4698      	movls	r8, r3
 8005618:	4680      	movhi	r8, r0
 800561a:	2303      	movs	r3, #3
 800561c:	6123      	str	r3, [r4, #16]
 800561e:	9b05      	ldr	r3, [sp, #20]
 8005620:	f023 0204 	bic.w	r2, r3, #4
 8005624:	6022      	str	r2, [r4, #0]
 8005626:	f04f 0900 	mov.w	r9, #0
 800562a:	9700      	str	r7, [sp, #0]
 800562c:	4633      	mov	r3, r6
 800562e:	aa0b      	add	r2, sp, #44	; 0x2c
 8005630:	4621      	mov	r1, r4
 8005632:	4628      	mov	r0, r5
 8005634:	f000 f9d8 	bl	80059e8 <_printf_common>
 8005638:	3001      	adds	r0, #1
 800563a:	f040 8090 	bne.w	800575e <_printf_float+0x1e2>
 800563e:	f04f 30ff 	mov.w	r0, #4294967295
 8005642:	b00d      	add	sp, #52	; 0x34
 8005644:	ecbd 8b02 	vpop	{d8}
 8005648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800564c:	4642      	mov	r2, r8
 800564e:	464b      	mov	r3, r9
 8005650:	4640      	mov	r0, r8
 8005652:	4649      	mov	r1, r9
 8005654:	f7fb fa72 	bl	8000b3c <__aeabi_dcmpun>
 8005658:	b140      	cbz	r0, 800566c <_printf_float+0xf0>
 800565a:	464b      	mov	r3, r9
 800565c:	2b00      	cmp	r3, #0
 800565e:	bfbc      	itt	lt
 8005660:	232d      	movlt	r3, #45	; 0x2d
 8005662:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005666:	487f      	ldr	r0, [pc, #508]	; (8005864 <_printf_float+0x2e8>)
 8005668:	4b7f      	ldr	r3, [pc, #508]	; (8005868 <_printf_float+0x2ec>)
 800566a:	e7d1      	b.n	8005610 <_printf_float+0x94>
 800566c:	6863      	ldr	r3, [r4, #4]
 800566e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005672:	9206      	str	r2, [sp, #24]
 8005674:	1c5a      	adds	r2, r3, #1
 8005676:	d13f      	bne.n	80056f8 <_printf_float+0x17c>
 8005678:	2306      	movs	r3, #6
 800567a:	6063      	str	r3, [r4, #4]
 800567c:	9b05      	ldr	r3, [sp, #20]
 800567e:	6861      	ldr	r1, [r4, #4]
 8005680:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005684:	2300      	movs	r3, #0
 8005686:	9303      	str	r3, [sp, #12]
 8005688:	ab0a      	add	r3, sp, #40	; 0x28
 800568a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800568e:	ab09      	add	r3, sp, #36	; 0x24
 8005690:	ec49 8b10 	vmov	d0, r8, r9
 8005694:	9300      	str	r3, [sp, #0]
 8005696:	6022      	str	r2, [r4, #0]
 8005698:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800569c:	4628      	mov	r0, r5
 800569e:	f7ff fecd 	bl	800543c <__cvt>
 80056a2:	9b06      	ldr	r3, [sp, #24]
 80056a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80056a6:	2b47      	cmp	r3, #71	; 0x47
 80056a8:	4680      	mov	r8, r0
 80056aa:	d108      	bne.n	80056be <_printf_float+0x142>
 80056ac:	1cc8      	adds	r0, r1, #3
 80056ae:	db02      	blt.n	80056b6 <_printf_float+0x13a>
 80056b0:	6863      	ldr	r3, [r4, #4]
 80056b2:	4299      	cmp	r1, r3
 80056b4:	dd41      	ble.n	800573a <_printf_float+0x1be>
 80056b6:	f1ab 0b02 	sub.w	fp, fp, #2
 80056ba:	fa5f fb8b 	uxtb.w	fp, fp
 80056be:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80056c2:	d820      	bhi.n	8005706 <_printf_float+0x18a>
 80056c4:	3901      	subs	r1, #1
 80056c6:	465a      	mov	r2, fp
 80056c8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80056cc:	9109      	str	r1, [sp, #36]	; 0x24
 80056ce:	f7ff ff17 	bl	8005500 <__exponent>
 80056d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80056d4:	1813      	adds	r3, r2, r0
 80056d6:	2a01      	cmp	r2, #1
 80056d8:	4681      	mov	r9, r0
 80056da:	6123      	str	r3, [r4, #16]
 80056dc:	dc02      	bgt.n	80056e4 <_printf_float+0x168>
 80056de:	6822      	ldr	r2, [r4, #0]
 80056e0:	07d2      	lsls	r2, r2, #31
 80056e2:	d501      	bpl.n	80056e8 <_printf_float+0x16c>
 80056e4:	3301      	adds	r3, #1
 80056e6:	6123      	str	r3, [r4, #16]
 80056e8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d09c      	beq.n	800562a <_printf_float+0xae>
 80056f0:	232d      	movs	r3, #45	; 0x2d
 80056f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056f6:	e798      	b.n	800562a <_printf_float+0xae>
 80056f8:	9a06      	ldr	r2, [sp, #24]
 80056fa:	2a47      	cmp	r2, #71	; 0x47
 80056fc:	d1be      	bne.n	800567c <_printf_float+0x100>
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d1bc      	bne.n	800567c <_printf_float+0x100>
 8005702:	2301      	movs	r3, #1
 8005704:	e7b9      	b.n	800567a <_printf_float+0xfe>
 8005706:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800570a:	d118      	bne.n	800573e <_printf_float+0x1c2>
 800570c:	2900      	cmp	r1, #0
 800570e:	6863      	ldr	r3, [r4, #4]
 8005710:	dd0b      	ble.n	800572a <_printf_float+0x1ae>
 8005712:	6121      	str	r1, [r4, #16]
 8005714:	b913      	cbnz	r3, 800571c <_printf_float+0x1a0>
 8005716:	6822      	ldr	r2, [r4, #0]
 8005718:	07d0      	lsls	r0, r2, #31
 800571a:	d502      	bpl.n	8005722 <_printf_float+0x1a6>
 800571c:	3301      	adds	r3, #1
 800571e:	440b      	add	r3, r1
 8005720:	6123      	str	r3, [r4, #16]
 8005722:	65a1      	str	r1, [r4, #88]	; 0x58
 8005724:	f04f 0900 	mov.w	r9, #0
 8005728:	e7de      	b.n	80056e8 <_printf_float+0x16c>
 800572a:	b913      	cbnz	r3, 8005732 <_printf_float+0x1b6>
 800572c:	6822      	ldr	r2, [r4, #0]
 800572e:	07d2      	lsls	r2, r2, #31
 8005730:	d501      	bpl.n	8005736 <_printf_float+0x1ba>
 8005732:	3302      	adds	r3, #2
 8005734:	e7f4      	b.n	8005720 <_printf_float+0x1a4>
 8005736:	2301      	movs	r3, #1
 8005738:	e7f2      	b.n	8005720 <_printf_float+0x1a4>
 800573a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800573e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005740:	4299      	cmp	r1, r3
 8005742:	db05      	blt.n	8005750 <_printf_float+0x1d4>
 8005744:	6823      	ldr	r3, [r4, #0]
 8005746:	6121      	str	r1, [r4, #16]
 8005748:	07d8      	lsls	r0, r3, #31
 800574a:	d5ea      	bpl.n	8005722 <_printf_float+0x1a6>
 800574c:	1c4b      	adds	r3, r1, #1
 800574e:	e7e7      	b.n	8005720 <_printf_float+0x1a4>
 8005750:	2900      	cmp	r1, #0
 8005752:	bfd4      	ite	le
 8005754:	f1c1 0202 	rsble	r2, r1, #2
 8005758:	2201      	movgt	r2, #1
 800575a:	4413      	add	r3, r2
 800575c:	e7e0      	b.n	8005720 <_printf_float+0x1a4>
 800575e:	6823      	ldr	r3, [r4, #0]
 8005760:	055a      	lsls	r2, r3, #21
 8005762:	d407      	bmi.n	8005774 <_printf_float+0x1f8>
 8005764:	6923      	ldr	r3, [r4, #16]
 8005766:	4642      	mov	r2, r8
 8005768:	4631      	mov	r1, r6
 800576a:	4628      	mov	r0, r5
 800576c:	47b8      	blx	r7
 800576e:	3001      	adds	r0, #1
 8005770:	d12c      	bne.n	80057cc <_printf_float+0x250>
 8005772:	e764      	b.n	800563e <_printf_float+0xc2>
 8005774:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005778:	f240 80e0 	bls.w	800593c <_printf_float+0x3c0>
 800577c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005780:	2200      	movs	r2, #0
 8005782:	2300      	movs	r3, #0
 8005784:	f7fb f9a8 	bl	8000ad8 <__aeabi_dcmpeq>
 8005788:	2800      	cmp	r0, #0
 800578a:	d034      	beq.n	80057f6 <_printf_float+0x27a>
 800578c:	4a37      	ldr	r2, [pc, #220]	; (800586c <_printf_float+0x2f0>)
 800578e:	2301      	movs	r3, #1
 8005790:	4631      	mov	r1, r6
 8005792:	4628      	mov	r0, r5
 8005794:	47b8      	blx	r7
 8005796:	3001      	adds	r0, #1
 8005798:	f43f af51 	beq.w	800563e <_printf_float+0xc2>
 800579c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80057a0:	429a      	cmp	r2, r3
 80057a2:	db02      	blt.n	80057aa <_printf_float+0x22e>
 80057a4:	6823      	ldr	r3, [r4, #0]
 80057a6:	07d8      	lsls	r0, r3, #31
 80057a8:	d510      	bpl.n	80057cc <_printf_float+0x250>
 80057aa:	ee18 3a10 	vmov	r3, s16
 80057ae:	4652      	mov	r2, sl
 80057b0:	4631      	mov	r1, r6
 80057b2:	4628      	mov	r0, r5
 80057b4:	47b8      	blx	r7
 80057b6:	3001      	adds	r0, #1
 80057b8:	f43f af41 	beq.w	800563e <_printf_float+0xc2>
 80057bc:	f04f 0800 	mov.w	r8, #0
 80057c0:	f104 091a 	add.w	r9, r4, #26
 80057c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057c6:	3b01      	subs	r3, #1
 80057c8:	4543      	cmp	r3, r8
 80057ca:	dc09      	bgt.n	80057e0 <_printf_float+0x264>
 80057cc:	6823      	ldr	r3, [r4, #0]
 80057ce:	079b      	lsls	r3, r3, #30
 80057d0:	f100 8105 	bmi.w	80059de <_printf_float+0x462>
 80057d4:	68e0      	ldr	r0, [r4, #12]
 80057d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057d8:	4298      	cmp	r0, r3
 80057da:	bfb8      	it	lt
 80057dc:	4618      	movlt	r0, r3
 80057de:	e730      	b.n	8005642 <_printf_float+0xc6>
 80057e0:	2301      	movs	r3, #1
 80057e2:	464a      	mov	r2, r9
 80057e4:	4631      	mov	r1, r6
 80057e6:	4628      	mov	r0, r5
 80057e8:	47b8      	blx	r7
 80057ea:	3001      	adds	r0, #1
 80057ec:	f43f af27 	beq.w	800563e <_printf_float+0xc2>
 80057f0:	f108 0801 	add.w	r8, r8, #1
 80057f4:	e7e6      	b.n	80057c4 <_printf_float+0x248>
 80057f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	dc39      	bgt.n	8005870 <_printf_float+0x2f4>
 80057fc:	4a1b      	ldr	r2, [pc, #108]	; (800586c <_printf_float+0x2f0>)
 80057fe:	2301      	movs	r3, #1
 8005800:	4631      	mov	r1, r6
 8005802:	4628      	mov	r0, r5
 8005804:	47b8      	blx	r7
 8005806:	3001      	adds	r0, #1
 8005808:	f43f af19 	beq.w	800563e <_printf_float+0xc2>
 800580c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005810:	4313      	orrs	r3, r2
 8005812:	d102      	bne.n	800581a <_printf_float+0x29e>
 8005814:	6823      	ldr	r3, [r4, #0]
 8005816:	07d9      	lsls	r1, r3, #31
 8005818:	d5d8      	bpl.n	80057cc <_printf_float+0x250>
 800581a:	ee18 3a10 	vmov	r3, s16
 800581e:	4652      	mov	r2, sl
 8005820:	4631      	mov	r1, r6
 8005822:	4628      	mov	r0, r5
 8005824:	47b8      	blx	r7
 8005826:	3001      	adds	r0, #1
 8005828:	f43f af09 	beq.w	800563e <_printf_float+0xc2>
 800582c:	f04f 0900 	mov.w	r9, #0
 8005830:	f104 0a1a 	add.w	sl, r4, #26
 8005834:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005836:	425b      	negs	r3, r3
 8005838:	454b      	cmp	r3, r9
 800583a:	dc01      	bgt.n	8005840 <_printf_float+0x2c4>
 800583c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800583e:	e792      	b.n	8005766 <_printf_float+0x1ea>
 8005840:	2301      	movs	r3, #1
 8005842:	4652      	mov	r2, sl
 8005844:	4631      	mov	r1, r6
 8005846:	4628      	mov	r0, r5
 8005848:	47b8      	blx	r7
 800584a:	3001      	adds	r0, #1
 800584c:	f43f aef7 	beq.w	800563e <_printf_float+0xc2>
 8005850:	f109 0901 	add.w	r9, r9, #1
 8005854:	e7ee      	b.n	8005834 <_printf_float+0x2b8>
 8005856:	bf00      	nop
 8005858:	7fefffff 	.word	0x7fefffff
 800585c:	0800a604 	.word	0x0800a604
 8005860:	0800a608 	.word	0x0800a608
 8005864:	0800a610 	.word	0x0800a610
 8005868:	0800a60c 	.word	0x0800a60c
 800586c:	0800aa09 	.word	0x0800aa09
 8005870:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005872:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005874:	429a      	cmp	r2, r3
 8005876:	bfa8      	it	ge
 8005878:	461a      	movge	r2, r3
 800587a:	2a00      	cmp	r2, #0
 800587c:	4691      	mov	r9, r2
 800587e:	dc37      	bgt.n	80058f0 <_printf_float+0x374>
 8005880:	f04f 0b00 	mov.w	fp, #0
 8005884:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005888:	f104 021a 	add.w	r2, r4, #26
 800588c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800588e:	9305      	str	r3, [sp, #20]
 8005890:	eba3 0309 	sub.w	r3, r3, r9
 8005894:	455b      	cmp	r3, fp
 8005896:	dc33      	bgt.n	8005900 <_printf_float+0x384>
 8005898:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800589c:	429a      	cmp	r2, r3
 800589e:	db3b      	blt.n	8005918 <_printf_float+0x39c>
 80058a0:	6823      	ldr	r3, [r4, #0]
 80058a2:	07da      	lsls	r2, r3, #31
 80058a4:	d438      	bmi.n	8005918 <_printf_float+0x39c>
 80058a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058a8:	9a05      	ldr	r2, [sp, #20]
 80058aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80058ac:	1a9a      	subs	r2, r3, r2
 80058ae:	eba3 0901 	sub.w	r9, r3, r1
 80058b2:	4591      	cmp	r9, r2
 80058b4:	bfa8      	it	ge
 80058b6:	4691      	movge	r9, r2
 80058b8:	f1b9 0f00 	cmp.w	r9, #0
 80058bc:	dc35      	bgt.n	800592a <_printf_float+0x3ae>
 80058be:	f04f 0800 	mov.w	r8, #0
 80058c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80058c6:	f104 0a1a 	add.w	sl, r4, #26
 80058ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80058ce:	1a9b      	subs	r3, r3, r2
 80058d0:	eba3 0309 	sub.w	r3, r3, r9
 80058d4:	4543      	cmp	r3, r8
 80058d6:	f77f af79 	ble.w	80057cc <_printf_float+0x250>
 80058da:	2301      	movs	r3, #1
 80058dc:	4652      	mov	r2, sl
 80058de:	4631      	mov	r1, r6
 80058e0:	4628      	mov	r0, r5
 80058e2:	47b8      	blx	r7
 80058e4:	3001      	adds	r0, #1
 80058e6:	f43f aeaa 	beq.w	800563e <_printf_float+0xc2>
 80058ea:	f108 0801 	add.w	r8, r8, #1
 80058ee:	e7ec      	b.n	80058ca <_printf_float+0x34e>
 80058f0:	4613      	mov	r3, r2
 80058f2:	4631      	mov	r1, r6
 80058f4:	4642      	mov	r2, r8
 80058f6:	4628      	mov	r0, r5
 80058f8:	47b8      	blx	r7
 80058fa:	3001      	adds	r0, #1
 80058fc:	d1c0      	bne.n	8005880 <_printf_float+0x304>
 80058fe:	e69e      	b.n	800563e <_printf_float+0xc2>
 8005900:	2301      	movs	r3, #1
 8005902:	4631      	mov	r1, r6
 8005904:	4628      	mov	r0, r5
 8005906:	9205      	str	r2, [sp, #20]
 8005908:	47b8      	blx	r7
 800590a:	3001      	adds	r0, #1
 800590c:	f43f ae97 	beq.w	800563e <_printf_float+0xc2>
 8005910:	9a05      	ldr	r2, [sp, #20]
 8005912:	f10b 0b01 	add.w	fp, fp, #1
 8005916:	e7b9      	b.n	800588c <_printf_float+0x310>
 8005918:	ee18 3a10 	vmov	r3, s16
 800591c:	4652      	mov	r2, sl
 800591e:	4631      	mov	r1, r6
 8005920:	4628      	mov	r0, r5
 8005922:	47b8      	blx	r7
 8005924:	3001      	adds	r0, #1
 8005926:	d1be      	bne.n	80058a6 <_printf_float+0x32a>
 8005928:	e689      	b.n	800563e <_printf_float+0xc2>
 800592a:	9a05      	ldr	r2, [sp, #20]
 800592c:	464b      	mov	r3, r9
 800592e:	4442      	add	r2, r8
 8005930:	4631      	mov	r1, r6
 8005932:	4628      	mov	r0, r5
 8005934:	47b8      	blx	r7
 8005936:	3001      	adds	r0, #1
 8005938:	d1c1      	bne.n	80058be <_printf_float+0x342>
 800593a:	e680      	b.n	800563e <_printf_float+0xc2>
 800593c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800593e:	2a01      	cmp	r2, #1
 8005940:	dc01      	bgt.n	8005946 <_printf_float+0x3ca>
 8005942:	07db      	lsls	r3, r3, #31
 8005944:	d538      	bpl.n	80059b8 <_printf_float+0x43c>
 8005946:	2301      	movs	r3, #1
 8005948:	4642      	mov	r2, r8
 800594a:	4631      	mov	r1, r6
 800594c:	4628      	mov	r0, r5
 800594e:	47b8      	blx	r7
 8005950:	3001      	adds	r0, #1
 8005952:	f43f ae74 	beq.w	800563e <_printf_float+0xc2>
 8005956:	ee18 3a10 	vmov	r3, s16
 800595a:	4652      	mov	r2, sl
 800595c:	4631      	mov	r1, r6
 800595e:	4628      	mov	r0, r5
 8005960:	47b8      	blx	r7
 8005962:	3001      	adds	r0, #1
 8005964:	f43f ae6b 	beq.w	800563e <_printf_float+0xc2>
 8005968:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800596c:	2200      	movs	r2, #0
 800596e:	2300      	movs	r3, #0
 8005970:	f7fb f8b2 	bl	8000ad8 <__aeabi_dcmpeq>
 8005974:	b9d8      	cbnz	r0, 80059ae <_printf_float+0x432>
 8005976:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005978:	f108 0201 	add.w	r2, r8, #1
 800597c:	3b01      	subs	r3, #1
 800597e:	4631      	mov	r1, r6
 8005980:	4628      	mov	r0, r5
 8005982:	47b8      	blx	r7
 8005984:	3001      	adds	r0, #1
 8005986:	d10e      	bne.n	80059a6 <_printf_float+0x42a>
 8005988:	e659      	b.n	800563e <_printf_float+0xc2>
 800598a:	2301      	movs	r3, #1
 800598c:	4652      	mov	r2, sl
 800598e:	4631      	mov	r1, r6
 8005990:	4628      	mov	r0, r5
 8005992:	47b8      	blx	r7
 8005994:	3001      	adds	r0, #1
 8005996:	f43f ae52 	beq.w	800563e <_printf_float+0xc2>
 800599a:	f108 0801 	add.w	r8, r8, #1
 800599e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059a0:	3b01      	subs	r3, #1
 80059a2:	4543      	cmp	r3, r8
 80059a4:	dcf1      	bgt.n	800598a <_printf_float+0x40e>
 80059a6:	464b      	mov	r3, r9
 80059a8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80059ac:	e6dc      	b.n	8005768 <_printf_float+0x1ec>
 80059ae:	f04f 0800 	mov.w	r8, #0
 80059b2:	f104 0a1a 	add.w	sl, r4, #26
 80059b6:	e7f2      	b.n	800599e <_printf_float+0x422>
 80059b8:	2301      	movs	r3, #1
 80059ba:	4642      	mov	r2, r8
 80059bc:	e7df      	b.n	800597e <_printf_float+0x402>
 80059be:	2301      	movs	r3, #1
 80059c0:	464a      	mov	r2, r9
 80059c2:	4631      	mov	r1, r6
 80059c4:	4628      	mov	r0, r5
 80059c6:	47b8      	blx	r7
 80059c8:	3001      	adds	r0, #1
 80059ca:	f43f ae38 	beq.w	800563e <_printf_float+0xc2>
 80059ce:	f108 0801 	add.w	r8, r8, #1
 80059d2:	68e3      	ldr	r3, [r4, #12]
 80059d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80059d6:	1a5b      	subs	r3, r3, r1
 80059d8:	4543      	cmp	r3, r8
 80059da:	dcf0      	bgt.n	80059be <_printf_float+0x442>
 80059dc:	e6fa      	b.n	80057d4 <_printf_float+0x258>
 80059de:	f04f 0800 	mov.w	r8, #0
 80059e2:	f104 0919 	add.w	r9, r4, #25
 80059e6:	e7f4      	b.n	80059d2 <_printf_float+0x456>

080059e8 <_printf_common>:
 80059e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059ec:	4616      	mov	r6, r2
 80059ee:	4699      	mov	r9, r3
 80059f0:	688a      	ldr	r2, [r1, #8]
 80059f2:	690b      	ldr	r3, [r1, #16]
 80059f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80059f8:	4293      	cmp	r3, r2
 80059fa:	bfb8      	it	lt
 80059fc:	4613      	movlt	r3, r2
 80059fe:	6033      	str	r3, [r6, #0]
 8005a00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005a04:	4607      	mov	r7, r0
 8005a06:	460c      	mov	r4, r1
 8005a08:	b10a      	cbz	r2, 8005a0e <_printf_common+0x26>
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	6033      	str	r3, [r6, #0]
 8005a0e:	6823      	ldr	r3, [r4, #0]
 8005a10:	0699      	lsls	r1, r3, #26
 8005a12:	bf42      	ittt	mi
 8005a14:	6833      	ldrmi	r3, [r6, #0]
 8005a16:	3302      	addmi	r3, #2
 8005a18:	6033      	strmi	r3, [r6, #0]
 8005a1a:	6825      	ldr	r5, [r4, #0]
 8005a1c:	f015 0506 	ands.w	r5, r5, #6
 8005a20:	d106      	bne.n	8005a30 <_printf_common+0x48>
 8005a22:	f104 0a19 	add.w	sl, r4, #25
 8005a26:	68e3      	ldr	r3, [r4, #12]
 8005a28:	6832      	ldr	r2, [r6, #0]
 8005a2a:	1a9b      	subs	r3, r3, r2
 8005a2c:	42ab      	cmp	r3, r5
 8005a2e:	dc26      	bgt.n	8005a7e <_printf_common+0x96>
 8005a30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005a34:	1e13      	subs	r3, r2, #0
 8005a36:	6822      	ldr	r2, [r4, #0]
 8005a38:	bf18      	it	ne
 8005a3a:	2301      	movne	r3, #1
 8005a3c:	0692      	lsls	r2, r2, #26
 8005a3e:	d42b      	bmi.n	8005a98 <_printf_common+0xb0>
 8005a40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a44:	4649      	mov	r1, r9
 8005a46:	4638      	mov	r0, r7
 8005a48:	47c0      	blx	r8
 8005a4a:	3001      	adds	r0, #1
 8005a4c:	d01e      	beq.n	8005a8c <_printf_common+0xa4>
 8005a4e:	6823      	ldr	r3, [r4, #0]
 8005a50:	68e5      	ldr	r5, [r4, #12]
 8005a52:	6832      	ldr	r2, [r6, #0]
 8005a54:	f003 0306 	and.w	r3, r3, #6
 8005a58:	2b04      	cmp	r3, #4
 8005a5a:	bf08      	it	eq
 8005a5c:	1aad      	subeq	r5, r5, r2
 8005a5e:	68a3      	ldr	r3, [r4, #8]
 8005a60:	6922      	ldr	r2, [r4, #16]
 8005a62:	bf0c      	ite	eq
 8005a64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a68:	2500      	movne	r5, #0
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	bfc4      	itt	gt
 8005a6e:	1a9b      	subgt	r3, r3, r2
 8005a70:	18ed      	addgt	r5, r5, r3
 8005a72:	2600      	movs	r6, #0
 8005a74:	341a      	adds	r4, #26
 8005a76:	42b5      	cmp	r5, r6
 8005a78:	d11a      	bne.n	8005ab0 <_printf_common+0xc8>
 8005a7a:	2000      	movs	r0, #0
 8005a7c:	e008      	b.n	8005a90 <_printf_common+0xa8>
 8005a7e:	2301      	movs	r3, #1
 8005a80:	4652      	mov	r2, sl
 8005a82:	4649      	mov	r1, r9
 8005a84:	4638      	mov	r0, r7
 8005a86:	47c0      	blx	r8
 8005a88:	3001      	adds	r0, #1
 8005a8a:	d103      	bne.n	8005a94 <_printf_common+0xac>
 8005a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a94:	3501      	adds	r5, #1
 8005a96:	e7c6      	b.n	8005a26 <_printf_common+0x3e>
 8005a98:	18e1      	adds	r1, r4, r3
 8005a9a:	1c5a      	adds	r2, r3, #1
 8005a9c:	2030      	movs	r0, #48	; 0x30
 8005a9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005aa2:	4422      	add	r2, r4
 8005aa4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005aa8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005aac:	3302      	adds	r3, #2
 8005aae:	e7c7      	b.n	8005a40 <_printf_common+0x58>
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	4622      	mov	r2, r4
 8005ab4:	4649      	mov	r1, r9
 8005ab6:	4638      	mov	r0, r7
 8005ab8:	47c0      	blx	r8
 8005aba:	3001      	adds	r0, #1
 8005abc:	d0e6      	beq.n	8005a8c <_printf_common+0xa4>
 8005abe:	3601      	adds	r6, #1
 8005ac0:	e7d9      	b.n	8005a76 <_printf_common+0x8e>
	...

08005ac4 <_printf_i>:
 8005ac4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ac8:	7e0f      	ldrb	r7, [r1, #24]
 8005aca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005acc:	2f78      	cmp	r7, #120	; 0x78
 8005ace:	4691      	mov	r9, r2
 8005ad0:	4680      	mov	r8, r0
 8005ad2:	460c      	mov	r4, r1
 8005ad4:	469a      	mov	sl, r3
 8005ad6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005ada:	d807      	bhi.n	8005aec <_printf_i+0x28>
 8005adc:	2f62      	cmp	r7, #98	; 0x62
 8005ade:	d80a      	bhi.n	8005af6 <_printf_i+0x32>
 8005ae0:	2f00      	cmp	r7, #0
 8005ae2:	f000 80d8 	beq.w	8005c96 <_printf_i+0x1d2>
 8005ae6:	2f58      	cmp	r7, #88	; 0x58
 8005ae8:	f000 80a3 	beq.w	8005c32 <_printf_i+0x16e>
 8005aec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005af0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005af4:	e03a      	b.n	8005b6c <_printf_i+0xa8>
 8005af6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005afa:	2b15      	cmp	r3, #21
 8005afc:	d8f6      	bhi.n	8005aec <_printf_i+0x28>
 8005afe:	a101      	add	r1, pc, #4	; (adr r1, 8005b04 <_printf_i+0x40>)
 8005b00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b04:	08005b5d 	.word	0x08005b5d
 8005b08:	08005b71 	.word	0x08005b71
 8005b0c:	08005aed 	.word	0x08005aed
 8005b10:	08005aed 	.word	0x08005aed
 8005b14:	08005aed 	.word	0x08005aed
 8005b18:	08005aed 	.word	0x08005aed
 8005b1c:	08005b71 	.word	0x08005b71
 8005b20:	08005aed 	.word	0x08005aed
 8005b24:	08005aed 	.word	0x08005aed
 8005b28:	08005aed 	.word	0x08005aed
 8005b2c:	08005aed 	.word	0x08005aed
 8005b30:	08005c7d 	.word	0x08005c7d
 8005b34:	08005ba1 	.word	0x08005ba1
 8005b38:	08005c5f 	.word	0x08005c5f
 8005b3c:	08005aed 	.word	0x08005aed
 8005b40:	08005aed 	.word	0x08005aed
 8005b44:	08005c9f 	.word	0x08005c9f
 8005b48:	08005aed 	.word	0x08005aed
 8005b4c:	08005ba1 	.word	0x08005ba1
 8005b50:	08005aed 	.word	0x08005aed
 8005b54:	08005aed 	.word	0x08005aed
 8005b58:	08005c67 	.word	0x08005c67
 8005b5c:	682b      	ldr	r3, [r5, #0]
 8005b5e:	1d1a      	adds	r2, r3, #4
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	602a      	str	r2, [r5, #0]
 8005b64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e0a3      	b.n	8005cb8 <_printf_i+0x1f4>
 8005b70:	6820      	ldr	r0, [r4, #0]
 8005b72:	6829      	ldr	r1, [r5, #0]
 8005b74:	0606      	lsls	r6, r0, #24
 8005b76:	f101 0304 	add.w	r3, r1, #4
 8005b7a:	d50a      	bpl.n	8005b92 <_printf_i+0xce>
 8005b7c:	680e      	ldr	r6, [r1, #0]
 8005b7e:	602b      	str	r3, [r5, #0]
 8005b80:	2e00      	cmp	r6, #0
 8005b82:	da03      	bge.n	8005b8c <_printf_i+0xc8>
 8005b84:	232d      	movs	r3, #45	; 0x2d
 8005b86:	4276      	negs	r6, r6
 8005b88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b8c:	485e      	ldr	r0, [pc, #376]	; (8005d08 <_printf_i+0x244>)
 8005b8e:	230a      	movs	r3, #10
 8005b90:	e019      	b.n	8005bc6 <_printf_i+0x102>
 8005b92:	680e      	ldr	r6, [r1, #0]
 8005b94:	602b      	str	r3, [r5, #0]
 8005b96:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005b9a:	bf18      	it	ne
 8005b9c:	b236      	sxthne	r6, r6
 8005b9e:	e7ef      	b.n	8005b80 <_printf_i+0xbc>
 8005ba0:	682b      	ldr	r3, [r5, #0]
 8005ba2:	6820      	ldr	r0, [r4, #0]
 8005ba4:	1d19      	adds	r1, r3, #4
 8005ba6:	6029      	str	r1, [r5, #0]
 8005ba8:	0601      	lsls	r1, r0, #24
 8005baa:	d501      	bpl.n	8005bb0 <_printf_i+0xec>
 8005bac:	681e      	ldr	r6, [r3, #0]
 8005bae:	e002      	b.n	8005bb6 <_printf_i+0xf2>
 8005bb0:	0646      	lsls	r6, r0, #25
 8005bb2:	d5fb      	bpl.n	8005bac <_printf_i+0xe8>
 8005bb4:	881e      	ldrh	r6, [r3, #0]
 8005bb6:	4854      	ldr	r0, [pc, #336]	; (8005d08 <_printf_i+0x244>)
 8005bb8:	2f6f      	cmp	r7, #111	; 0x6f
 8005bba:	bf0c      	ite	eq
 8005bbc:	2308      	moveq	r3, #8
 8005bbe:	230a      	movne	r3, #10
 8005bc0:	2100      	movs	r1, #0
 8005bc2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005bc6:	6865      	ldr	r5, [r4, #4]
 8005bc8:	60a5      	str	r5, [r4, #8]
 8005bca:	2d00      	cmp	r5, #0
 8005bcc:	bfa2      	ittt	ge
 8005bce:	6821      	ldrge	r1, [r4, #0]
 8005bd0:	f021 0104 	bicge.w	r1, r1, #4
 8005bd4:	6021      	strge	r1, [r4, #0]
 8005bd6:	b90e      	cbnz	r6, 8005bdc <_printf_i+0x118>
 8005bd8:	2d00      	cmp	r5, #0
 8005bda:	d04d      	beq.n	8005c78 <_printf_i+0x1b4>
 8005bdc:	4615      	mov	r5, r2
 8005bde:	fbb6 f1f3 	udiv	r1, r6, r3
 8005be2:	fb03 6711 	mls	r7, r3, r1, r6
 8005be6:	5dc7      	ldrb	r7, [r0, r7]
 8005be8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005bec:	4637      	mov	r7, r6
 8005bee:	42bb      	cmp	r3, r7
 8005bf0:	460e      	mov	r6, r1
 8005bf2:	d9f4      	bls.n	8005bde <_printf_i+0x11a>
 8005bf4:	2b08      	cmp	r3, #8
 8005bf6:	d10b      	bne.n	8005c10 <_printf_i+0x14c>
 8005bf8:	6823      	ldr	r3, [r4, #0]
 8005bfa:	07de      	lsls	r6, r3, #31
 8005bfc:	d508      	bpl.n	8005c10 <_printf_i+0x14c>
 8005bfe:	6923      	ldr	r3, [r4, #16]
 8005c00:	6861      	ldr	r1, [r4, #4]
 8005c02:	4299      	cmp	r1, r3
 8005c04:	bfde      	ittt	le
 8005c06:	2330      	movle	r3, #48	; 0x30
 8005c08:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005c0c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005c10:	1b52      	subs	r2, r2, r5
 8005c12:	6122      	str	r2, [r4, #16]
 8005c14:	f8cd a000 	str.w	sl, [sp]
 8005c18:	464b      	mov	r3, r9
 8005c1a:	aa03      	add	r2, sp, #12
 8005c1c:	4621      	mov	r1, r4
 8005c1e:	4640      	mov	r0, r8
 8005c20:	f7ff fee2 	bl	80059e8 <_printf_common>
 8005c24:	3001      	adds	r0, #1
 8005c26:	d14c      	bne.n	8005cc2 <_printf_i+0x1fe>
 8005c28:	f04f 30ff 	mov.w	r0, #4294967295
 8005c2c:	b004      	add	sp, #16
 8005c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c32:	4835      	ldr	r0, [pc, #212]	; (8005d08 <_printf_i+0x244>)
 8005c34:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005c38:	6829      	ldr	r1, [r5, #0]
 8005c3a:	6823      	ldr	r3, [r4, #0]
 8005c3c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005c40:	6029      	str	r1, [r5, #0]
 8005c42:	061d      	lsls	r5, r3, #24
 8005c44:	d514      	bpl.n	8005c70 <_printf_i+0x1ac>
 8005c46:	07df      	lsls	r7, r3, #31
 8005c48:	bf44      	itt	mi
 8005c4a:	f043 0320 	orrmi.w	r3, r3, #32
 8005c4e:	6023      	strmi	r3, [r4, #0]
 8005c50:	b91e      	cbnz	r6, 8005c5a <_printf_i+0x196>
 8005c52:	6823      	ldr	r3, [r4, #0]
 8005c54:	f023 0320 	bic.w	r3, r3, #32
 8005c58:	6023      	str	r3, [r4, #0]
 8005c5a:	2310      	movs	r3, #16
 8005c5c:	e7b0      	b.n	8005bc0 <_printf_i+0xfc>
 8005c5e:	6823      	ldr	r3, [r4, #0]
 8005c60:	f043 0320 	orr.w	r3, r3, #32
 8005c64:	6023      	str	r3, [r4, #0]
 8005c66:	2378      	movs	r3, #120	; 0x78
 8005c68:	4828      	ldr	r0, [pc, #160]	; (8005d0c <_printf_i+0x248>)
 8005c6a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005c6e:	e7e3      	b.n	8005c38 <_printf_i+0x174>
 8005c70:	0659      	lsls	r1, r3, #25
 8005c72:	bf48      	it	mi
 8005c74:	b2b6      	uxthmi	r6, r6
 8005c76:	e7e6      	b.n	8005c46 <_printf_i+0x182>
 8005c78:	4615      	mov	r5, r2
 8005c7a:	e7bb      	b.n	8005bf4 <_printf_i+0x130>
 8005c7c:	682b      	ldr	r3, [r5, #0]
 8005c7e:	6826      	ldr	r6, [r4, #0]
 8005c80:	6961      	ldr	r1, [r4, #20]
 8005c82:	1d18      	adds	r0, r3, #4
 8005c84:	6028      	str	r0, [r5, #0]
 8005c86:	0635      	lsls	r5, r6, #24
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	d501      	bpl.n	8005c90 <_printf_i+0x1cc>
 8005c8c:	6019      	str	r1, [r3, #0]
 8005c8e:	e002      	b.n	8005c96 <_printf_i+0x1d2>
 8005c90:	0670      	lsls	r0, r6, #25
 8005c92:	d5fb      	bpl.n	8005c8c <_printf_i+0x1c8>
 8005c94:	8019      	strh	r1, [r3, #0]
 8005c96:	2300      	movs	r3, #0
 8005c98:	6123      	str	r3, [r4, #16]
 8005c9a:	4615      	mov	r5, r2
 8005c9c:	e7ba      	b.n	8005c14 <_printf_i+0x150>
 8005c9e:	682b      	ldr	r3, [r5, #0]
 8005ca0:	1d1a      	adds	r2, r3, #4
 8005ca2:	602a      	str	r2, [r5, #0]
 8005ca4:	681d      	ldr	r5, [r3, #0]
 8005ca6:	6862      	ldr	r2, [r4, #4]
 8005ca8:	2100      	movs	r1, #0
 8005caa:	4628      	mov	r0, r5
 8005cac:	f7fa faa0 	bl	80001f0 <memchr>
 8005cb0:	b108      	cbz	r0, 8005cb6 <_printf_i+0x1f2>
 8005cb2:	1b40      	subs	r0, r0, r5
 8005cb4:	6060      	str	r0, [r4, #4]
 8005cb6:	6863      	ldr	r3, [r4, #4]
 8005cb8:	6123      	str	r3, [r4, #16]
 8005cba:	2300      	movs	r3, #0
 8005cbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cc0:	e7a8      	b.n	8005c14 <_printf_i+0x150>
 8005cc2:	6923      	ldr	r3, [r4, #16]
 8005cc4:	462a      	mov	r2, r5
 8005cc6:	4649      	mov	r1, r9
 8005cc8:	4640      	mov	r0, r8
 8005cca:	47d0      	blx	sl
 8005ccc:	3001      	adds	r0, #1
 8005cce:	d0ab      	beq.n	8005c28 <_printf_i+0x164>
 8005cd0:	6823      	ldr	r3, [r4, #0]
 8005cd2:	079b      	lsls	r3, r3, #30
 8005cd4:	d413      	bmi.n	8005cfe <_printf_i+0x23a>
 8005cd6:	68e0      	ldr	r0, [r4, #12]
 8005cd8:	9b03      	ldr	r3, [sp, #12]
 8005cda:	4298      	cmp	r0, r3
 8005cdc:	bfb8      	it	lt
 8005cde:	4618      	movlt	r0, r3
 8005ce0:	e7a4      	b.n	8005c2c <_printf_i+0x168>
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	4632      	mov	r2, r6
 8005ce6:	4649      	mov	r1, r9
 8005ce8:	4640      	mov	r0, r8
 8005cea:	47d0      	blx	sl
 8005cec:	3001      	adds	r0, #1
 8005cee:	d09b      	beq.n	8005c28 <_printf_i+0x164>
 8005cf0:	3501      	adds	r5, #1
 8005cf2:	68e3      	ldr	r3, [r4, #12]
 8005cf4:	9903      	ldr	r1, [sp, #12]
 8005cf6:	1a5b      	subs	r3, r3, r1
 8005cf8:	42ab      	cmp	r3, r5
 8005cfa:	dcf2      	bgt.n	8005ce2 <_printf_i+0x21e>
 8005cfc:	e7eb      	b.n	8005cd6 <_printf_i+0x212>
 8005cfe:	2500      	movs	r5, #0
 8005d00:	f104 0619 	add.w	r6, r4, #25
 8005d04:	e7f5      	b.n	8005cf2 <_printf_i+0x22e>
 8005d06:	bf00      	nop
 8005d08:	0800a614 	.word	0x0800a614
 8005d0c:	0800a625 	.word	0x0800a625

08005d10 <_scanf_float>:
 8005d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d14:	b087      	sub	sp, #28
 8005d16:	4617      	mov	r7, r2
 8005d18:	9303      	str	r3, [sp, #12]
 8005d1a:	688b      	ldr	r3, [r1, #8]
 8005d1c:	1e5a      	subs	r2, r3, #1
 8005d1e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005d22:	bf83      	ittte	hi
 8005d24:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005d28:	195b      	addhi	r3, r3, r5
 8005d2a:	9302      	strhi	r3, [sp, #8]
 8005d2c:	2300      	movls	r3, #0
 8005d2e:	bf86      	itte	hi
 8005d30:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005d34:	608b      	strhi	r3, [r1, #8]
 8005d36:	9302      	strls	r3, [sp, #8]
 8005d38:	680b      	ldr	r3, [r1, #0]
 8005d3a:	468b      	mov	fp, r1
 8005d3c:	2500      	movs	r5, #0
 8005d3e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005d42:	f84b 3b1c 	str.w	r3, [fp], #28
 8005d46:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005d4a:	4680      	mov	r8, r0
 8005d4c:	460c      	mov	r4, r1
 8005d4e:	465e      	mov	r6, fp
 8005d50:	46aa      	mov	sl, r5
 8005d52:	46a9      	mov	r9, r5
 8005d54:	9501      	str	r5, [sp, #4]
 8005d56:	68a2      	ldr	r2, [r4, #8]
 8005d58:	b152      	cbz	r2, 8005d70 <_scanf_float+0x60>
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	781b      	ldrb	r3, [r3, #0]
 8005d5e:	2b4e      	cmp	r3, #78	; 0x4e
 8005d60:	d864      	bhi.n	8005e2c <_scanf_float+0x11c>
 8005d62:	2b40      	cmp	r3, #64	; 0x40
 8005d64:	d83c      	bhi.n	8005de0 <_scanf_float+0xd0>
 8005d66:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005d6a:	b2c8      	uxtb	r0, r1
 8005d6c:	280e      	cmp	r0, #14
 8005d6e:	d93a      	bls.n	8005de6 <_scanf_float+0xd6>
 8005d70:	f1b9 0f00 	cmp.w	r9, #0
 8005d74:	d003      	beq.n	8005d7e <_scanf_float+0x6e>
 8005d76:	6823      	ldr	r3, [r4, #0]
 8005d78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d7c:	6023      	str	r3, [r4, #0]
 8005d7e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005d82:	f1ba 0f01 	cmp.w	sl, #1
 8005d86:	f200 8113 	bhi.w	8005fb0 <_scanf_float+0x2a0>
 8005d8a:	455e      	cmp	r6, fp
 8005d8c:	f200 8105 	bhi.w	8005f9a <_scanf_float+0x28a>
 8005d90:	2501      	movs	r5, #1
 8005d92:	4628      	mov	r0, r5
 8005d94:	b007      	add	sp, #28
 8005d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d9a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005d9e:	2a0d      	cmp	r2, #13
 8005da0:	d8e6      	bhi.n	8005d70 <_scanf_float+0x60>
 8005da2:	a101      	add	r1, pc, #4	; (adr r1, 8005da8 <_scanf_float+0x98>)
 8005da4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005da8:	08005ee7 	.word	0x08005ee7
 8005dac:	08005d71 	.word	0x08005d71
 8005db0:	08005d71 	.word	0x08005d71
 8005db4:	08005d71 	.word	0x08005d71
 8005db8:	08005f47 	.word	0x08005f47
 8005dbc:	08005f1f 	.word	0x08005f1f
 8005dc0:	08005d71 	.word	0x08005d71
 8005dc4:	08005d71 	.word	0x08005d71
 8005dc8:	08005ef5 	.word	0x08005ef5
 8005dcc:	08005d71 	.word	0x08005d71
 8005dd0:	08005d71 	.word	0x08005d71
 8005dd4:	08005d71 	.word	0x08005d71
 8005dd8:	08005d71 	.word	0x08005d71
 8005ddc:	08005ead 	.word	0x08005ead
 8005de0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005de4:	e7db      	b.n	8005d9e <_scanf_float+0x8e>
 8005de6:	290e      	cmp	r1, #14
 8005de8:	d8c2      	bhi.n	8005d70 <_scanf_float+0x60>
 8005dea:	a001      	add	r0, pc, #4	; (adr r0, 8005df0 <_scanf_float+0xe0>)
 8005dec:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005df0:	08005e9f 	.word	0x08005e9f
 8005df4:	08005d71 	.word	0x08005d71
 8005df8:	08005e9f 	.word	0x08005e9f
 8005dfc:	08005f33 	.word	0x08005f33
 8005e00:	08005d71 	.word	0x08005d71
 8005e04:	08005e4d 	.word	0x08005e4d
 8005e08:	08005e89 	.word	0x08005e89
 8005e0c:	08005e89 	.word	0x08005e89
 8005e10:	08005e89 	.word	0x08005e89
 8005e14:	08005e89 	.word	0x08005e89
 8005e18:	08005e89 	.word	0x08005e89
 8005e1c:	08005e89 	.word	0x08005e89
 8005e20:	08005e89 	.word	0x08005e89
 8005e24:	08005e89 	.word	0x08005e89
 8005e28:	08005e89 	.word	0x08005e89
 8005e2c:	2b6e      	cmp	r3, #110	; 0x6e
 8005e2e:	d809      	bhi.n	8005e44 <_scanf_float+0x134>
 8005e30:	2b60      	cmp	r3, #96	; 0x60
 8005e32:	d8b2      	bhi.n	8005d9a <_scanf_float+0x8a>
 8005e34:	2b54      	cmp	r3, #84	; 0x54
 8005e36:	d077      	beq.n	8005f28 <_scanf_float+0x218>
 8005e38:	2b59      	cmp	r3, #89	; 0x59
 8005e3a:	d199      	bne.n	8005d70 <_scanf_float+0x60>
 8005e3c:	2d07      	cmp	r5, #7
 8005e3e:	d197      	bne.n	8005d70 <_scanf_float+0x60>
 8005e40:	2508      	movs	r5, #8
 8005e42:	e029      	b.n	8005e98 <_scanf_float+0x188>
 8005e44:	2b74      	cmp	r3, #116	; 0x74
 8005e46:	d06f      	beq.n	8005f28 <_scanf_float+0x218>
 8005e48:	2b79      	cmp	r3, #121	; 0x79
 8005e4a:	e7f6      	b.n	8005e3a <_scanf_float+0x12a>
 8005e4c:	6821      	ldr	r1, [r4, #0]
 8005e4e:	05c8      	lsls	r0, r1, #23
 8005e50:	d51a      	bpl.n	8005e88 <_scanf_float+0x178>
 8005e52:	9b02      	ldr	r3, [sp, #8]
 8005e54:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005e58:	6021      	str	r1, [r4, #0]
 8005e5a:	f109 0901 	add.w	r9, r9, #1
 8005e5e:	b11b      	cbz	r3, 8005e68 <_scanf_float+0x158>
 8005e60:	3b01      	subs	r3, #1
 8005e62:	3201      	adds	r2, #1
 8005e64:	9302      	str	r3, [sp, #8]
 8005e66:	60a2      	str	r2, [r4, #8]
 8005e68:	68a3      	ldr	r3, [r4, #8]
 8005e6a:	3b01      	subs	r3, #1
 8005e6c:	60a3      	str	r3, [r4, #8]
 8005e6e:	6923      	ldr	r3, [r4, #16]
 8005e70:	3301      	adds	r3, #1
 8005e72:	6123      	str	r3, [r4, #16]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	3b01      	subs	r3, #1
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	607b      	str	r3, [r7, #4]
 8005e7c:	f340 8084 	ble.w	8005f88 <_scanf_float+0x278>
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	3301      	adds	r3, #1
 8005e84:	603b      	str	r3, [r7, #0]
 8005e86:	e766      	b.n	8005d56 <_scanf_float+0x46>
 8005e88:	eb1a 0f05 	cmn.w	sl, r5
 8005e8c:	f47f af70 	bne.w	8005d70 <_scanf_float+0x60>
 8005e90:	6822      	ldr	r2, [r4, #0]
 8005e92:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005e96:	6022      	str	r2, [r4, #0]
 8005e98:	f806 3b01 	strb.w	r3, [r6], #1
 8005e9c:	e7e4      	b.n	8005e68 <_scanf_float+0x158>
 8005e9e:	6822      	ldr	r2, [r4, #0]
 8005ea0:	0610      	lsls	r0, r2, #24
 8005ea2:	f57f af65 	bpl.w	8005d70 <_scanf_float+0x60>
 8005ea6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005eaa:	e7f4      	b.n	8005e96 <_scanf_float+0x186>
 8005eac:	f1ba 0f00 	cmp.w	sl, #0
 8005eb0:	d10e      	bne.n	8005ed0 <_scanf_float+0x1c0>
 8005eb2:	f1b9 0f00 	cmp.w	r9, #0
 8005eb6:	d10e      	bne.n	8005ed6 <_scanf_float+0x1c6>
 8005eb8:	6822      	ldr	r2, [r4, #0]
 8005eba:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005ebe:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005ec2:	d108      	bne.n	8005ed6 <_scanf_float+0x1c6>
 8005ec4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005ec8:	6022      	str	r2, [r4, #0]
 8005eca:	f04f 0a01 	mov.w	sl, #1
 8005ece:	e7e3      	b.n	8005e98 <_scanf_float+0x188>
 8005ed0:	f1ba 0f02 	cmp.w	sl, #2
 8005ed4:	d055      	beq.n	8005f82 <_scanf_float+0x272>
 8005ed6:	2d01      	cmp	r5, #1
 8005ed8:	d002      	beq.n	8005ee0 <_scanf_float+0x1d0>
 8005eda:	2d04      	cmp	r5, #4
 8005edc:	f47f af48 	bne.w	8005d70 <_scanf_float+0x60>
 8005ee0:	3501      	adds	r5, #1
 8005ee2:	b2ed      	uxtb	r5, r5
 8005ee4:	e7d8      	b.n	8005e98 <_scanf_float+0x188>
 8005ee6:	f1ba 0f01 	cmp.w	sl, #1
 8005eea:	f47f af41 	bne.w	8005d70 <_scanf_float+0x60>
 8005eee:	f04f 0a02 	mov.w	sl, #2
 8005ef2:	e7d1      	b.n	8005e98 <_scanf_float+0x188>
 8005ef4:	b97d      	cbnz	r5, 8005f16 <_scanf_float+0x206>
 8005ef6:	f1b9 0f00 	cmp.w	r9, #0
 8005efa:	f47f af3c 	bne.w	8005d76 <_scanf_float+0x66>
 8005efe:	6822      	ldr	r2, [r4, #0]
 8005f00:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005f04:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005f08:	f47f af39 	bne.w	8005d7e <_scanf_float+0x6e>
 8005f0c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005f10:	6022      	str	r2, [r4, #0]
 8005f12:	2501      	movs	r5, #1
 8005f14:	e7c0      	b.n	8005e98 <_scanf_float+0x188>
 8005f16:	2d03      	cmp	r5, #3
 8005f18:	d0e2      	beq.n	8005ee0 <_scanf_float+0x1d0>
 8005f1a:	2d05      	cmp	r5, #5
 8005f1c:	e7de      	b.n	8005edc <_scanf_float+0x1cc>
 8005f1e:	2d02      	cmp	r5, #2
 8005f20:	f47f af26 	bne.w	8005d70 <_scanf_float+0x60>
 8005f24:	2503      	movs	r5, #3
 8005f26:	e7b7      	b.n	8005e98 <_scanf_float+0x188>
 8005f28:	2d06      	cmp	r5, #6
 8005f2a:	f47f af21 	bne.w	8005d70 <_scanf_float+0x60>
 8005f2e:	2507      	movs	r5, #7
 8005f30:	e7b2      	b.n	8005e98 <_scanf_float+0x188>
 8005f32:	6822      	ldr	r2, [r4, #0]
 8005f34:	0591      	lsls	r1, r2, #22
 8005f36:	f57f af1b 	bpl.w	8005d70 <_scanf_float+0x60>
 8005f3a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005f3e:	6022      	str	r2, [r4, #0]
 8005f40:	f8cd 9004 	str.w	r9, [sp, #4]
 8005f44:	e7a8      	b.n	8005e98 <_scanf_float+0x188>
 8005f46:	6822      	ldr	r2, [r4, #0]
 8005f48:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005f4c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005f50:	d006      	beq.n	8005f60 <_scanf_float+0x250>
 8005f52:	0550      	lsls	r0, r2, #21
 8005f54:	f57f af0c 	bpl.w	8005d70 <_scanf_float+0x60>
 8005f58:	f1b9 0f00 	cmp.w	r9, #0
 8005f5c:	f43f af0f 	beq.w	8005d7e <_scanf_float+0x6e>
 8005f60:	0591      	lsls	r1, r2, #22
 8005f62:	bf58      	it	pl
 8005f64:	9901      	ldrpl	r1, [sp, #4]
 8005f66:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005f6a:	bf58      	it	pl
 8005f6c:	eba9 0101 	subpl.w	r1, r9, r1
 8005f70:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005f74:	bf58      	it	pl
 8005f76:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005f7a:	6022      	str	r2, [r4, #0]
 8005f7c:	f04f 0900 	mov.w	r9, #0
 8005f80:	e78a      	b.n	8005e98 <_scanf_float+0x188>
 8005f82:	f04f 0a03 	mov.w	sl, #3
 8005f86:	e787      	b.n	8005e98 <_scanf_float+0x188>
 8005f88:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005f8c:	4639      	mov	r1, r7
 8005f8e:	4640      	mov	r0, r8
 8005f90:	4798      	blx	r3
 8005f92:	2800      	cmp	r0, #0
 8005f94:	f43f aedf 	beq.w	8005d56 <_scanf_float+0x46>
 8005f98:	e6ea      	b.n	8005d70 <_scanf_float+0x60>
 8005f9a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005f9e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005fa2:	463a      	mov	r2, r7
 8005fa4:	4640      	mov	r0, r8
 8005fa6:	4798      	blx	r3
 8005fa8:	6923      	ldr	r3, [r4, #16]
 8005faa:	3b01      	subs	r3, #1
 8005fac:	6123      	str	r3, [r4, #16]
 8005fae:	e6ec      	b.n	8005d8a <_scanf_float+0x7a>
 8005fb0:	1e6b      	subs	r3, r5, #1
 8005fb2:	2b06      	cmp	r3, #6
 8005fb4:	d825      	bhi.n	8006002 <_scanf_float+0x2f2>
 8005fb6:	2d02      	cmp	r5, #2
 8005fb8:	d836      	bhi.n	8006028 <_scanf_float+0x318>
 8005fba:	455e      	cmp	r6, fp
 8005fbc:	f67f aee8 	bls.w	8005d90 <_scanf_float+0x80>
 8005fc0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005fc4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005fc8:	463a      	mov	r2, r7
 8005fca:	4640      	mov	r0, r8
 8005fcc:	4798      	blx	r3
 8005fce:	6923      	ldr	r3, [r4, #16]
 8005fd0:	3b01      	subs	r3, #1
 8005fd2:	6123      	str	r3, [r4, #16]
 8005fd4:	e7f1      	b.n	8005fba <_scanf_float+0x2aa>
 8005fd6:	9802      	ldr	r0, [sp, #8]
 8005fd8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005fdc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005fe0:	9002      	str	r0, [sp, #8]
 8005fe2:	463a      	mov	r2, r7
 8005fe4:	4640      	mov	r0, r8
 8005fe6:	4798      	blx	r3
 8005fe8:	6923      	ldr	r3, [r4, #16]
 8005fea:	3b01      	subs	r3, #1
 8005fec:	6123      	str	r3, [r4, #16]
 8005fee:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005ff2:	fa5f fa8a 	uxtb.w	sl, sl
 8005ff6:	f1ba 0f02 	cmp.w	sl, #2
 8005ffa:	d1ec      	bne.n	8005fd6 <_scanf_float+0x2c6>
 8005ffc:	3d03      	subs	r5, #3
 8005ffe:	b2ed      	uxtb	r5, r5
 8006000:	1b76      	subs	r6, r6, r5
 8006002:	6823      	ldr	r3, [r4, #0]
 8006004:	05da      	lsls	r2, r3, #23
 8006006:	d52f      	bpl.n	8006068 <_scanf_float+0x358>
 8006008:	055b      	lsls	r3, r3, #21
 800600a:	d510      	bpl.n	800602e <_scanf_float+0x31e>
 800600c:	455e      	cmp	r6, fp
 800600e:	f67f aebf 	bls.w	8005d90 <_scanf_float+0x80>
 8006012:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006016:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800601a:	463a      	mov	r2, r7
 800601c:	4640      	mov	r0, r8
 800601e:	4798      	blx	r3
 8006020:	6923      	ldr	r3, [r4, #16]
 8006022:	3b01      	subs	r3, #1
 8006024:	6123      	str	r3, [r4, #16]
 8006026:	e7f1      	b.n	800600c <_scanf_float+0x2fc>
 8006028:	46aa      	mov	sl, r5
 800602a:	9602      	str	r6, [sp, #8]
 800602c:	e7df      	b.n	8005fee <_scanf_float+0x2de>
 800602e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006032:	6923      	ldr	r3, [r4, #16]
 8006034:	2965      	cmp	r1, #101	; 0x65
 8006036:	f103 33ff 	add.w	r3, r3, #4294967295
 800603a:	f106 35ff 	add.w	r5, r6, #4294967295
 800603e:	6123      	str	r3, [r4, #16]
 8006040:	d00c      	beq.n	800605c <_scanf_float+0x34c>
 8006042:	2945      	cmp	r1, #69	; 0x45
 8006044:	d00a      	beq.n	800605c <_scanf_float+0x34c>
 8006046:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800604a:	463a      	mov	r2, r7
 800604c:	4640      	mov	r0, r8
 800604e:	4798      	blx	r3
 8006050:	6923      	ldr	r3, [r4, #16]
 8006052:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006056:	3b01      	subs	r3, #1
 8006058:	1eb5      	subs	r5, r6, #2
 800605a:	6123      	str	r3, [r4, #16]
 800605c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006060:	463a      	mov	r2, r7
 8006062:	4640      	mov	r0, r8
 8006064:	4798      	blx	r3
 8006066:	462e      	mov	r6, r5
 8006068:	6825      	ldr	r5, [r4, #0]
 800606a:	f015 0510 	ands.w	r5, r5, #16
 800606e:	d159      	bne.n	8006124 <_scanf_float+0x414>
 8006070:	7035      	strb	r5, [r6, #0]
 8006072:	6823      	ldr	r3, [r4, #0]
 8006074:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006078:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800607c:	d11b      	bne.n	80060b6 <_scanf_float+0x3a6>
 800607e:	9b01      	ldr	r3, [sp, #4]
 8006080:	454b      	cmp	r3, r9
 8006082:	eba3 0209 	sub.w	r2, r3, r9
 8006086:	d123      	bne.n	80060d0 <_scanf_float+0x3c0>
 8006088:	2200      	movs	r2, #0
 800608a:	4659      	mov	r1, fp
 800608c:	4640      	mov	r0, r8
 800608e:	f000 ff09 	bl	8006ea4 <_strtod_r>
 8006092:	6822      	ldr	r2, [r4, #0]
 8006094:	9b03      	ldr	r3, [sp, #12]
 8006096:	f012 0f02 	tst.w	r2, #2
 800609a:	ec57 6b10 	vmov	r6, r7, d0
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	d021      	beq.n	80060e6 <_scanf_float+0x3d6>
 80060a2:	9903      	ldr	r1, [sp, #12]
 80060a4:	1d1a      	adds	r2, r3, #4
 80060a6:	600a      	str	r2, [r1, #0]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	e9c3 6700 	strd	r6, r7, [r3]
 80060ae:	68e3      	ldr	r3, [r4, #12]
 80060b0:	3301      	adds	r3, #1
 80060b2:	60e3      	str	r3, [r4, #12]
 80060b4:	e66d      	b.n	8005d92 <_scanf_float+0x82>
 80060b6:	9b04      	ldr	r3, [sp, #16]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d0e5      	beq.n	8006088 <_scanf_float+0x378>
 80060bc:	9905      	ldr	r1, [sp, #20]
 80060be:	230a      	movs	r3, #10
 80060c0:	462a      	mov	r2, r5
 80060c2:	3101      	adds	r1, #1
 80060c4:	4640      	mov	r0, r8
 80060c6:	f000 ff75 	bl	8006fb4 <_strtol_r>
 80060ca:	9b04      	ldr	r3, [sp, #16]
 80060cc:	9e05      	ldr	r6, [sp, #20]
 80060ce:	1ac2      	subs	r2, r0, r3
 80060d0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80060d4:	429e      	cmp	r6, r3
 80060d6:	bf28      	it	cs
 80060d8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80060dc:	4912      	ldr	r1, [pc, #72]	; (8006128 <_scanf_float+0x418>)
 80060de:	4630      	mov	r0, r6
 80060e0:	f000 f82c 	bl	800613c <siprintf>
 80060e4:	e7d0      	b.n	8006088 <_scanf_float+0x378>
 80060e6:	9903      	ldr	r1, [sp, #12]
 80060e8:	f012 0f04 	tst.w	r2, #4
 80060ec:	f103 0204 	add.w	r2, r3, #4
 80060f0:	600a      	str	r2, [r1, #0]
 80060f2:	d1d9      	bne.n	80060a8 <_scanf_float+0x398>
 80060f4:	f8d3 8000 	ldr.w	r8, [r3]
 80060f8:	ee10 2a10 	vmov	r2, s0
 80060fc:	ee10 0a10 	vmov	r0, s0
 8006100:	463b      	mov	r3, r7
 8006102:	4639      	mov	r1, r7
 8006104:	f7fa fd1a 	bl	8000b3c <__aeabi_dcmpun>
 8006108:	b128      	cbz	r0, 8006116 <_scanf_float+0x406>
 800610a:	4808      	ldr	r0, [pc, #32]	; (800612c <_scanf_float+0x41c>)
 800610c:	f000 f810 	bl	8006130 <nanf>
 8006110:	ed88 0a00 	vstr	s0, [r8]
 8006114:	e7cb      	b.n	80060ae <_scanf_float+0x39e>
 8006116:	4630      	mov	r0, r6
 8006118:	4639      	mov	r1, r7
 800611a:	f7fa fd6d 	bl	8000bf8 <__aeabi_d2f>
 800611e:	f8c8 0000 	str.w	r0, [r8]
 8006122:	e7c4      	b.n	80060ae <_scanf_float+0x39e>
 8006124:	2500      	movs	r5, #0
 8006126:	e634      	b.n	8005d92 <_scanf_float+0x82>
 8006128:	0800a636 	.word	0x0800a636
 800612c:	0800aa5b 	.word	0x0800aa5b

08006130 <nanf>:
 8006130:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006138 <nanf+0x8>
 8006134:	4770      	bx	lr
 8006136:	bf00      	nop
 8006138:	7fc00000 	.word	0x7fc00000

0800613c <siprintf>:
 800613c:	b40e      	push	{r1, r2, r3}
 800613e:	b500      	push	{lr}
 8006140:	b09c      	sub	sp, #112	; 0x70
 8006142:	ab1d      	add	r3, sp, #116	; 0x74
 8006144:	9002      	str	r0, [sp, #8]
 8006146:	9006      	str	r0, [sp, #24]
 8006148:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800614c:	4809      	ldr	r0, [pc, #36]	; (8006174 <siprintf+0x38>)
 800614e:	9107      	str	r1, [sp, #28]
 8006150:	9104      	str	r1, [sp, #16]
 8006152:	4909      	ldr	r1, [pc, #36]	; (8006178 <siprintf+0x3c>)
 8006154:	f853 2b04 	ldr.w	r2, [r3], #4
 8006158:	9105      	str	r1, [sp, #20]
 800615a:	6800      	ldr	r0, [r0, #0]
 800615c:	9301      	str	r3, [sp, #4]
 800615e:	a902      	add	r1, sp, #8
 8006160:	f002 ff8a 	bl	8009078 <_svfiprintf_r>
 8006164:	9b02      	ldr	r3, [sp, #8]
 8006166:	2200      	movs	r2, #0
 8006168:	701a      	strb	r2, [r3, #0]
 800616a:	b01c      	add	sp, #112	; 0x70
 800616c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006170:	b003      	add	sp, #12
 8006172:	4770      	bx	lr
 8006174:	20000018 	.word	0x20000018
 8006178:	ffff0208 	.word	0xffff0208

0800617c <siscanf>:
 800617c:	b40e      	push	{r1, r2, r3}
 800617e:	b510      	push	{r4, lr}
 8006180:	b09f      	sub	sp, #124	; 0x7c
 8006182:	ac21      	add	r4, sp, #132	; 0x84
 8006184:	f44f 7101 	mov.w	r1, #516	; 0x204
 8006188:	f854 2b04 	ldr.w	r2, [r4], #4
 800618c:	9201      	str	r2, [sp, #4]
 800618e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8006192:	9004      	str	r0, [sp, #16]
 8006194:	9008      	str	r0, [sp, #32]
 8006196:	f7fa f823 	bl	80001e0 <strlen>
 800619a:	4b0c      	ldr	r3, [pc, #48]	; (80061cc <siscanf+0x50>)
 800619c:	9005      	str	r0, [sp, #20]
 800619e:	9009      	str	r0, [sp, #36]	; 0x24
 80061a0:	930d      	str	r3, [sp, #52]	; 0x34
 80061a2:	480b      	ldr	r0, [pc, #44]	; (80061d0 <siscanf+0x54>)
 80061a4:	9a01      	ldr	r2, [sp, #4]
 80061a6:	6800      	ldr	r0, [r0, #0]
 80061a8:	9403      	str	r4, [sp, #12]
 80061aa:	2300      	movs	r3, #0
 80061ac:	9311      	str	r3, [sp, #68]	; 0x44
 80061ae:	9316      	str	r3, [sp, #88]	; 0x58
 80061b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80061b4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80061b8:	a904      	add	r1, sp, #16
 80061ba:	4623      	mov	r3, r4
 80061bc:	f003 f8b6 	bl	800932c <__ssvfiscanf_r>
 80061c0:	b01f      	add	sp, #124	; 0x7c
 80061c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061c6:	b003      	add	sp, #12
 80061c8:	4770      	bx	lr
 80061ca:	bf00      	nop
 80061cc:	080061f7 	.word	0x080061f7
 80061d0:	20000018 	.word	0x20000018

080061d4 <__sread>:
 80061d4:	b510      	push	{r4, lr}
 80061d6:	460c      	mov	r4, r1
 80061d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061dc:	f003 fb70 	bl	80098c0 <_read_r>
 80061e0:	2800      	cmp	r0, #0
 80061e2:	bfab      	itete	ge
 80061e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80061e6:	89a3      	ldrhlt	r3, [r4, #12]
 80061e8:	181b      	addge	r3, r3, r0
 80061ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80061ee:	bfac      	ite	ge
 80061f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80061f2:	81a3      	strhlt	r3, [r4, #12]
 80061f4:	bd10      	pop	{r4, pc}

080061f6 <__seofread>:
 80061f6:	2000      	movs	r0, #0
 80061f8:	4770      	bx	lr

080061fa <__swrite>:
 80061fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061fe:	461f      	mov	r7, r3
 8006200:	898b      	ldrh	r3, [r1, #12]
 8006202:	05db      	lsls	r3, r3, #23
 8006204:	4605      	mov	r5, r0
 8006206:	460c      	mov	r4, r1
 8006208:	4616      	mov	r6, r2
 800620a:	d505      	bpl.n	8006218 <__swrite+0x1e>
 800620c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006210:	2302      	movs	r3, #2
 8006212:	2200      	movs	r2, #0
 8006214:	f002 f8e2 	bl	80083dc <_lseek_r>
 8006218:	89a3      	ldrh	r3, [r4, #12]
 800621a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800621e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006222:	81a3      	strh	r3, [r4, #12]
 8006224:	4632      	mov	r2, r6
 8006226:	463b      	mov	r3, r7
 8006228:	4628      	mov	r0, r5
 800622a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800622e:	f000 bec3 	b.w	8006fb8 <_write_r>

08006232 <__sseek>:
 8006232:	b510      	push	{r4, lr}
 8006234:	460c      	mov	r4, r1
 8006236:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800623a:	f002 f8cf 	bl	80083dc <_lseek_r>
 800623e:	1c43      	adds	r3, r0, #1
 8006240:	89a3      	ldrh	r3, [r4, #12]
 8006242:	bf15      	itete	ne
 8006244:	6560      	strne	r0, [r4, #84]	; 0x54
 8006246:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800624a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800624e:	81a3      	strheq	r3, [r4, #12]
 8006250:	bf18      	it	ne
 8006252:	81a3      	strhne	r3, [r4, #12]
 8006254:	bd10      	pop	{r4, pc}

08006256 <__sclose>:
 8006256:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800625a:	f000 bebf 	b.w	8006fdc <_close_r>

0800625e <sulp>:
 800625e:	b570      	push	{r4, r5, r6, lr}
 8006260:	4604      	mov	r4, r0
 8006262:	460d      	mov	r5, r1
 8006264:	ec45 4b10 	vmov	d0, r4, r5
 8006268:	4616      	mov	r6, r2
 800626a:	f002 fc63 	bl	8008b34 <__ulp>
 800626e:	ec51 0b10 	vmov	r0, r1, d0
 8006272:	b17e      	cbz	r6, 8006294 <sulp+0x36>
 8006274:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006278:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800627c:	2b00      	cmp	r3, #0
 800627e:	dd09      	ble.n	8006294 <sulp+0x36>
 8006280:	051b      	lsls	r3, r3, #20
 8006282:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006286:	2400      	movs	r4, #0
 8006288:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800628c:	4622      	mov	r2, r4
 800628e:	462b      	mov	r3, r5
 8006290:	f7fa f9ba 	bl	8000608 <__aeabi_dmul>
 8006294:	bd70      	pop	{r4, r5, r6, pc}
	...

08006298 <_strtod_l>:
 8006298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800629c:	ed2d 8b02 	vpush	{d8}
 80062a0:	b09d      	sub	sp, #116	; 0x74
 80062a2:	461f      	mov	r7, r3
 80062a4:	2300      	movs	r3, #0
 80062a6:	9318      	str	r3, [sp, #96]	; 0x60
 80062a8:	4ba2      	ldr	r3, [pc, #648]	; (8006534 <_strtod_l+0x29c>)
 80062aa:	9213      	str	r2, [sp, #76]	; 0x4c
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	9305      	str	r3, [sp, #20]
 80062b0:	4604      	mov	r4, r0
 80062b2:	4618      	mov	r0, r3
 80062b4:	4688      	mov	r8, r1
 80062b6:	f7f9 ff93 	bl	80001e0 <strlen>
 80062ba:	f04f 0a00 	mov.w	sl, #0
 80062be:	4605      	mov	r5, r0
 80062c0:	f04f 0b00 	mov.w	fp, #0
 80062c4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80062c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80062ca:	781a      	ldrb	r2, [r3, #0]
 80062cc:	2a2b      	cmp	r2, #43	; 0x2b
 80062ce:	d04e      	beq.n	800636e <_strtod_l+0xd6>
 80062d0:	d83b      	bhi.n	800634a <_strtod_l+0xb2>
 80062d2:	2a0d      	cmp	r2, #13
 80062d4:	d834      	bhi.n	8006340 <_strtod_l+0xa8>
 80062d6:	2a08      	cmp	r2, #8
 80062d8:	d834      	bhi.n	8006344 <_strtod_l+0xac>
 80062da:	2a00      	cmp	r2, #0
 80062dc:	d03e      	beq.n	800635c <_strtod_l+0xc4>
 80062de:	2300      	movs	r3, #0
 80062e0:	930a      	str	r3, [sp, #40]	; 0x28
 80062e2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80062e4:	7833      	ldrb	r3, [r6, #0]
 80062e6:	2b30      	cmp	r3, #48	; 0x30
 80062e8:	f040 80b0 	bne.w	800644c <_strtod_l+0x1b4>
 80062ec:	7873      	ldrb	r3, [r6, #1]
 80062ee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80062f2:	2b58      	cmp	r3, #88	; 0x58
 80062f4:	d168      	bne.n	80063c8 <_strtod_l+0x130>
 80062f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062f8:	9301      	str	r3, [sp, #4]
 80062fa:	ab18      	add	r3, sp, #96	; 0x60
 80062fc:	9702      	str	r7, [sp, #8]
 80062fe:	9300      	str	r3, [sp, #0]
 8006300:	4a8d      	ldr	r2, [pc, #564]	; (8006538 <_strtod_l+0x2a0>)
 8006302:	ab19      	add	r3, sp, #100	; 0x64
 8006304:	a917      	add	r1, sp, #92	; 0x5c
 8006306:	4620      	mov	r0, r4
 8006308:	f001 fd5c 	bl	8007dc4 <__gethex>
 800630c:	f010 0707 	ands.w	r7, r0, #7
 8006310:	4605      	mov	r5, r0
 8006312:	d005      	beq.n	8006320 <_strtod_l+0x88>
 8006314:	2f06      	cmp	r7, #6
 8006316:	d12c      	bne.n	8006372 <_strtod_l+0xda>
 8006318:	3601      	adds	r6, #1
 800631a:	2300      	movs	r3, #0
 800631c:	9617      	str	r6, [sp, #92]	; 0x5c
 800631e:	930a      	str	r3, [sp, #40]	; 0x28
 8006320:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006322:	2b00      	cmp	r3, #0
 8006324:	f040 8590 	bne.w	8006e48 <_strtod_l+0xbb0>
 8006328:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800632a:	b1eb      	cbz	r3, 8006368 <_strtod_l+0xd0>
 800632c:	4652      	mov	r2, sl
 800632e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006332:	ec43 2b10 	vmov	d0, r2, r3
 8006336:	b01d      	add	sp, #116	; 0x74
 8006338:	ecbd 8b02 	vpop	{d8}
 800633c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006340:	2a20      	cmp	r2, #32
 8006342:	d1cc      	bne.n	80062de <_strtod_l+0x46>
 8006344:	3301      	adds	r3, #1
 8006346:	9317      	str	r3, [sp, #92]	; 0x5c
 8006348:	e7be      	b.n	80062c8 <_strtod_l+0x30>
 800634a:	2a2d      	cmp	r2, #45	; 0x2d
 800634c:	d1c7      	bne.n	80062de <_strtod_l+0x46>
 800634e:	2201      	movs	r2, #1
 8006350:	920a      	str	r2, [sp, #40]	; 0x28
 8006352:	1c5a      	adds	r2, r3, #1
 8006354:	9217      	str	r2, [sp, #92]	; 0x5c
 8006356:	785b      	ldrb	r3, [r3, #1]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d1c2      	bne.n	80062e2 <_strtod_l+0x4a>
 800635c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800635e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006362:	2b00      	cmp	r3, #0
 8006364:	f040 856e 	bne.w	8006e44 <_strtod_l+0xbac>
 8006368:	4652      	mov	r2, sl
 800636a:	465b      	mov	r3, fp
 800636c:	e7e1      	b.n	8006332 <_strtod_l+0x9a>
 800636e:	2200      	movs	r2, #0
 8006370:	e7ee      	b.n	8006350 <_strtod_l+0xb8>
 8006372:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006374:	b13a      	cbz	r2, 8006386 <_strtod_l+0xee>
 8006376:	2135      	movs	r1, #53	; 0x35
 8006378:	a81a      	add	r0, sp, #104	; 0x68
 800637a:	f002 fce6 	bl	8008d4a <__copybits>
 800637e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006380:	4620      	mov	r0, r4
 8006382:	f002 f8a5 	bl	80084d0 <_Bfree>
 8006386:	3f01      	subs	r7, #1
 8006388:	2f04      	cmp	r7, #4
 800638a:	d806      	bhi.n	800639a <_strtod_l+0x102>
 800638c:	e8df f007 	tbb	[pc, r7]
 8006390:	1714030a 	.word	0x1714030a
 8006394:	0a          	.byte	0x0a
 8006395:	00          	.byte	0x00
 8006396:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800639a:	0728      	lsls	r0, r5, #28
 800639c:	d5c0      	bpl.n	8006320 <_strtod_l+0x88>
 800639e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80063a2:	e7bd      	b.n	8006320 <_strtod_l+0x88>
 80063a4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80063a8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80063aa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80063ae:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80063b2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80063b6:	e7f0      	b.n	800639a <_strtod_l+0x102>
 80063b8:	f8df b180 	ldr.w	fp, [pc, #384]	; 800653c <_strtod_l+0x2a4>
 80063bc:	e7ed      	b.n	800639a <_strtod_l+0x102>
 80063be:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80063c2:	f04f 3aff 	mov.w	sl, #4294967295
 80063c6:	e7e8      	b.n	800639a <_strtod_l+0x102>
 80063c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80063ca:	1c5a      	adds	r2, r3, #1
 80063cc:	9217      	str	r2, [sp, #92]	; 0x5c
 80063ce:	785b      	ldrb	r3, [r3, #1]
 80063d0:	2b30      	cmp	r3, #48	; 0x30
 80063d2:	d0f9      	beq.n	80063c8 <_strtod_l+0x130>
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d0a3      	beq.n	8006320 <_strtod_l+0x88>
 80063d8:	2301      	movs	r3, #1
 80063da:	f04f 0900 	mov.w	r9, #0
 80063de:	9304      	str	r3, [sp, #16]
 80063e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80063e2:	9308      	str	r3, [sp, #32]
 80063e4:	f8cd 901c 	str.w	r9, [sp, #28]
 80063e8:	464f      	mov	r7, r9
 80063ea:	220a      	movs	r2, #10
 80063ec:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80063ee:	7806      	ldrb	r6, [r0, #0]
 80063f0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80063f4:	b2d9      	uxtb	r1, r3
 80063f6:	2909      	cmp	r1, #9
 80063f8:	d92a      	bls.n	8006450 <_strtod_l+0x1b8>
 80063fa:	9905      	ldr	r1, [sp, #20]
 80063fc:	462a      	mov	r2, r5
 80063fe:	f003 fac3 	bl	8009988 <strncmp>
 8006402:	b398      	cbz	r0, 800646c <_strtod_l+0x1d4>
 8006404:	2000      	movs	r0, #0
 8006406:	4632      	mov	r2, r6
 8006408:	463d      	mov	r5, r7
 800640a:	9005      	str	r0, [sp, #20]
 800640c:	4603      	mov	r3, r0
 800640e:	2a65      	cmp	r2, #101	; 0x65
 8006410:	d001      	beq.n	8006416 <_strtod_l+0x17e>
 8006412:	2a45      	cmp	r2, #69	; 0x45
 8006414:	d118      	bne.n	8006448 <_strtod_l+0x1b0>
 8006416:	b91d      	cbnz	r5, 8006420 <_strtod_l+0x188>
 8006418:	9a04      	ldr	r2, [sp, #16]
 800641a:	4302      	orrs	r2, r0
 800641c:	d09e      	beq.n	800635c <_strtod_l+0xc4>
 800641e:	2500      	movs	r5, #0
 8006420:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8006424:	f108 0201 	add.w	r2, r8, #1
 8006428:	9217      	str	r2, [sp, #92]	; 0x5c
 800642a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800642e:	2a2b      	cmp	r2, #43	; 0x2b
 8006430:	d075      	beq.n	800651e <_strtod_l+0x286>
 8006432:	2a2d      	cmp	r2, #45	; 0x2d
 8006434:	d07b      	beq.n	800652e <_strtod_l+0x296>
 8006436:	f04f 0c00 	mov.w	ip, #0
 800643a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800643e:	2909      	cmp	r1, #9
 8006440:	f240 8082 	bls.w	8006548 <_strtod_l+0x2b0>
 8006444:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006448:	2600      	movs	r6, #0
 800644a:	e09d      	b.n	8006588 <_strtod_l+0x2f0>
 800644c:	2300      	movs	r3, #0
 800644e:	e7c4      	b.n	80063da <_strtod_l+0x142>
 8006450:	2f08      	cmp	r7, #8
 8006452:	bfd8      	it	le
 8006454:	9907      	ldrle	r1, [sp, #28]
 8006456:	f100 0001 	add.w	r0, r0, #1
 800645a:	bfda      	itte	le
 800645c:	fb02 3301 	mlale	r3, r2, r1, r3
 8006460:	9307      	strle	r3, [sp, #28]
 8006462:	fb02 3909 	mlagt	r9, r2, r9, r3
 8006466:	3701      	adds	r7, #1
 8006468:	9017      	str	r0, [sp, #92]	; 0x5c
 800646a:	e7bf      	b.n	80063ec <_strtod_l+0x154>
 800646c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800646e:	195a      	adds	r2, r3, r5
 8006470:	9217      	str	r2, [sp, #92]	; 0x5c
 8006472:	5d5a      	ldrb	r2, [r3, r5]
 8006474:	2f00      	cmp	r7, #0
 8006476:	d037      	beq.n	80064e8 <_strtod_l+0x250>
 8006478:	9005      	str	r0, [sp, #20]
 800647a:	463d      	mov	r5, r7
 800647c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006480:	2b09      	cmp	r3, #9
 8006482:	d912      	bls.n	80064aa <_strtod_l+0x212>
 8006484:	2301      	movs	r3, #1
 8006486:	e7c2      	b.n	800640e <_strtod_l+0x176>
 8006488:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800648a:	1c5a      	adds	r2, r3, #1
 800648c:	9217      	str	r2, [sp, #92]	; 0x5c
 800648e:	785a      	ldrb	r2, [r3, #1]
 8006490:	3001      	adds	r0, #1
 8006492:	2a30      	cmp	r2, #48	; 0x30
 8006494:	d0f8      	beq.n	8006488 <_strtod_l+0x1f0>
 8006496:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800649a:	2b08      	cmp	r3, #8
 800649c:	f200 84d9 	bhi.w	8006e52 <_strtod_l+0xbba>
 80064a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80064a2:	9005      	str	r0, [sp, #20]
 80064a4:	2000      	movs	r0, #0
 80064a6:	9308      	str	r3, [sp, #32]
 80064a8:	4605      	mov	r5, r0
 80064aa:	3a30      	subs	r2, #48	; 0x30
 80064ac:	f100 0301 	add.w	r3, r0, #1
 80064b0:	d014      	beq.n	80064dc <_strtod_l+0x244>
 80064b2:	9905      	ldr	r1, [sp, #20]
 80064b4:	4419      	add	r1, r3
 80064b6:	9105      	str	r1, [sp, #20]
 80064b8:	462b      	mov	r3, r5
 80064ba:	eb00 0e05 	add.w	lr, r0, r5
 80064be:	210a      	movs	r1, #10
 80064c0:	4573      	cmp	r3, lr
 80064c2:	d113      	bne.n	80064ec <_strtod_l+0x254>
 80064c4:	182b      	adds	r3, r5, r0
 80064c6:	2b08      	cmp	r3, #8
 80064c8:	f105 0501 	add.w	r5, r5, #1
 80064cc:	4405      	add	r5, r0
 80064ce:	dc1c      	bgt.n	800650a <_strtod_l+0x272>
 80064d0:	9907      	ldr	r1, [sp, #28]
 80064d2:	230a      	movs	r3, #10
 80064d4:	fb03 2301 	mla	r3, r3, r1, r2
 80064d8:	9307      	str	r3, [sp, #28]
 80064da:	2300      	movs	r3, #0
 80064dc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80064de:	1c51      	adds	r1, r2, #1
 80064e0:	9117      	str	r1, [sp, #92]	; 0x5c
 80064e2:	7852      	ldrb	r2, [r2, #1]
 80064e4:	4618      	mov	r0, r3
 80064e6:	e7c9      	b.n	800647c <_strtod_l+0x1e4>
 80064e8:	4638      	mov	r0, r7
 80064ea:	e7d2      	b.n	8006492 <_strtod_l+0x1fa>
 80064ec:	2b08      	cmp	r3, #8
 80064ee:	dc04      	bgt.n	80064fa <_strtod_l+0x262>
 80064f0:	9e07      	ldr	r6, [sp, #28]
 80064f2:	434e      	muls	r6, r1
 80064f4:	9607      	str	r6, [sp, #28]
 80064f6:	3301      	adds	r3, #1
 80064f8:	e7e2      	b.n	80064c0 <_strtod_l+0x228>
 80064fa:	f103 0c01 	add.w	ip, r3, #1
 80064fe:	f1bc 0f10 	cmp.w	ip, #16
 8006502:	bfd8      	it	le
 8006504:	fb01 f909 	mulle.w	r9, r1, r9
 8006508:	e7f5      	b.n	80064f6 <_strtod_l+0x25e>
 800650a:	2d10      	cmp	r5, #16
 800650c:	bfdc      	itt	le
 800650e:	230a      	movle	r3, #10
 8006510:	fb03 2909 	mlale	r9, r3, r9, r2
 8006514:	e7e1      	b.n	80064da <_strtod_l+0x242>
 8006516:	2300      	movs	r3, #0
 8006518:	9305      	str	r3, [sp, #20]
 800651a:	2301      	movs	r3, #1
 800651c:	e77c      	b.n	8006418 <_strtod_l+0x180>
 800651e:	f04f 0c00 	mov.w	ip, #0
 8006522:	f108 0202 	add.w	r2, r8, #2
 8006526:	9217      	str	r2, [sp, #92]	; 0x5c
 8006528:	f898 2002 	ldrb.w	r2, [r8, #2]
 800652c:	e785      	b.n	800643a <_strtod_l+0x1a2>
 800652e:	f04f 0c01 	mov.w	ip, #1
 8006532:	e7f6      	b.n	8006522 <_strtod_l+0x28a>
 8006534:	0800a888 	.word	0x0800a888
 8006538:	0800a63c 	.word	0x0800a63c
 800653c:	7ff00000 	.word	0x7ff00000
 8006540:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006542:	1c51      	adds	r1, r2, #1
 8006544:	9117      	str	r1, [sp, #92]	; 0x5c
 8006546:	7852      	ldrb	r2, [r2, #1]
 8006548:	2a30      	cmp	r2, #48	; 0x30
 800654a:	d0f9      	beq.n	8006540 <_strtod_l+0x2a8>
 800654c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006550:	2908      	cmp	r1, #8
 8006552:	f63f af79 	bhi.w	8006448 <_strtod_l+0x1b0>
 8006556:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800655a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800655c:	9206      	str	r2, [sp, #24]
 800655e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006560:	1c51      	adds	r1, r2, #1
 8006562:	9117      	str	r1, [sp, #92]	; 0x5c
 8006564:	7852      	ldrb	r2, [r2, #1]
 8006566:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800656a:	2e09      	cmp	r6, #9
 800656c:	d937      	bls.n	80065de <_strtod_l+0x346>
 800656e:	9e06      	ldr	r6, [sp, #24]
 8006570:	1b89      	subs	r1, r1, r6
 8006572:	2908      	cmp	r1, #8
 8006574:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006578:	dc02      	bgt.n	8006580 <_strtod_l+0x2e8>
 800657a:	4576      	cmp	r6, lr
 800657c:	bfa8      	it	ge
 800657e:	4676      	movge	r6, lr
 8006580:	f1bc 0f00 	cmp.w	ip, #0
 8006584:	d000      	beq.n	8006588 <_strtod_l+0x2f0>
 8006586:	4276      	negs	r6, r6
 8006588:	2d00      	cmp	r5, #0
 800658a:	d14d      	bne.n	8006628 <_strtod_l+0x390>
 800658c:	9904      	ldr	r1, [sp, #16]
 800658e:	4301      	orrs	r1, r0
 8006590:	f47f aec6 	bne.w	8006320 <_strtod_l+0x88>
 8006594:	2b00      	cmp	r3, #0
 8006596:	f47f aee1 	bne.w	800635c <_strtod_l+0xc4>
 800659a:	2a69      	cmp	r2, #105	; 0x69
 800659c:	d027      	beq.n	80065ee <_strtod_l+0x356>
 800659e:	dc24      	bgt.n	80065ea <_strtod_l+0x352>
 80065a0:	2a49      	cmp	r2, #73	; 0x49
 80065a2:	d024      	beq.n	80065ee <_strtod_l+0x356>
 80065a4:	2a4e      	cmp	r2, #78	; 0x4e
 80065a6:	f47f aed9 	bne.w	800635c <_strtod_l+0xc4>
 80065aa:	499f      	ldr	r1, [pc, #636]	; (8006828 <_strtod_l+0x590>)
 80065ac:	a817      	add	r0, sp, #92	; 0x5c
 80065ae:	f001 fe61 	bl	8008274 <__match>
 80065b2:	2800      	cmp	r0, #0
 80065b4:	f43f aed2 	beq.w	800635c <_strtod_l+0xc4>
 80065b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80065ba:	781b      	ldrb	r3, [r3, #0]
 80065bc:	2b28      	cmp	r3, #40	; 0x28
 80065be:	d12d      	bne.n	800661c <_strtod_l+0x384>
 80065c0:	499a      	ldr	r1, [pc, #616]	; (800682c <_strtod_l+0x594>)
 80065c2:	aa1a      	add	r2, sp, #104	; 0x68
 80065c4:	a817      	add	r0, sp, #92	; 0x5c
 80065c6:	f001 fe69 	bl	800829c <__hexnan>
 80065ca:	2805      	cmp	r0, #5
 80065cc:	d126      	bne.n	800661c <_strtod_l+0x384>
 80065ce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80065d0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80065d4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80065d8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80065dc:	e6a0      	b.n	8006320 <_strtod_l+0x88>
 80065de:	210a      	movs	r1, #10
 80065e0:	fb01 2e0e 	mla	lr, r1, lr, r2
 80065e4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80065e8:	e7b9      	b.n	800655e <_strtod_l+0x2c6>
 80065ea:	2a6e      	cmp	r2, #110	; 0x6e
 80065ec:	e7db      	b.n	80065a6 <_strtod_l+0x30e>
 80065ee:	4990      	ldr	r1, [pc, #576]	; (8006830 <_strtod_l+0x598>)
 80065f0:	a817      	add	r0, sp, #92	; 0x5c
 80065f2:	f001 fe3f 	bl	8008274 <__match>
 80065f6:	2800      	cmp	r0, #0
 80065f8:	f43f aeb0 	beq.w	800635c <_strtod_l+0xc4>
 80065fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80065fe:	498d      	ldr	r1, [pc, #564]	; (8006834 <_strtod_l+0x59c>)
 8006600:	3b01      	subs	r3, #1
 8006602:	a817      	add	r0, sp, #92	; 0x5c
 8006604:	9317      	str	r3, [sp, #92]	; 0x5c
 8006606:	f001 fe35 	bl	8008274 <__match>
 800660a:	b910      	cbnz	r0, 8006612 <_strtod_l+0x37a>
 800660c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800660e:	3301      	adds	r3, #1
 8006610:	9317      	str	r3, [sp, #92]	; 0x5c
 8006612:	f8df b230 	ldr.w	fp, [pc, #560]	; 8006844 <_strtod_l+0x5ac>
 8006616:	f04f 0a00 	mov.w	sl, #0
 800661a:	e681      	b.n	8006320 <_strtod_l+0x88>
 800661c:	4886      	ldr	r0, [pc, #536]	; (8006838 <_strtod_l+0x5a0>)
 800661e:	f003 f963 	bl	80098e8 <nan>
 8006622:	ec5b ab10 	vmov	sl, fp, d0
 8006626:	e67b      	b.n	8006320 <_strtod_l+0x88>
 8006628:	9b05      	ldr	r3, [sp, #20]
 800662a:	9807      	ldr	r0, [sp, #28]
 800662c:	1af3      	subs	r3, r6, r3
 800662e:	2f00      	cmp	r7, #0
 8006630:	bf08      	it	eq
 8006632:	462f      	moveq	r7, r5
 8006634:	2d10      	cmp	r5, #16
 8006636:	9306      	str	r3, [sp, #24]
 8006638:	46a8      	mov	r8, r5
 800663a:	bfa8      	it	ge
 800663c:	f04f 0810 	movge.w	r8, #16
 8006640:	f7f9 ff68 	bl	8000514 <__aeabi_ui2d>
 8006644:	2d09      	cmp	r5, #9
 8006646:	4682      	mov	sl, r0
 8006648:	468b      	mov	fp, r1
 800664a:	dd13      	ble.n	8006674 <_strtod_l+0x3dc>
 800664c:	4b7b      	ldr	r3, [pc, #492]	; (800683c <_strtod_l+0x5a4>)
 800664e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006652:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006656:	f7f9 ffd7 	bl	8000608 <__aeabi_dmul>
 800665a:	4682      	mov	sl, r0
 800665c:	4648      	mov	r0, r9
 800665e:	468b      	mov	fp, r1
 8006660:	f7f9 ff58 	bl	8000514 <__aeabi_ui2d>
 8006664:	4602      	mov	r2, r0
 8006666:	460b      	mov	r3, r1
 8006668:	4650      	mov	r0, sl
 800666a:	4659      	mov	r1, fp
 800666c:	f7f9 fe16 	bl	800029c <__adddf3>
 8006670:	4682      	mov	sl, r0
 8006672:	468b      	mov	fp, r1
 8006674:	2d0f      	cmp	r5, #15
 8006676:	dc38      	bgt.n	80066ea <_strtod_l+0x452>
 8006678:	9b06      	ldr	r3, [sp, #24]
 800667a:	2b00      	cmp	r3, #0
 800667c:	f43f ae50 	beq.w	8006320 <_strtod_l+0x88>
 8006680:	dd24      	ble.n	80066cc <_strtod_l+0x434>
 8006682:	2b16      	cmp	r3, #22
 8006684:	dc0b      	bgt.n	800669e <_strtod_l+0x406>
 8006686:	496d      	ldr	r1, [pc, #436]	; (800683c <_strtod_l+0x5a4>)
 8006688:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800668c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006690:	4652      	mov	r2, sl
 8006692:	465b      	mov	r3, fp
 8006694:	f7f9 ffb8 	bl	8000608 <__aeabi_dmul>
 8006698:	4682      	mov	sl, r0
 800669a:	468b      	mov	fp, r1
 800669c:	e640      	b.n	8006320 <_strtod_l+0x88>
 800669e:	9a06      	ldr	r2, [sp, #24]
 80066a0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80066a4:	4293      	cmp	r3, r2
 80066a6:	db20      	blt.n	80066ea <_strtod_l+0x452>
 80066a8:	4c64      	ldr	r4, [pc, #400]	; (800683c <_strtod_l+0x5a4>)
 80066aa:	f1c5 050f 	rsb	r5, r5, #15
 80066ae:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80066b2:	4652      	mov	r2, sl
 80066b4:	465b      	mov	r3, fp
 80066b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80066ba:	f7f9 ffa5 	bl	8000608 <__aeabi_dmul>
 80066be:	9b06      	ldr	r3, [sp, #24]
 80066c0:	1b5d      	subs	r5, r3, r5
 80066c2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80066c6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80066ca:	e7e3      	b.n	8006694 <_strtod_l+0x3fc>
 80066cc:	9b06      	ldr	r3, [sp, #24]
 80066ce:	3316      	adds	r3, #22
 80066d0:	db0b      	blt.n	80066ea <_strtod_l+0x452>
 80066d2:	9b05      	ldr	r3, [sp, #20]
 80066d4:	1b9e      	subs	r6, r3, r6
 80066d6:	4b59      	ldr	r3, [pc, #356]	; (800683c <_strtod_l+0x5a4>)
 80066d8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80066dc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80066e0:	4650      	mov	r0, sl
 80066e2:	4659      	mov	r1, fp
 80066e4:	f7fa f8ba 	bl	800085c <__aeabi_ddiv>
 80066e8:	e7d6      	b.n	8006698 <_strtod_l+0x400>
 80066ea:	9b06      	ldr	r3, [sp, #24]
 80066ec:	eba5 0808 	sub.w	r8, r5, r8
 80066f0:	4498      	add	r8, r3
 80066f2:	f1b8 0f00 	cmp.w	r8, #0
 80066f6:	dd74      	ble.n	80067e2 <_strtod_l+0x54a>
 80066f8:	f018 030f 	ands.w	r3, r8, #15
 80066fc:	d00a      	beq.n	8006714 <_strtod_l+0x47c>
 80066fe:	494f      	ldr	r1, [pc, #316]	; (800683c <_strtod_l+0x5a4>)
 8006700:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006704:	4652      	mov	r2, sl
 8006706:	465b      	mov	r3, fp
 8006708:	e9d1 0100 	ldrd	r0, r1, [r1]
 800670c:	f7f9 ff7c 	bl	8000608 <__aeabi_dmul>
 8006710:	4682      	mov	sl, r0
 8006712:	468b      	mov	fp, r1
 8006714:	f038 080f 	bics.w	r8, r8, #15
 8006718:	d04f      	beq.n	80067ba <_strtod_l+0x522>
 800671a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800671e:	dd22      	ble.n	8006766 <_strtod_l+0x4ce>
 8006720:	2500      	movs	r5, #0
 8006722:	462e      	mov	r6, r5
 8006724:	9507      	str	r5, [sp, #28]
 8006726:	9505      	str	r5, [sp, #20]
 8006728:	2322      	movs	r3, #34	; 0x22
 800672a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8006844 <_strtod_l+0x5ac>
 800672e:	6023      	str	r3, [r4, #0]
 8006730:	f04f 0a00 	mov.w	sl, #0
 8006734:	9b07      	ldr	r3, [sp, #28]
 8006736:	2b00      	cmp	r3, #0
 8006738:	f43f adf2 	beq.w	8006320 <_strtod_l+0x88>
 800673c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800673e:	4620      	mov	r0, r4
 8006740:	f001 fec6 	bl	80084d0 <_Bfree>
 8006744:	9905      	ldr	r1, [sp, #20]
 8006746:	4620      	mov	r0, r4
 8006748:	f001 fec2 	bl	80084d0 <_Bfree>
 800674c:	4631      	mov	r1, r6
 800674e:	4620      	mov	r0, r4
 8006750:	f001 febe 	bl	80084d0 <_Bfree>
 8006754:	9907      	ldr	r1, [sp, #28]
 8006756:	4620      	mov	r0, r4
 8006758:	f001 feba 	bl	80084d0 <_Bfree>
 800675c:	4629      	mov	r1, r5
 800675e:	4620      	mov	r0, r4
 8006760:	f001 feb6 	bl	80084d0 <_Bfree>
 8006764:	e5dc      	b.n	8006320 <_strtod_l+0x88>
 8006766:	4b36      	ldr	r3, [pc, #216]	; (8006840 <_strtod_l+0x5a8>)
 8006768:	9304      	str	r3, [sp, #16]
 800676a:	2300      	movs	r3, #0
 800676c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006770:	4650      	mov	r0, sl
 8006772:	4659      	mov	r1, fp
 8006774:	4699      	mov	r9, r3
 8006776:	f1b8 0f01 	cmp.w	r8, #1
 800677a:	dc21      	bgt.n	80067c0 <_strtod_l+0x528>
 800677c:	b10b      	cbz	r3, 8006782 <_strtod_l+0x4ea>
 800677e:	4682      	mov	sl, r0
 8006780:	468b      	mov	fp, r1
 8006782:	4b2f      	ldr	r3, [pc, #188]	; (8006840 <_strtod_l+0x5a8>)
 8006784:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006788:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800678c:	4652      	mov	r2, sl
 800678e:	465b      	mov	r3, fp
 8006790:	e9d9 0100 	ldrd	r0, r1, [r9]
 8006794:	f7f9 ff38 	bl	8000608 <__aeabi_dmul>
 8006798:	4b2a      	ldr	r3, [pc, #168]	; (8006844 <_strtod_l+0x5ac>)
 800679a:	460a      	mov	r2, r1
 800679c:	400b      	ands	r3, r1
 800679e:	492a      	ldr	r1, [pc, #168]	; (8006848 <_strtod_l+0x5b0>)
 80067a0:	428b      	cmp	r3, r1
 80067a2:	4682      	mov	sl, r0
 80067a4:	d8bc      	bhi.n	8006720 <_strtod_l+0x488>
 80067a6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80067aa:	428b      	cmp	r3, r1
 80067ac:	bf86      	itte	hi
 80067ae:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800684c <_strtod_l+0x5b4>
 80067b2:	f04f 3aff 	movhi.w	sl, #4294967295
 80067b6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80067ba:	2300      	movs	r3, #0
 80067bc:	9304      	str	r3, [sp, #16]
 80067be:	e084      	b.n	80068ca <_strtod_l+0x632>
 80067c0:	f018 0f01 	tst.w	r8, #1
 80067c4:	d005      	beq.n	80067d2 <_strtod_l+0x53a>
 80067c6:	9b04      	ldr	r3, [sp, #16]
 80067c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067cc:	f7f9 ff1c 	bl	8000608 <__aeabi_dmul>
 80067d0:	2301      	movs	r3, #1
 80067d2:	9a04      	ldr	r2, [sp, #16]
 80067d4:	3208      	adds	r2, #8
 80067d6:	f109 0901 	add.w	r9, r9, #1
 80067da:	ea4f 0868 	mov.w	r8, r8, asr #1
 80067de:	9204      	str	r2, [sp, #16]
 80067e0:	e7c9      	b.n	8006776 <_strtod_l+0x4de>
 80067e2:	d0ea      	beq.n	80067ba <_strtod_l+0x522>
 80067e4:	f1c8 0800 	rsb	r8, r8, #0
 80067e8:	f018 020f 	ands.w	r2, r8, #15
 80067ec:	d00a      	beq.n	8006804 <_strtod_l+0x56c>
 80067ee:	4b13      	ldr	r3, [pc, #76]	; (800683c <_strtod_l+0x5a4>)
 80067f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80067f4:	4650      	mov	r0, sl
 80067f6:	4659      	mov	r1, fp
 80067f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067fc:	f7fa f82e 	bl	800085c <__aeabi_ddiv>
 8006800:	4682      	mov	sl, r0
 8006802:	468b      	mov	fp, r1
 8006804:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006808:	d0d7      	beq.n	80067ba <_strtod_l+0x522>
 800680a:	f1b8 0f1f 	cmp.w	r8, #31
 800680e:	dd1f      	ble.n	8006850 <_strtod_l+0x5b8>
 8006810:	2500      	movs	r5, #0
 8006812:	462e      	mov	r6, r5
 8006814:	9507      	str	r5, [sp, #28]
 8006816:	9505      	str	r5, [sp, #20]
 8006818:	2322      	movs	r3, #34	; 0x22
 800681a:	f04f 0a00 	mov.w	sl, #0
 800681e:	f04f 0b00 	mov.w	fp, #0
 8006822:	6023      	str	r3, [r4, #0]
 8006824:	e786      	b.n	8006734 <_strtod_l+0x49c>
 8006826:	bf00      	nop
 8006828:	0800a611 	.word	0x0800a611
 800682c:	0800a650 	.word	0x0800a650
 8006830:	0800a609 	.word	0x0800a609
 8006834:	0800a794 	.word	0x0800a794
 8006838:	0800aa5b 	.word	0x0800aa5b
 800683c:	0800a920 	.word	0x0800a920
 8006840:	0800a8f8 	.word	0x0800a8f8
 8006844:	7ff00000 	.word	0x7ff00000
 8006848:	7ca00000 	.word	0x7ca00000
 800684c:	7fefffff 	.word	0x7fefffff
 8006850:	f018 0310 	ands.w	r3, r8, #16
 8006854:	bf18      	it	ne
 8006856:	236a      	movne	r3, #106	; 0x6a
 8006858:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8006c08 <_strtod_l+0x970>
 800685c:	9304      	str	r3, [sp, #16]
 800685e:	4650      	mov	r0, sl
 8006860:	4659      	mov	r1, fp
 8006862:	2300      	movs	r3, #0
 8006864:	f018 0f01 	tst.w	r8, #1
 8006868:	d004      	beq.n	8006874 <_strtod_l+0x5dc>
 800686a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800686e:	f7f9 fecb 	bl	8000608 <__aeabi_dmul>
 8006872:	2301      	movs	r3, #1
 8006874:	ea5f 0868 	movs.w	r8, r8, asr #1
 8006878:	f109 0908 	add.w	r9, r9, #8
 800687c:	d1f2      	bne.n	8006864 <_strtod_l+0x5cc>
 800687e:	b10b      	cbz	r3, 8006884 <_strtod_l+0x5ec>
 8006880:	4682      	mov	sl, r0
 8006882:	468b      	mov	fp, r1
 8006884:	9b04      	ldr	r3, [sp, #16]
 8006886:	b1c3      	cbz	r3, 80068ba <_strtod_l+0x622>
 8006888:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800688c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006890:	2b00      	cmp	r3, #0
 8006892:	4659      	mov	r1, fp
 8006894:	dd11      	ble.n	80068ba <_strtod_l+0x622>
 8006896:	2b1f      	cmp	r3, #31
 8006898:	f340 8124 	ble.w	8006ae4 <_strtod_l+0x84c>
 800689c:	2b34      	cmp	r3, #52	; 0x34
 800689e:	bfde      	ittt	le
 80068a0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80068a4:	f04f 33ff 	movle.w	r3, #4294967295
 80068a8:	fa03 f202 	lslle.w	r2, r3, r2
 80068ac:	f04f 0a00 	mov.w	sl, #0
 80068b0:	bfcc      	ite	gt
 80068b2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80068b6:	ea02 0b01 	andle.w	fp, r2, r1
 80068ba:	2200      	movs	r2, #0
 80068bc:	2300      	movs	r3, #0
 80068be:	4650      	mov	r0, sl
 80068c0:	4659      	mov	r1, fp
 80068c2:	f7fa f909 	bl	8000ad8 <__aeabi_dcmpeq>
 80068c6:	2800      	cmp	r0, #0
 80068c8:	d1a2      	bne.n	8006810 <_strtod_l+0x578>
 80068ca:	9b07      	ldr	r3, [sp, #28]
 80068cc:	9300      	str	r3, [sp, #0]
 80068ce:	9908      	ldr	r1, [sp, #32]
 80068d0:	462b      	mov	r3, r5
 80068d2:	463a      	mov	r2, r7
 80068d4:	4620      	mov	r0, r4
 80068d6:	f001 fe63 	bl	80085a0 <__s2b>
 80068da:	9007      	str	r0, [sp, #28]
 80068dc:	2800      	cmp	r0, #0
 80068de:	f43f af1f 	beq.w	8006720 <_strtod_l+0x488>
 80068e2:	9b05      	ldr	r3, [sp, #20]
 80068e4:	1b9e      	subs	r6, r3, r6
 80068e6:	9b06      	ldr	r3, [sp, #24]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	bfb4      	ite	lt
 80068ec:	4633      	movlt	r3, r6
 80068ee:	2300      	movge	r3, #0
 80068f0:	930c      	str	r3, [sp, #48]	; 0x30
 80068f2:	9b06      	ldr	r3, [sp, #24]
 80068f4:	2500      	movs	r5, #0
 80068f6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80068fa:	9312      	str	r3, [sp, #72]	; 0x48
 80068fc:	462e      	mov	r6, r5
 80068fe:	9b07      	ldr	r3, [sp, #28]
 8006900:	4620      	mov	r0, r4
 8006902:	6859      	ldr	r1, [r3, #4]
 8006904:	f001 fda4 	bl	8008450 <_Balloc>
 8006908:	9005      	str	r0, [sp, #20]
 800690a:	2800      	cmp	r0, #0
 800690c:	f43f af0c 	beq.w	8006728 <_strtod_l+0x490>
 8006910:	9b07      	ldr	r3, [sp, #28]
 8006912:	691a      	ldr	r2, [r3, #16]
 8006914:	3202      	adds	r2, #2
 8006916:	f103 010c 	add.w	r1, r3, #12
 800691a:	0092      	lsls	r2, r2, #2
 800691c:	300c      	adds	r0, #12
 800691e:	f001 fd89 	bl	8008434 <memcpy>
 8006922:	ec4b ab10 	vmov	d0, sl, fp
 8006926:	aa1a      	add	r2, sp, #104	; 0x68
 8006928:	a919      	add	r1, sp, #100	; 0x64
 800692a:	4620      	mov	r0, r4
 800692c:	f002 f97e 	bl	8008c2c <__d2b>
 8006930:	ec4b ab18 	vmov	d8, sl, fp
 8006934:	9018      	str	r0, [sp, #96]	; 0x60
 8006936:	2800      	cmp	r0, #0
 8006938:	f43f aef6 	beq.w	8006728 <_strtod_l+0x490>
 800693c:	2101      	movs	r1, #1
 800693e:	4620      	mov	r0, r4
 8006940:	f001 fec8 	bl	80086d4 <__i2b>
 8006944:	4606      	mov	r6, r0
 8006946:	2800      	cmp	r0, #0
 8006948:	f43f aeee 	beq.w	8006728 <_strtod_l+0x490>
 800694c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800694e:	9904      	ldr	r1, [sp, #16]
 8006950:	2b00      	cmp	r3, #0
 8006952:	bfab      	itete	ge
 8006954:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8006956:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8006958:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800695a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800695e:	bfac      	ite	ge
 8006960:	eb03 0902 	addge.w	r9, r3, r2
 8006964:	1ad7      	sublt	r7, r2, r3
 8006966:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006968:	eba3 0801 	sub.w	r8, r3, r1
 800696c:	4490      	add	r8, r2
 800696e:	4ba1      	ldr	r3, [pc, #644]	; (8006bf4 <_strtod_l+0x95c>)
 8006970:	f108 38ff 	add.w	r8, r8, #4294967295
 8006974:	4598      	cmp	r8, r3
 8006976:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800697a:	f280 80c7 	bge.w	8006b0c <_strtod_l+0x874>
 800697e:	eba3 0308 	sub.w	r3, r3, r8
 8006982:	2b1f      	cmp	r3, #31
 8006984:	eba2 0203 	sub.w	r2, r2, r3
 8006988:	f04f 0101 	mov.w	r1, #1
 800698c:	f300 80b1 	bgt.w	8006af2 <_strtod_l+0x85a>
 8006990:	fa01 f303 	lsl.w	r3, r1, r3
 8006994:	930d      	str	r3, [sp, #52]	; 0x34
 8006996:	2300      	movs	r3, #0
 8006998:	9308      	str	r3, [sp, #32]
 800699a:	eb09 0802 	add.w	r8, r9, r2
 800699e:	9b04      	ldr	r3, [sp, #16]
 80069a0:	45c1      	cmp	r9, r8
 80069a2:	4417      	add	r7, r2
 80069a4:	441f      	add	r7, r3
 80069a6:	464b      	mov	r3, r9
 80069a8:	bfa8      	it	ge
 80069aa:	4643      	movge	r3, r8
 80069ac:	42bb      	cmp	r3, r7
 80069ae:	bfa8      	it	ge
 80069b0:	463b      	movge	r3, r7
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	bfc2      	ittt	gt
 80069b6:	eba8 0803 	subgt.w	r8, r8, r3
 80069ba:	1aff      	subgt	r7, r7, r3
 80069bc:	eba9 0903 	subgt.w	r9, r9, r3
 80069c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	dd17      	ble.n	80069f6 <_strtod_l+0x75e>
 80069c6:	4631      	mov	r1, r6
 80069c8:	461a      	mov	r2, r3
 80069ca:	4620      	mov	r0, r4
 80069cc:	f001 ff42 	bl	8008854 <__pow5mult>
 80069d0:	4606      	mov	r6, r0
 80069d2:	2800      	cmp	r0, #0
 80069d4:	f43f aea8 	beq.w	8006728 <_strtod_l+0x490>
 80069d8:	4601      	mov	r1, r0
 80069da:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80069dc:	4620      	mov	r0, r4
 80069de:	f001 fe8f 	bl	8008700 <__multiply>
 80069e2:	900b      	str	r0, [sp, #44]	; 0x2c
 80069e4:	2800      	cmp	r0, #0
 80069e6:	f43f ae9f 	beq.w	8006728 <_strtod_l+0x490>
 80069ea:	9918      	ldr	r1, [sp, #96]	; 0x60
 80069ec:	4620      	mov	r0, r4
 80069ee:	f001 fd6f 	bl	80084d0 <_Bfree>
 80069f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069f4:	9318      	str	r3, [sp, #96]	; 0x60
 80069f6:	f1b8 0f00 	cmp.w	r8, #0
 80069fa:	f300 808c 	bgt.w	8006b16 <_strtod_l+0x87e>
 80069fe:	9b06      	ldr	r3, [sp, #24]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	dd08      	ble.n	8006a16 <_strtod_l+0x77e>
 8006a04:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006a06:	9905      	ldr	r1, [sp, #20]
 8006a08:	4620      	mov	r0, r4
 8006a0a:	f001 ff23 	bl	8008854 <__pow5mult>
 8006a0e:	9005      	str	r0, [sp, #20]
 8006a10:	2800      	cmp	r0, #0
 8006a12:	f43f ae89 	beq.w	8006728 <_strtod_l+0x490>
 8006a16:	2f00      	cmp	r7, #0
 8006a18:	dd08      	ble.n	8006a2c <_strtod_l+0x794>
 8006a1a:	9905      	ldr	r1, [sp, #20]
 8006a1c:	463a      	mov	r2, r7
 8006a1e:	4620      	mov	r0, r4
 8006a20:	f001 ff72 	bl	8008908 <__lshift>
 8006a24:	9005      	str	r0, [sp, #20]
 8006a26:	2800      	cmp	r0, #0
 8006a28:	f43f ae7e 	beq.w	8006728 <_strtod_l+0x490>
 8006a2c:	f1b9 0f00 	cmp.w	r9, #0
 8006a30:	dd08      	ble.n	8006a44 <_strtod_l+0x7ac>
 8006a32:	4631      	mov	r1, r6
 8006a34:	464a      	mov	r2, r9
 8006a36:	4620      	mov	r0, r4
 8006a38:	f001 ff66 	bl	8008908 <__lshift>
 8006a3c:	4606      	mov	r6, r0
 8006a3e:	2800      	cmp	r0, #0
 8006a40:	f43f ae72 	beq.w	8006728 <_strtod_l+0x490>
 8006a44:	9a05      	ldr	r2, [sp, #20]
 8006a46:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006a48:	4620      	mov	r0, r4
 8006a4a:	f001 ffe9 	bl	8008a20 <__mdiff>
 8006a4e:	4605      	mov	r5, r0
 8006a50:	2800      	cmp	r0, #0
 8006a52:	f43f ae69 	beq.w	8006728 <_strtod_l+0x490>
 8006a56:	68c3      	ldr	r3, [r0, #12]
 8006a58:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	60c3      	str	r3, [r0, #12]
 8006a5e:	4631      	mov	r1, r6
 8006a60:	f001 ffc2 	bl	80089e8 <__mcmp>
 8006a64:	2800      	cmp	r0, #0
 8006a66:	da60      	bge.n	8006b2a <_strtod_l+0x892>
 8006a68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a6a:	ea53 030a 	orrs.w	r3, r3, sl
 8006a6e:	f040 8082 	bne.w	8006b76 <_strtod_l+0x8de>
 8006a72:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d17d      	bne.n	8006b76 <_strtod_l+0x8de>
 8006a7a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006a7e:	0d1b      	lsrs	r3, r3, #20
 8006a80:	051b      	lsls	r3, r3, #20
 8006a82:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006a86:	d976      	bls.n	8006b76 <_strtod_l+0x8de>
 8006a88:	696b      	ldr	r3, [r5, #20]
 8006a8a:	b913      	cbnz	r3, 8006a92 <_strtod_l+0x7fa>
 8006a8c:	692b      	ldr	r3, [r5, #16]
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	dd71      	ble.n	8006b76 <_strtod_l+0x8de>
 8006a92:	4629      	mov	r1, r5
 8006a94:	2201      	movs	r2, #1
 8006a96:	4620      	mov	r0, r4
 8006a98:	f001 ff36 	bl	8008908 <__lshift>
 8006a9c:	4631      	mov	r1, r6
 8006a9e:	4605      	mov	r5, r0
 8006aa0:	f001 ffa2 	bl	80089e8 <__mcmp>
 8006aa4:	2800      	cmp	r0, #0
 8006aa6:	dd66      	ble.n	8006b76 <_strtod_l+0x8de>
 8006aa8:	9904      	ldr	r1, [sp, #16]
 8006aaa:	4a53      	ldr	r2, [pc, #332]	; (8006bf8 <_strtod_l+0x960>)
 8006aac:	465b      	mov	r3, fp
 8006aae:	2900      	cmp	r1, #0
 8006ab0:	f000 8081 	beq.w	8006bb6 <_strtod_l+0x91e>
 8006ab4:	ea02 010b 	and.w	r1, r2, fp
 8006ab8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006abc:	dc7b      	bgt.n	8006bb6 <_strtod_l+0x91e>
 8006abe:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006ac2:	f77f aea9 	ble.w	8006818 <_strtod_l+0x580>
 8006ac6:	4b4d      	ldr	r3, [pc, #308]	; (8006bfc <_strtod_l+0x964>)
 8006ac8:	4650      	mov	r0, sl
 8006aca:	4659      	mov	r1, fp
 8006acc:	2200      	movs	r2, #0
 8006ace:	f7f9 fd9b 	bl	8000608 <__aeabi_dmul>
 8006ad2:	460b      	mov	r3, r1
 8006ad4:	4303      	orrs	r3, r0
 8006ad6:	bf08      	it	eq
 8006ad8:	2322      	moveq	r3, #34	; 0x22
 8006ada:	4682      	mov	sl, r0
 8006adc:	468b      	mov	fp, r1
 8006ade:	bf08      	it	eq
 8006ae0:	6023      	streq	r3, [r4, #0]
 8006ae2:	e62b      	b.n	800673c <_strtod_l+0x4a4>
 8006ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8006ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8006aec:	ea03 0a0a 	and.w	sl, r3, sl
 8006af0:	e6e3      	b.n	80068ba <_strtod_l+0x622>
 8006af2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8006af6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8006afa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8006afe:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8006b02:	fa01 f308 	lsl.w	r3, r1, r8
 8006b06:	9308      	str	r3, [sp, #32]
 8006b08:	910d      	str	r1, [sp, #52]	; 0x34
 8006b0a:	e746      	b.n	800699a <_strtod_l+0x702>
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	9308      	str	r3, [sp, #32]
 8006b10:	2301      	movs	r3, #1
 8006b12:	930d      	str	r3, [sp, #52]	; 0x34
 8006b14:	e741      	b.n	800699a <_strtod_l+0x702>
 8006b16:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006b18:	4642      	mov	r2, r8
 8006b1a:	4620      	mov	r0, r4
 8006b1c:	f001 fef4 	bl	8008908 <__lshift>
 8006b20:	9018      	str	r0, [sp, #96]	; 0x60
 8006b22:	2800      	cmp	r0, #0
 8006b24:	f47f af6b 	bne.w	80069fe <_strtod_l+0x766>
 8006b28:	e5fe      	b.n	8006728 <_strtod_l+0x490>
 8006b2a:	465f      	mov	r7, fp
 8006b2c:	d16e      	bne.n	8006c0c <_strtod_l+0x974>
 8006b2e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006b30:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006b34:	b342      	cbz	r2, 8006b88 <_strtod_l+0x8f0>
 8006b36:	4a32      	ldr	r2, [pc, #200]	; (8006c00 <_strtod_l+0x968>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d128      	bne.n	8006b8e <_strtod_l+0x8f6>
 8006b3c:	9b04      	ldr	r3, [sp, #16]
 8006b3e:	4651      	mov	r1, sl
 8006b40:	b1eb      	cbz	r3, 8006b7e <_strtod_l+0x8e6>
 8006b42:	4b2d      	ldr	r3, [pc, #180]	; (8006bf8 <_strtod_l+0x960>)
 8006b44:	403b      	ands	r3, r7
 8006b46:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006b4a:	f04f 32ff 	mov.w	r2, #4294967295
 8006b4e:	d819      	bhi.n	8006b84 <_strtod_l+0x8ec>
 8006b50:	0d1b      	lsrs	r3, r3, #20
 8006b52:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006b56:	fa02 f303 	lsl.w	r3, r2, r3
 8006b5a:	4299      	cmp	r1, r3
 8006b5c:	d117      	bne.n	8006b8e <_strtod_l+0x8f6>
 8006b5e:	4b29      	ldr	r3, [pc, #164]	; (8006c04 <_strtod_l+0x96c>)
 8006b60:	429f      	cmp	r7, r3
 8006b62:	d102      	bne.n	8006b6a <_strtod_l+0x8d2>
 8006b64:	3101      	adds	r1, #1
 8006b66:	f43f addf 	beq.w	8006728 <_strtod_l+0x490>
 8006b6a:	4b23      	ldr	r3, [pc, #140]	; (8006bf8 <_strtod_l+0x960>)
 8006b6c:	403b      	ands	r3, r7
 8006b6e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8006b72:	f04f 0a00 	mov.w	sl, #0
 8006b76:	9b04      	ldr	r3, [sp, #16]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d1a4      	bne.n	8006ac6 <_strtod_l+0x82e>
 8006b7c:	e5de      	b.n	800673c <_strtod_l+0x4a4>
 8006b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8006b82:	e7ea      	b.n	8006b5a <_strtod_l+0x8c2>
 8006b84:	4613      	mov	r3, r2
 8006b86:	e7e8      	b.n	8006b5a <_strtod_l+0x8c2>
 8006b88:	ea53 030a 	orrs.w	r3, r3, sl
 8006b8c:	d08c      	beq.n	8006aa8 <_strtod_l+0x810>
 8006b8e:	9b08      	ldr	r3, [sp, #32]
 8006b90:	b1db      	cbz	r3, 8006bca <_strtod_l+0x932>
 8006b92:	423b      	tst	r3, r7
 8006b94:	d0ef      	beq.n	8006b76 <_strtod_l+0x8de>
 8006b96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b98:	9a04      	ldr	r2, [sp, #16]
 8006b9a:	4650      	mov	r0, sl
 8006b9c:	4659      	mov	r1, fp
 8006b9e:	b1c3      	cbz	r3, 8006bd2 <_strtod_l+0x93a>
 8006ba0:	f7ff fb5d 	bl	800625e <sulp>
 8006ba4:	4602      	mov	r2, r0
 8006ba6:	460b      	mov	r3, r1
 8006ba8:	ec51 0b18 	vmov	r0, r1, d8
 8006bac:	f7f9 fb76 	bl	800029c <__adddf3>
 8006bb0:	4682      	mov	sl, r0
 8006bb2:	468b      	mov	fp, r1
 8006bb4:	e7df      	b.n	8006b76 <_strtod_l+0x8de>
 8006bb6:	4013      	ands	r3, r2
 8006bb8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006bbc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006bc0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006bc4:	f04f 3aff 	mov.w	sl, #4294967295
 8006bc8:	e7d5      	b.n	8006b76 <_strtod_l+0x8de>
 8006bca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006bcc:	ea13 0f0a 	tst.w	r3, sl
 8006bd0:	e7e0      	b.n	8006b94 <_strtod_l+0x8fc>
 8006bd2:	f7ff fb44 	bl	800625e <sulp>
 8006bd6:	4602      	mov	r2, r0
 8006bd8:	460b      	mov	r3, r1
 8006bda:	ec51 0b18 	vmov	r0, r1, d8
 8006bde:	f7f9 fb5b 	bl	8000298 <__aeabi_dsub>
 8006be2:	2200      	movs	r2, #0
 8006be4:	2300      	movs	r3, #0
 8006be6:	4682      	mov	sl, r0
 8006be8:	468b      	mov	fp, r1
 8006bea:	f7f9 ff75 	bl	8000ad8 <__aeabi_dcmpeq>
 8006bee:	2800      	cmp	r0, #0
 8006bf0:	d0c1      	beq.n	8006b76 <_strtod_l+0x8de>
 8006bf2:	e611      	b.n	8006818 <_strtod_l+0x580>
 8006bf4:	fffffc02 	.word	0xfffffc02
 8006bf8:	7ff00000 	.word	0x7ff00000
 8006bfc:	39500000 	.word	0x39500000
 8006c00:	000fffff 	.word	0x000fffff
 8006c04:	7fefffff 	.word	0x7fefffff
 8006c08:	0800a668 	.word	0x0800a668
 8006c0c:	4631      	mov	r1, r6
 8006c0e:	4628      	mov	r0, r5
 8006c10:	f002 f868 	bl	8008ce4 <__ratio>
 8006c14:	ec59 8b10 	vmov	r8, r9, d0
 8006c18:	ee10 0a10 	vmov	r0, s0
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006c22:	4649      	mov	r1, r9
 8006c24:	f7f9 ff6c 	bl	8000b00 <__aeabi_dcmple>
 8006c28:	2800      	cmp	r0, #0
 8006c2a:	d07a      	beq.n	8006d22 <_strtod_l+0xa8a>
 8006c2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d04a      	beq.n	8006cc8 <_strtod_l+0xa30>
 8006c32:	4b95      	ldr	r3, [pc, #596]	; (8006e88 <_strtod_l+0xbf0>)
 8006c34:	2200      	movs	r2, #0
 8006c36:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006c3a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8006e88 <_strtod_l+0xbf0>
 8006c3e:	f04f 0800 	mov.w	r8, #0
 8006c42:	4b92      	ldr	r3, [pc, #584]	; (8006e8c <_strtod_l+0xbf4>)
 8006c44:	403b      	ands	r3, r7
 8006c46:	930d      	str	r3, [sp, #52]	; 0x34
 8006c48:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006c4a:	4b91      	ldr	r3, [pc, #580]	; (8006e90 <_strtod_l+0xbf8>)
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	f040 80b0 	bne.w	8006db2 <_strtod_l+0xb1a>
 8006c52:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006c56:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8006c5a:	ec4b ab10 	vmov	d0, sl, fp
 8006c5e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006c62:	f001 ff67 	bl	8008b34 <__ulp>
 8006c66:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006c6a:	ec53 2b10 	vmov	r2, r3, d0
 8006c6e:	f7f9 fccb 	bl	8000608 <__aeabi_dmul>
 8006c72:	4652      	mov	r2, sl
 8006c74:	465b      	mov	r3, fp
 8006c76:	f7f9 fb11 	bl	800029c <__adddf3>
 8006c7a:	460b      	mov	r3, r1
 8006c7c:	4983      	ldr	r1, [pc, #524]	; (8006e8c <_strtod_l+0xbf4>)
 8006c7e:	4a85      	ldr	r2, [pc, #532]	; (8006e94 <_strtod_l+0xbfc>)
 8006c80:	4019      	ands	r1, r3
 8006c82:	4291      	cmp	r1, r2
 8006c84:	4682      	mov	sl, r0
 8006c86:	d960      	bls.n	8006d4a <_strtod_l+0xab2>
 8006c88:	ee18 3a90 	vmov	r3, s17
 8006c8c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d104      	bne.n	8006c9e <_strtod_l+0xa06>
 8006c94:	ee18 3a10 	vmov	r3, s16
 8006c98:	3301      	adds	r3, #1
 8006c9a:	f43f ad45 	beq.w	8006728 <_strtod_l+0x490>
 8006c9e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8006ea0 <_strtod_l+0xc08>
 8006ca2:	f04f 3aff 	mov.w	sl, #4294967295
 8006ca6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006ca8:	4620      	mov	r0, r4
 8006caa:	f001 fc11 	bl	80084d0 <_Bfree>
 8006cae:	9905      	ldr	r1, [sp, #20]
 8006cb0:	4620      	mov	r0, r4
 8006cb2:	f001 fc0d 	bl	80084d0 <_Bfree>
 8006cb6:	4631      	mov	r1, r6
 8006cb8:	4620      	mov	r0, r4
 8006cba:	f001 fc09 	bl	80084d0 <_Bfree>
 8006cbe:	4629      	mov	r1, r5
 8006cc0:	4620      	mov	r0, r4
 8006cc2:	f001 fc05 	bl	80084d0 <_Bfree>
 8006cc6:	e61a      	b.n	80068fe <_strtod_l+0x666>
 8006cc8:	f1ba 0f00 	cmp.w	sl, #0
 8006ccc:	d11b      	bne.n	8006d06 <_strtod_l+0xa6e>
 8006cce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006cd2:	b9f3      	cbnz	r3, 8006d12 <_strtod_l+0xa7a>
 8006cd4:	4b6c      	ldr	r3, [pc, #432]	; (8006e88 <_strtod_l+0xbf0>)
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	4640      	mov	r0, r8
 8006cda:	4649      	mov	r1, r9
 8006cdc:	f7f9 ff06 	bl	8000aec <__aeabi_dcmplt>
 8006ce0:	b9d0      	cbnz	r0, 8006d18 <_strtod_l+0xa80>
 8006ce2:	4640      	mov	r0, r8
 8006ce4:	4649      	mov	r1, r9
 8006ce6:	4b6c      	ldr	r3, [pc, #432]	; (8006e98 <_strtod_l+0xc00>)
 8006ce8:	2200      	movs	r2, #0
 8006cea:	f7f9 fc8d 	bl	8000608 <__aeabi_dmul>
 8006cee:	4680      	mov	r8, r0
 8006cf0:	4689      	mov	r9, r1
 8006cf2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006cf6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8006cfa:	9315      	str	r3, [sp, #84]	; 0x54
 8006cfc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006d00:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006d04:	e79d      	b.n	8006c42 <_strtod_l+0x9aa>
 8006d06:	f1ba 0f01 	cmp.w	sl, #1
 8006d0a:	d102      	bne.n	8006d12 <_strtod_l+0xa7a>
 8006d0c:	2f00      	cmp	r7, #0
 8006d0e:	f43f ad83 	beq.w	8006818 <_strtod_l+0x580>
 8006d12:	4b62      	ldr	r3, [pc, #392]	; (8006e9c <_strtod_l+0xc04>)
 8006d14:	2200      	movs	r2, #0
 8006d16:	e78e      	b.n	8006c36 <_strtod_l+0x99e>
 8006d18:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8006e98 <_strtod_l+0xc00>
 8006d1c:	f04f 0800 	mov.w	r8, #0
 8006d20:	e7e7      	b.n	8006cf2 <_strtod_l+0xa5a>
 8006d22:	4b5d      	ldr	r3, [pc, #372]	; (8006e98 <_strtod_l+0xc00>)
 8006d24:	4640      	mov	r0, r8
 8006d26:	4649      	mov	r1, r9
 8006d28:	2200      	movs	r2, #0
 8006d2a:	f7f9 fc6d 	bl	8000608 <__aeabi_dmul>
 8006d2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d30:	4680      	mov	r8, r0
 8006d32:	4689      	mov	r9, r1
 8006d34:	b933      	cbnz	r3, 8006d44 <_strtod_l+0xaac>
 8006d36:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006d3a:	900e      	str	r0, [sp, #56]	; 0x38
 8006d3c:	930f      	str	r3, [sp, #60]	; 0x3c
 8006d3e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006d42:	e7dd      	b.n	8006d00 <_strtod_l+0xa68>
 8006d44:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8006d48:	e7f9      	b.n	8006d3e <_strtod_l+0xaa6>
 8006d4a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8006d4e:	9b04      	ldr	r3, [sp, #16]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d1a8      	bne.n	8006ca6 <_strtod_l+0xa0e>
 8006d54:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006d58:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006d5a:	0d1b      	lsrs	r3, r3, #20
 8006d5c:	051b      	lsls	r3, r3, #20
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	d1a1      	bne.n	8006ca6 <_strtod_l+0xa0e>
 8006d62:	4640      	mov	r0, r8
 8006d64:	4649      	mov	r1, r9
 8006d66:	f7f9 ffaf 	bl	8000cc8 <__aeabi_d2lz>
 8006d6a:	f7f9 fc1f 	bl	80005ac <__aeabi_l2d>
 8006d6e:	4602      	mov	r2, r0
 8006d70:	460b      	mov	r3, r1
 8006d72:	4640      	mov	r0, r8
 8006d74:	4649      	mov	r1, r9
 8006d76:	f7f9 fa8f 	bl	8000298 <__aeabi_dsub>
 8006d7a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006d7c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006d80:	ea43 030a 	orr.w	r3, r3, sl
 8006d84:	4313      	orrs	r3, r2
 8006d86:	4680      	mov	r8, r0
 8006d88:	4689      	mov	r9, r1
 8006d8a:	d055      	beq.n	8006e38 <_strtod_l+0xba0>
 8006d8c:	a336      	add	r3, pc, #216	; (adr r3, 8006e68 <_strtod_l+0xbd0>)
 8006d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d92:	f7f9 feab 	bl	8000aec <__aeabi_dcmplt>
 8006d96:	2800      	cmp	r0, #0
 8006d98:	f47f acd0 	bne.w	800673c <_strtod_l+0x4a4>
 8006d9c:	a334      	add	r3, pc, #208	; (adr r3, 8006e70 <_strtod_l+0xbd8>)
 8006d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da2:	4640      	mov	r0, r8
 8006da4:	4649      	mov	r1, r9
 8006da6:	f7f9 febf 	bl	8000b28 <__aeabi_dcmpgt>
 8006daa:	2800      	cmp	r0, #0
 8006dac:	f43f af7b 	beq.w	8006ca6 <_strtod_l+0xa0e>
 8006db0:	e4c4      	b.n	800673c <_strtod_l+0x4a4>
 8006db2:	9b04      	ldr	r3, [sp, #16]
 8006db4:	b333      	cbz	r3, 8006e04 <_strtod_l+0xb6c>
 8006db6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006db8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006dbc:	d822      	bhi.n	8006e04 <_strtod_l+0xb6c>
 8006dbe:	a32e      	add	r3, pc, #184	; (adr r3, 8006e78 <_strtod_l+0xbe0>)
 8006dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dc4:	4640      	mov	r0, r8
 8006dc6:	4649      	mov	r1, r9
 8006dc8:	f7f9 fe9a 	bl	8000b00 <__aeabi_dcmple>
 8006dcc:	b1a0      	cbz	r0, 8006df8 <_strtod_l+0xb60>
 8006dce:	4649      	mov	r1, r9
 8006dd0:	4640      	mov	r0, r8
 8006dd2:	f7f9 fef1 	bl	8000bb8 <__aeabi_d2uiz>
 8006dd6:	2801      	cmp	r0, #1
 8006dd8:	bf38      	it	cc
 8006dda:	2001      	movcc	r0, #1
 8006ddc:	f7f9 fb9a 	bl	8000514 <__aeabi_ui2d>
 8006de0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006de2:	4680      	mov	r8, r0
 8006de4:	4689      	mov	r9, r1
 8006de6:	bb23      	cbnz	r3, 8006e32 <_strtod_l+0xb9a>
 8006de8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006dec:	9010      	str	r0, [sp, #64]	; 0x40
 8006dee:	9311      	str	r3, [sp, #68]	; 0x44
 8006df0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006df4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006df8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dfa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006dfc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006e00:	1a9b      	subs	r3, r3, r2
 8006e02:	9309      	str	r3, [sp, #36]	; 0x24
 8006e04:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006e08:	eeb0 0a48 	vmov.f32	s0, s16
 8006e0c:	eef0 0a68 	vmov.f32	s1, s17
 8006e10:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006e14:	f001 fe8e 	bl	8008b34 <__ulp>
 8006e18:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006e1c:	ec53 2b10 	vmov	r2, r3, d0
 8006e20:	f7f9 fbf2 	bl	8000608 <__aeabi_dmul>
 8006e24:	ec53 2b18 	vmov	r2, r3, d8
 8006e28:	f7f9 fa38 	bl	800029c <__adddf3>
 8006e2c:	4682      	mov	sl, r0
 8006e2e:	468b      	mov	fp, r1
 8006e30:	e78d      	b.n	8006d4e <_strtod_l+0xab6>
 8006e32:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8006e36:	e7db      	b.n	8006df0 <_strtod_l+0xb58>
 8006e38:	a311      	add	r3, pc, #68	; (adr r3, 8006e80 <_strtod_l+0xbe8>)
 8006e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e3e:	f7f9 fe55 	bl	8000aec <__aeabi_dcmplt>
 8006e42:	e7b2      	b.n	8006daa <_strtod_l+0xb12>
 8006e44:	2300      	movs	r3, #0
 8006e46:	930a      	str	r3, [sp, #40]	; 0x28
 8006e48:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006e4a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006e4c:	6013      	str	r3, [r2, #0]
 8006e4e:	f7ff ba6b 	b.w	8006328 <_strtod_l+0x90>
 8006e52:	2a65      	cmp	r2, #101	; 0x65
 8006e54:	f43f ab5f 	beq.w	8006516 <_strtod_l+0x27e>
 8006e58:	2a45      	cmp	r2, #69	; 0x45
 8006e5a:	f43f ab5c 	beq.w	8006516 <_strtod_l+0x27e>
 8006e5e:	2301      	movs	r3, #1
 8006e60:	f7ff bb94 	b.w	800658c <_strtod_l+0x2f4>
 8006e64:	f3af 8000 	nop.w
 8006e68:	94a03595 	.word	0x94a03595
 8006e6c:	3fdfffff 	.word	0x3fdfffff
 8006e70:	35afe535 	.word	0x35afe535
 8006e74:	3fe00000 	.word	0x3fe00000
 8006e78:	ffc00000 	.word	0xffc00000
 8006e7c:	41dfffff 	.word	0x41dfffff
 8006e80:	94a03595 	.word	0x94a03595
 8006e84:	3fcfffff 	.word	0x3fcfffff
 8006e88:	3ff00000 	.word	0x3ff00000
 8006e8c:	7ff00000 	.word	0x7ff00000
 8006e90:	7fe00000 	.word	0x7fe00000
 8006e94:	7c9fffff 	.word	0x7c9fffff
 8006e98:	3fe00000 	.word	0x3fe00000
 8006e9c:	bff00000 	.word	0xbff00000
 8006ea0:	7fefffff 	.word	0x7fefffff

08006ea4 <_strtod_r>:
 8006ea4:	4b01      	ldr	r3, [pc, #4]	; (8006eac <_strtod_r+0x8>)
 8006ea6:	f7ff b9f7 	b.w	8006298 <_strtod_l>
 8006eaa:	bf00      	nop
 8006eac:	20000080 	.word	0x20000080

08006eb0 <_strtol_l.constprop.0>:
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006eb6:	d001      	beq.n	8006ebc <_strtol_l.constprop.0+0xc>
 8006eb8:	2b24      	cmp	r3, #36	; 0x24
 8006eba:	d906      	bls.n	8006eca <_strtol_l.constprop.0+0x1a>
 8006ebc:	f7fe fa8c 	bl	80053d8 <__errno>
 8006ec0:	2316      	movs	r3, #22
 8006ec2:	6003      	str	r3, [r0, #0]
 8006ec4:	2000      	movs	r0, #0
 8006ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006eca:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006fb0 <_strtol_l.constprop.0+0x100>
 8006ece:	460d      	mov	r5, r1
 8006ed0:	462e      	mov	r6, r5
 8006ed2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006ed6:	f814 700c 	ldrb.w	r7, [r4, ip]
 8006eda:	f017 0708 	ands.w	r7, r7, #8
 8006ede:	d1f7      	bne.n	8006ed0 <_strtol_l.constprop.0+0x20>
 8006ee0:	2c2d      	cmp	r4, #45	; 0x2d
 8006ee2:	d132      	bne.n	8006f4a <_strtol_l.constprop.0+0x9a>
 8006ee4:	782c      	ldrb	r4, [r5, #0]
 8006ee6:	2701      	movs	r7, #1
 8006ee8:	1cb5      	adds	r5, r6, #2
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d05b      	beq.n	8006fa6 <_strtol_l.constprop.0+0xf6>
 8006eee:	2b10      	cmp	r3, #16
 8006ef0:	d109      	bne.n	8006f06 <_strtol_l.constprop.0+0x56>
 8006ef2:	2c30      	cmp	r4, #48	; 0x30
 8006ef4:	d107      	bne.n	8006f06 <_strtol_l.constprop.0+0x56>
 8006ef6:	782c      	ldrb	r4, [r5, #0]
 8006ef8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006efc:	2c58      	cmp	r4, #88	; 0x58
 8006efe:	d14d      	bne.n	8006f9c <_strtol_l.constprop.0+0xec>
 8006f00:	786c      	ldrb	r4, [r5, #1]
 8006f02:	2310      	movs	r3, #16
 8006f04:	3502      	adds	r5, #2
 8006f06:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006f0a:	f108 38ff 	add.w	r8, r8, #4294967295
 8006f0e:	f04f 0c00 	mov.w	ip, #0
 8006f12:	fbb8 f9f3 	udiv	r9, r8, r3
 8006f16:	4666      	mov	r6, ip
 8006f18:	fb03 8a19 	mls	sl, r3, r9, r8
 8006f1c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006f20:	f1be 0f09 	cmp.w	lr, #9
 8006f24:	d816      	bhi.n	8006f54 <_strtol_l.constprop.0+0xa4>
 8006f26:	4674      	mov	r4, lr
 8006f28:	42a3      	cmp	r3, r4
 8006f2a:	dd24      	ble.n	8006f76 <_strtol_l.constprop.0+0xc6>
 8006f2c:	f1bc 0f00 	cmp.w	ip, #0
 8006f30:	db1e      	blt.n	8006f70 <_strtol_l.constprop.0+0xc0>
 8006f32:	45b1      	cmp	r9, r6
 8006f34:	d31c      	bcc.n	8006f70 <_strtol_l.constprop.0+0xc0>
 8006f36:	d101      	bne.n	8006f3c <_strtol_l.constprop.0+0x8c>
 8006f38:	45a2      	cmp	sl, r4
 8006f3a:	db19      	blt.n	8006f70 <_strtol_l.constprop.0+0xc0>
 8006f3c:	fb06 4603 	mla	r6, r6, r3, r4
 8006f40:	f04f 0c01 	mov.w	ip, #1
 8006f44:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006f48:	e7e8      	b.n	8006f1c <_strtol_l.constprop.0+0x6c>
 8006f4a:	2c2b      	cmp	r4, #43	; 0x2b
 8006f4c:	bf04      	itt	eq
 8006f4e:	782c      	ldrbeq	r4, [r5, #0]
 8006f50:	1cb5      	addeq	r5, r6, #2
 8006f52:	e7ca      	b.n	8006eea <_strtol_l.constprop.0+0x3a>
 8006f54:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006f58:	f1be 0f19 	cmp.w	lr, #25
 8006f5c:	d801      	bhi.n	8006f62 <_strtol_l.constprop.0+0xb2>
 8006f5e:	3c37      	subs	r4, #55	; 0x37
 8006f60:	e7e2      	b.n	8006f28 <_strtol_l.constprop.0+0x78>
 8006f62:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8006f66:	f1be 0f19 	cmp.w	lr, #25
 8006f6a:	d804      	bhi.n	8006f76 <_strtol_l.constprop.0+0xc6>
 8006f6c:	3c57      	subs	r4, #87	; 0x57
 8006f6e:	e7db      	b.n	8006f28 <_strtol_l.constprop.0+0x78>
 8006f70:	f04f 3cff 	mov.w	ip, #4294967295
 8006f74:	e7e6      	b.n	8006f44 <_strtol_l.constprop.0+0x94>
 8006f76:	f1bc 0f00 	cmp.w	ip, #0
 8006f7a:	da05      	bge.n	8006f88 <_strtol_l.constprop.0+0xd8>
 8006f7c:	2322      	movs	r3, #34	; 0x22
 8006f7e:	6003      	str	r3, [r0, #0]
 8006f80:	4646      	mov	r6, r8
 8006f82:	b942      	cbnz	r2, 8006f96 <_strtol_l.constprop.0+0xe6>
 8006f84:	4630      	mov	r0, r6
 8006f86:	e79e      	b.n	8006ec6 <_strtol_l.constprop.0+0x16>
 8006f88:	b107      	cbz	r7, 8006f8c <_strtol_l.constprop.0+0xdc>
 8006f8a:	4276      	negs	r6, r6
 8006f8c:	2a00      	cmp	r2, #0
 8006f8e:	d0f9      	beq.n	8006f84 <_strtol_l.constprop.0+0xd4>
 8006f90:	f1bc 0f00 	cmp.w	ip, #0
 8006f94:	d000      	beq.n	8006f98 <_strtol_l.constprop.0+0xe8>
 8006f96:	1e69      	subs	r1, r5, #1
 8006f98:	6011      	str	r1, [r2, #0]
 8006f9a:	e7f3      	b.n	8006f84 <_strtol_l.constprop.0+0xd4>
 8006f9c:	2430      	movs	r4, #48	; 0x30
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d1b1      	bne.n	8006f06 <_strtol_l.constprop.0+0x56>
 8006fa2:	2308      	movs	r3, #8
 8006fa4:	e7af      	b.n	8006f06 <_strtol_l.constprop.0+0x56>
 8006fa6:	2c30      	cmp	r4, #48	; 0x30
 8006fa8:	d0a5      	beq.n	8006ef6 <_strtol_l.constprop.0+0x46>
 8006faa:	230a      	movs	r3, #10
 8006fac:	e7ab      	b.n	8006f06 <_strtol_l.constprop.0+0x56>
 8006fae:	bf00      	nop
 8006fb0:	0800a691 	.word	0x0800a691

08006fb4 <_strtol_r>:
 8006fb4:	f7ff bf7c 	b.w	8006eb0 <_strtol_l.constprop.0>

08006fb8 <_write_r>:
 8006fb8:	b538      	push	{r3, r4, r5, lr}
 8006fba:	4d07      	ldr	r5, [pc, #28]	; (8006fd8 <_write_r+0x20>)
 8006fbc:	4604      	mov	r4, r0
 8006fbe:	4608      	mov	r0, r1
 8006fc0:	4611      	mov	r1, r2
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	602a      	str	r2, [r5, #0]
 8006fc6:	461a      	mov	r2, r3
 8006fc8:	f7fa fed7 	bl	8001d7a <_write>
 8006fcc:	1c43      	adds	r3, r0, #1
 8006fce:	d102      	bne.n	8006fd6 <_write_r+0x1e>
 8006fd0:	682b      	ldr	r3, [r5, #0]
 8006fd2:	b103      	cbz	r3, 8006fd6 <_write_r+0x1e>
 8006fd4:	6023      	str	r3, [r4, #0]
 8006fd6:	bd38      	pop	{r3, r4, r5, pc}
 8006fd8:	200003c4 	.word	0x200003c4

08006fdc <_close_r>:
 8006fdc:	b538      	push	{r3, r4, r5, lr}
 8006fde:	4d06      	ldr	r5, [pc, #24]	; (8006ff8 <_close_r+0x1c>)
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	4604      	mov	r4, r0
 8006fe4:	4608      	mov	r0, r1
 8006fe6:	602b      	str	r3, [r5, #0]
 8006fe8:	f7fa fee3 	bl	8001db2 <_close>
 8006fec:	1c43      	adds	r3, r0, #1
 8006fee:	d102      	bne.n	8006ff6 <_close_r+0x1a>
 8006ff0:	682b      	ldr	r3, [r5, #0]
 8006ff2:	b103      	cbz	r3, 8006ff6 <_close_r+0x1a>
 8006ff4:	6023      	str	r3, [r4, #0]
 8006ff6:	bd38      	pop	{r3, r4, r5, pc}
 8006ff8:	200003c4 	.word	0x200003c4

08006ffc <quorem>:
 8006ffc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007000:	6903      	ldr	r3, [r0, #16]
 8007002:	690c      	ldr	r4, [r1, #16]
 8007004:	42a3      	cmp	r3, r4
 8007006:	4607      	mov	r7, r0
 8007008:	f2c0 8081 	blt.w	800710e <quorem+0x112>
 800700c:	3c01      	subs	r4, #1
 800700e:	f101 0814 	add.w	r8, r1, #20
 8007012:	f100 0514 	add.w	r5, r0, #20
 8007016:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800701a:	9301      	str	r3, [sp, #4]
 800701c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007020:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007024:	3301      	adds	r3, #1
 8007026:	429a      	cmp	r2, r3
 8007028:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800702c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007030:	fbb2 f6f3 	udiv	r6, r2, r3
 8007034:	d331      	bcc.n	800709a <quorem+0x9e>
 8007036:	f04f 0e00 	mov.w	lr, #0
 800703a:	4640      	mov	r0, r8
 800703c:	46ac      	mov	ip, r5
 800703e:	46f2      	mov	sl, lr
 8007040:	f850 2b04 	ldr.w	r2, [r0], #4
 8007044:	b293      	uxth	r3, r2
 8007046:	fb06 e303 	mla	r3, r6, r3, lr
 800704a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800704e:	b29b      	uxth	r3, r3
 8007050:	ebaa 0303 	sub.w	r3, sl, r3
 8007054:	f8dc a000 	ldr.w	sl, [ip]
 8007058:	0c12      	lsrs	r2, r2, #16
 800705a:	fa13 f38a 	uxtah	r3, r3, sl
 800705e:	fb06 e202 	mla	r2, r6, r2, lr
 8007062:	9300      	str	r3, [sp, #0]
 8007064:	9b00      	ldr	r3, [sp, #0]
 8007066:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800706a:	b292      	uxth	r2, r2
 800706c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007070:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007074:	f8bd 3000 	ldrh.w	r3, [sp]
 8007078:	4581      	cmp	r9, r0
 800707a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800707e:	f84c 3b04 	str.w	r3, [ip], #4
 8007082:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007086:	d2db      	bcs.n	8007040 <quorem+0x44>
 8007088:	f855 300b 	ldr.w	r3, [r5, fp]
 800708c:	b92b      	cbnz	r3, 800709a <quorem+0x9e>
 800708e:	9b01      	ldr	r3, [sp, #4]
 8007090:	3b04      	subs	r3, #4
 8007092:	429d      	cmp	r5, r3
 8007094:	461a      	mov	r2, r3
 8007096:	d32e      	bcc.n	80070f6 <quorem+0xfa>
 8007098:	613c      	str	r4, [r7, #16]
 800709a:	4638      	mov	r0, r7
 800709c:	f001 fca4 	bl	80089e8 <__mcmp>
 80070a0:	2800      	cmp	r0, #0
 80070a2:	db24      	blt.n	80070ee <quorem+0xf2>
 80070a4:	3601      	adds	r6, #1
 80070a6:	4628      	mov	r0, r5
 80070a8:	f04f 0c00 	mov.w	ip, #0
 80070ac:	f858 2b04 	ldr.w	r2, [r8], #4
 80070b0:	f8d0 e000 	ldr.w	lr, [r0]
 80070b4:	b293      	uxth	r3, r2
 80070b6:	ebac 0303 	sub.w	r3, ip, r3
 80070ba:	0c12      	lsrs	r2, r2, #16
 80070bc:	fa13 f38e 	uxtah	r3, r3, lr
 80070c0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80070c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80070ce:	45c1      	cmp	r9, r8
 80070d0:	f840 3b04 	str.w	r3, [r0], #4
 80070d4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80070d8:	d2e8      	bcs.n	80070ac <quorem+0xb0>
 80070da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80070de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80070e2:	b922      	cbnz	r2, 80070ee <quorem+0xf2>
 80070e4:	3b04      	subs	r3, #4
 80070e6:	429d      	cmp	r5, r3
 80070e8:	461a      	mov	r2, r3
 80070ea:	d30a      	bcc.n	8007102 <quorem+0x106>
 80070ec:	613c      	str	r4, [r7, #16]
 80070ee:	4630      	mov	r0, r6
 80070f0:	b003      	add	sp, #12
 80070f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070f6:	6812      	ldr	r2, [r2, #0]
 80070f8:	3b04      	subs	r3, #4
 80070fa:	2a00      	cmp	r2, #0
 80070fc:	d1cc      	bne.n	8007098 <quorem+0x9c>
 80070fe:	3c01      	subs	r4, #1
 8007100:	e7c7      	b.n	8007092 <quorem+0x96>
 8007102:	6812      	ldr	r2, [r2, #0]
 8007104:	3b04      	subs	r3, #4
 8007106:	2a00      	cmp	r2, #0
 8007108:	d1f0      	bne.n	80070ec <quorem+0xf0>
 800710a:	3c01      	subs	r4, #1
 800710c:	e7eb      	b.n	80070e6 <quorem+0xea>
 800710e:	2000      	movs	r0, #0
 8007110:	e7ee      	b.n	80070f0 <quorem+0xf4>
 8007112:	0000      	movs	r0, r0
 8007114:	0000      	movs	r0, r0
	...

08007118 <_dtoa_r>:
 8007118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800711c:	ed2d 8b04 	vpush	{d8-d9}
 8007120:	ec57 6b10 	vmov	r6, r7, d0
 8007124:	b093      	sub	sp, #76	; 0x4c
 8007126:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007128:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800712c:	9106      	str	r1, [sp, #24]
 800712e:	ee10 aa10 	vmov	sl, s0
 8007132:	4604      	mov	r4, r0
 8007134:	9209      	str	r2, [sp, #36]	; 0x24
 8007136:	930c      	str	r3, [sp, #48]	; 0x30
 8007138:	46bb      	mov	fp, r7
 800713a:	b975      	cbnz	r5, 800715a <_dtoa_r+0x42>
 800713c:	2010      	movs	r0, #16
 800713e:	f001 f95f 	bl	8008400 <malloc>
 8007142:	4602      	mov	r2, r0
 8007144:	6260      	str	r0, [r4, #36]	; 0x24
 8007146:	b920      	cbnz	r0, 8007152 <_dtoa_r+0x3a>
 8007148:	4ba7      	ldr	r3, [pc, #668]	; (80073e8 <_dtoa_r+0x2d0>)
 800714a:	21ea      	movs	r1, #234	; 0xea
 800714c:	48a7      	ldr	r0, [pc, #668]	; (80073ec <_dtoa_r+0x2d4>)
 800714e:	f002 fceb 	bl	8009b28 <__assert_func>
 8007152:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007156:	6005      	str	r5, [r0, #0]
 8007158:	60c5      	str	r5, [r0, #12]
 800715a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800715c:	6819      	ldr	r1, [r3, #0]
 800715e:	b151      	cbz	r1, 8007176 <_dtoa_r+0x5e>
 8007160:	685a      	ldr	r2, [r3, #4]
 8007162:	604a      	str	r2, [r1, #4]
 8007164:	2301      	movs	r3, #1
 8007166:	4093      	lsls	r3, r2
 8007168:	608b      	str	r3, [r1, #8]
 800716a:	4620      	mov	r0, r4
 800716c:	f001 f9b0 	bl	80084d0 <_Bfree>
 8007170:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007172:	2200      	movs	r2, #0
 8007174:	601a      	str	r2, [r3, #0]
 8007176:	1e3b      	subs	r3, r7, #0
 8007178:	bfaa      	itet	ge
 800717a:	2300      	movge	r3, #0
 800717c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007180:	f8c8 3000 	strge.w	r3, [r8]
 8007184:	4b9a      	ldr	r3, [pc, #616]	; (80073f0 <_dtoa_r+0x2d8>)
 8007186:	bfbc      	itt	lt
 8007188:	2201      	movlt	r2, #1
 800718a:	f8c8 2000 	strlt.w	r2, [r8]
 800718e:	ea33 030b 	bics.w	r3, r3, fp
 8007192:	d11b      	bne.n	80071cc <_dtoa_r+0xb4>
 8007194:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007196:	f242 730f 	movw	r3, #9999	; 0x270f
 800719a:	6013      	str	r3, [r2, #0]
 800719c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80071a0:	4333      	orrs	r3, r6
 80071a2:	f000 8592 	beq.w	8007cca <_dtoa_r+0xbb2>
 80071a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80071a8:	b963      	cbnz	r3, 80071c4 <_dtoa_r+0xac>
 80071aa:	4b92      	ldr	r3, [pc, #584]	; (80073f4 <_dtoa_r+0x2dc>)
 80071ac:	e022      	b.n	80071f4 <_dtoa_r+0xdc>
 80071ae:	4b92      	ldr	r3, [pc, #584]	; (80073f8 <_dtoa_r+0x2e0>)
 80071b0:	9301      	str	r3, [sp, #4]
 80071b2:	3308      	adds	r3, #8
 80071b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80071b6:	6013      	str	r3, [r2, #0]
 80071b8:	9801      	ldr	r0, [sp, #4]
 80071ba:	b013      	add	sp, #76	; 0x4c
 80071bc:	ecbd 8b04 	vpop	{d8-d9}
 80071c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071c4:	4b8b      	ldr	r3, [pc, #556]	; (80073f4 <_dtoa_r+0x2dc>)
 80071c6:	9301      	str	r3, [sp, #4]
 80071c8:	3303      	adds	r3, #3
 80071ca:	e7f3      	b.n	80071b4 <_dtoa_r+0x9c>
 80071cc:	2200      	movs	r2, #0
 80071ce:	2300      	movs	r3, #0
 80071d0:	4650      	mov	r0, sl
 80071d2:	4659      	mov	r1, fp
 80071d4:	f7f9 fc80 	bl	8000ad8 <__aeabi_dcmpeq>
 80071d8:	ec4b ab19 	vmov	d9, sl, fp
 80071dc:	4680      	mov	r8, r0
 80071de:	b158      	cbz	r0, 80071f8 <_dtoa_r+0xe0>
 80071e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80071e2:	2301      	movs	r3, #1
 80071e4:	6013      	str	r3, [r2, #0]
 80071e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	f000 856b 	beq.w	8007cc4 <_dtoa_r+0xbac>
 80071ee:	4883      	ldr	r0, [pc, #524]	; (80073fc <_dtoa_r+0x2e4>)
 80071f0:	6018      	str	r0, [r3, #0]
 80071f2:	1e43      	subs	r3, r0, #1
 80071f4:	9301      	str	r3, [sp, #4]
 80071f6:	e7df      	b.n	80071b8 <_dtoa_r+0xa0>
 80071f8:	ec4b ab10 	vmov	d0, sl, fp
 80071fc:	aa10      	add	r2, sp, #64	; 0x40
 80071fe:	a911      	add	r1, sp, #68	; 0x44
 8007200:	4620      	mov	r0, r4
 8007202:	f001 fd13 	bl	8008c2c <__d2b>
 8007206:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800720a:	ee08 0a10 	vmov	s16, r0
 800720e:	2d00      	cmp	r5, #0
 8007210:	f000 8084 	beq.w	800731c <_dtoa_r+0x204>
 8007214:	ee19 3a90 	vmov	r3, s19
 8007218:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800721c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007220:	4656      	mov	r6, sl
 8007222:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007226:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800722a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800722e:	4b74      	ldr	r3, [pc, #464]	; (8007400 <_dtoa_r+0x2e8>)
 8007230:	2200      	movs	r2, #0
 8007232:	4630      	mov	r0, r6
 8007234:	4639      	mov	r1, r7
 8007236:	f7f9 f82f 	bl	8000298 <__aeabi_dsub>
 800723a:	a365      	add	r3, pc, #404	; (adr r3, 80073d0 <_dtoa_r+0x2b8>)
 800723c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007240:	f7f9 f9e2 	bl	8000608 <__aeabi_dmul>
 8007244:	a364      	add	r3, pc, #400	; (adr r3, 80073d8 <_dtoa_r+0x2c0>)
 8007246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800724a:	f7f9 f827 	bl	800029c <__adddf3>
 800724e:	4606      	mov	r6, r0
 8007250:	4628      	mov	r0, r5
 8007252:	460f      	mov	r7, r1
 8007254:	f7f9 f96e 	bl	8000534 <__aeabi_i2d>
 8007258:	a361      	add	r3, pc, #388	; (adr r3, 80073e0 <_dtoa_r+0x2c8>)
 800725a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800725e:	f7f9 f9d3 	bl	8000608 <__aeabi_dmul>
 8007262:	4602      	mov	r2, r0
 8007264:	460b      	mov	r3, r1
 8007266:	4630      	mov	r0, r6
 8007268:	4639      	mov	r1, r7
 800726a:	f7f9 f817 	bl	800029c <__adddf3>
 800726e:	4606      	mov	r6, r0
 8007270:	460f      	mov	r7, r1
 8007272:	f7f9 fc79 	bl	8000b68 <__aeabi_d2iz>
 8007276:	2200      	movs	r2, #0
 8007278:	9000      	str	r0, [sp, #0]
 800727a:	2300      	movs	r3, #0
 800727c:	4630      	mov	r0, r6
 800727e:	4639      	mov	r1, r7
 8007280:	f7f9 fc34 	bl	8000aec <__aeabi_dcmplt>
 8007284:	b150      	cbz	r0, 800729c <_dtoa_r+0x184>
 8007286:	9800      	ldr	r0, [sp, #0]
 8007288:	f7f9 f954 	bl	8000534 <__aeabi_i2d>
 800728c:	4632      	mov	r2, r6
 800728e:	463b      	mov	r3, r7
 8007290:	f7f9 fc22 	bl	8000ad8 <__aeabi_dcmpeq>
 8007294:	b910      	cbnz	r0, 800729c <_dtoa_r+0x184>
 8007296:	9b00      	ldr	r3, [sp, #0]
 8007298:	3b01      	subs	r3, #1
 800729a:	9300      	str	r3, [sp, #0]
 800729c:	9b00      	ldr	r3, [sp, #0]
 800729e:	2b16      	cmp	r3, #22
 80072a0:	d85a      	bhi.n	8007358 <_dtoa_r+0x240>
 80072a2:	9a00      	ldr	r2, [sp, #0]
 80072a4:	4b57      	ldr	r3, [pc, #348]	; (8007404 <_dtoa_r+0x2ec>)
 80072a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80072aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ae:	ec51 0b19 	vmov	r0, r1, d9
 80072b2:	f7f9 fc1b 	bl	8000aec <__aeabi_dcmplt>
 80072b6:	2800      	cmp	r0, #0
 80072b8:	d050      	beq.n	800735c <_dtoa_r+0x244>
 80072ba:	9b00      	ldr	r3, [sp, #0]
 80072bc:	3b01      	subs	r3, #1
 80072be:	9300      	str	r3, [sp, #0]
 80072c0:	2300      	movs	r3, #0
 80072c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80072c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80072c6:	1b5d      	subs	r5, r3, r5
 80072c8:	1e6b      	subs	r3, r5, #1
 80072ca:	9305      	str	r3, [sp, #20]
 80072cc:	bf45      	ittet	mi
 80072ce:	f1c5 0301 	rsbmi	r3, r5, #1
 80072d2:	9304      	strmi	r3, [sp, #16]
 80072d4:	2300      	movpl	r3, #0
 80072d6:	2300      	movmi	r3, #0
 80072d8:	bf4c      	ite	mi
 80072da:	9305      	strmi	r3, [sp, #20]
 80072dc:	9304      	strpl	r3, [sp, #16]
 80072de:	9b00      	ldr	r3, [sp, #0]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	db3d      	blt.n	8007360 <_dtoa_r+0x248>
 80072e4:	9b05      	ldr	r3, [sp, #20]
 80072e6:	9a00      	ldr	r2, [sp, #0]
 80072e8:	920a      	str	r2, [sp, #40]	; 0x28
 80072ea:	4413      	add	r3, r2
 80072ec:	9305      	str	r3, [sp, #20]
 80072ee:	2300      	movs	r3, #0
 80072f0:	9307      	str	r3, [sp, #28]
 80072f2:	9b06      	ldr	r3, [sp, #24]
 80072f4:	2b09      	cmp	r3, #9
 80072f6:	f200 8089 	bhi.w	800740c <_dtoa_r+0x2f4>
 80072fa:	2b05      	cmp	r3, #5
 80072fc:	bfc4      	itt	gt
 80072fe:	3b04      	subgt	r3, #4
 8007300:	9306      	strgt	r3, [sp, #24]
 8007302:	9b06      	ldr	r3, [sp, #24]
 8007304:	f1a3 0302 	sub.w	r3, r3, #2
 8007308:	bfcc      	ite	gt
 800730a:	2500      	movgt	r5, #0
 800730c:	2501      	movle	r5, #1
 800730e:	2b03      	cmp	r3, #3
 8007310:	f200 8087 	bhi.w	8007422 <_dtoa_r+0x30a>
 8007314:	e8df f003 	tbb	[pc, r3]
 8007318:	59383a2d 	.word	0x59383a2d
 800731c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007320:	441d      	add	r5, r3
 8007322:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007326:	2b20      	cmp	r3, #32
 8007328:	bfc1      	itttt	gt
 800732a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800732e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007332:	fa0b f303 	lslgt.w	r3, fp, r3
 8007336:	fa26 f000 	lsrgt.w	r0, r6, r0
 800733a:	bfda      	itte	le
 800733c:	f1c3 0320 	rsble	r3, r3, #32
 8007340:	fa06 f003 	lslle.w	r0, r6, r3
 8007344:	4318      	orrgt	r0, r3
 8007346:	f7f9 f8e5 	bl	8000514 <__aeabi_ui2d>
 800734a:	2301      	movs	r3, #1
 800734c:	4606      	mov	r6, r0
 800734e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007352:	3d01      	subs	r5, #1
 8007354:	930e      	str	r3, [sp, #56]	; 0x38
 8007356:	e76a      	b.n	800722e <_dtoa_r+0x116>
 8007358:	2301      	movs	r3, #1
 800735a:	e7b2      	b.n	80072c2 <_dtoa_r+0x1aa>
 800735c:	900b      	str	r0, [sp, #44]	; 0x2c
 800735e:	e7b1      	b.n	80072c4 <_dtoa_r+0x1ac>
 8007360:	9b04      	ldr	r3, [sp, #16]
 8007362:	9a00      	ldr	r2, [sp, #0]
 8007364:	1a9b      	subs	r3, r3, r2
 8007366:	9304      	str	r3, [sp, #16]
 8007368:	4253      	negs	r3, r2
 800736a:	9307      	str	r3, [sp, #28]
 800736c:	2300      	movs	r3, #0
 800736e:	930a      	str	r3, [sp, #40]	; 0x28
 8007370:	e7bf      	b.n	80072f2 <_dtoa_r+0x1da>
 8007372:	2300      	movs	r3, #0
 8007374:	9308      	str	r3, [sp, #32]
 8007376:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007378:	2b00      	cmp	r3, #0
 800737a:	dc55      	bgt.n	8007428 <_dtoa_r+0x310>
 800737c:	2301      	movs	r3, #1
 800737e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007382:	461a      	mov	r2, r3
 8007384:	9209      	str	r2, [sp, #36]	; 0x24
 8007386:	e00c      	b.n	80073a2 <_dtoa_r+0x28a>
 8007388:	2301      	movs	r3, #1
 800738a:	e7f3      	b.n	8007374 <_dtoa_r+0x25c>
 800738c:	2300      	movs	r3, #0
 800738e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007390:	9308      	str	r3, [sp, #32]
 8007392:	9b00      	ldr	r3, [sp, #0]
 8007394:	4413      	add	r3, r2
 8007396:	9302      	str	r3, [sp, #8]
 8007398:	3301      	adds	r3, #1
 800739a:	2b01      	cmp	r3, #1
 800739c:	9303      	str	r3, [sp, #12]
 800739e:	bfb8      	it	lt
 80073a0:	2301      	movlt	r3, #1
 80073a2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80073a4:	2200      	movs	r2, #0
 80073a6:	6042      	str	r2, [r0, #4]
 80073a8:	2204      	movs	r2, #4
 80073aa:	f102 0614 	add.w	r6, r2, #20
 80073ae:	429e      	cmp	r6, r3
 80073b0:	6841      	ldr	r1, [r0, #4]
 80073b2:	d93d      	bls.n	8007430 <_dtoa_r+0x318>
 80073b4:	4620      	mov	r0, r4
 80073b6:	f001 f84b 	bl	8008450 <_Balloc>
 80073ba:	9001      	str	r0, [sp, #4]
 80073bc:	2800      	cmp	r0, #0
 80073be:	d13b      	bne.n	8007438 <_dtoa_r+0x320>
 80073c0:	4b11      	ldr	r3, [pc, #68]	; (8007408 <_dtoa_r+0x2f0>)
 80073c2:	4602      	mov	r2, r0
 80073c4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80073c8:	e6c0      	b.n	800714c <_dtoa_r+0x34>
 80073ca:	2301      	movs	r3, #1
 80073cc:	e7df      	b.n	800738e <_dtoa_r+0x276>
 80073ce:	bf00      	nop
 80073d0:	636f4361 	.word	0x636f4361
 80073d4:	3fd287a7 	.word	0x3fd287a7
 80073d8:	8b60c8b3 	.word	0x8b60c8b3
 80073dc:	3fc68a28 	.word	0x3fc68a28
 80073e0:	509f79fb 	.word	0x509f79fb
 80073e4:	3fd34413 	.word	0x3fd34413
 80073e8:	0800a79e 	.word	0x0800a79e
 80073ec:	0800a7b5 	.word	0x0800a7b5
 80073f0:	7ff00000 	.word	0x7ff00000
 80073f4:	0800a79a 	.word	0x0800a79a
 80073f8:	0800a791 	.word	0x0800a791
 80073fc:	0800aa0a 	.word	0x0800aa0a
 8007400:	3ff80000 	.word	0x3ff80000
 8007404:	0800a920 	.word	0x0800a920
 8007408:	0800a810 	.word	0x0800a810
 800740c:	2501      	movs	r5, #1
 800740e:	2300      	movs	r3, #0
 8007410:	9306      	str	r3, [sp, #24]
 8007412:	9508      	str	r5, [sp, #32]
 8007414:	f04f 33ff 	mov.w	r3, #4294967295
 8007418:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800741c:	2200      	movs	r2, #0
 800741e:	2312      	movs	r3, #18
 8007420:	e7b0      	b.n	8007384 <_dtoa_r+0x26c>
 8007422:	2301      	movs	r3, #1
 8007424:	9308      	str	r3, [sp, #32]
 8007426:	e7f5      	b.n	8007414 <_dtoa_r+0x2fc>
 8007428:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800742a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800742e:	e7b8      	b.n	80073a2 <_dtoa_r+0x28a>
 8007430:	3101      	adds	r1, #1
 8007432:	6041      	str	r1, [r0, #4]
 8007434:	0052      	lsls	r2, r2, #1
 8007436:	e7b8      	b.n	80073aa <_dtoa_r+0x292>
 8007438:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800743a:	9a01      	ldr	r2, [sp, #4]
 800743c:	601a      	str	r2, [r3, #0]
 800743e:	9b03      	ldr	r3, [sp, #12]
 8007440:	2b0e      	cmp	r3, #14
 8007442:	f200 809d 	bhi.w	8007580 <_dtoa_r+0x468>
 8007446:	2d00      	cmp	r5, #0
 8007448:	f000 809a 	beq.w	8007580 <_dtoa_r+0x468>
 800744c:	9b00      	ldr	r3, [sp, #0]
 800744e:	2b00      	cmp	r3, #0
 8007450:	dd32      	ble.n	80074b8 <_dtoa_r+0x3a0>
 8007452:	4ab7      	ldr	r2, [pc, #732]	; (8007730 <_dtoa_r+0x618>)
 8007454:	f003 030f 	and.w	r3, r3, #15
 8007458:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800745c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007460:	9b00      	ldr	r3, [sp, #0]
 8007462:	05d8      	lsls	r0, r3, #23
 8007464:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007468:	d516      	bpl.n	8007498 <_dtoa_r+0x380>
 800746a:	4bb2      	ldr	r3, [pc, #712]	; (8007734 <_dtoa_r+0x61c>)
 800746c:	ec51 0b19 	vmov	r0, r1, d9
 8007470:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007474:	f7f9 f9f2 	bl	800085c <__aeabi_ddiv>
 8007478:	f007 070f 	and.w	r7, r7, #15
 800747c:	4682      	mov	sl, r0
 800747e:	468b      	mov	fp, r1
 8007480:	2503      	movs	r5, #3
 8007482:	4eac      	ldr	r6, [pc, #688]	; (8007734 <_dtoa_r+0x61c>)
 8007484:	b957      	cbnz	r7, 800749c <_dtoa_r+0x384>
 8007486:	4642      	mov	r2, r8
 8007488:	464b      	mov	r3, r9
 800748a:	4650      	mov	r0, sl
 800748c:	4659      	mov	r1, fp
 800748e:	f7f9 f9e5 	bl	800085c <__aeabi_ddiv>
 8007492:	4682      	mov	sl, r0
 8007494:	468b      	mov	fp, r1
 8007496:	e028      	b.n	80074ea <_dtoa_r+0x3d2>
 8007498:	2502      	movs	r5, #2
 800749a:	e7f2      	b.n	8007482 <_dtoa_r+0x36a>
 800749c:	07f9      	lsls	r1, r7, #31
 800749e:	d508      	bpl.n	80074b2 <_dtoa_r+0x39a>
 80074a0:	4640      	mov	r0, r8
 80074a2:	4649      	mov	r1, r9
 80074a4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80074a8:	f7f9 f8ae 	bl	8000608 <__aeabi_dmul>
 80074ac:	3501      	adds	r5, #1
 80074ae:	4680      	mov	r8, r0
 80074b0:	4689      	mov	r9, r1
 80074b2:	107f      	asrs	r7, r7, #1
 80074b4:	3608      	adds	r6, #8
 80074b6:	e7e5      	b.n	8007484 <_dtoa_r+0x36c>
 80074b8:	f000 809b 	beq.w	80075f2 <_dtoa_r+0x4da>
 80074bc:	9b00      	ldr	r3, [sp, #0]
 80074be:	4f9d      	ldr	r7, [pc, #628]	; (8007734 <_dtoa_r+0x61c>)
 80074c0:	425e      	negs	r6, r3
 80074c2:	4b9b      	ldr	r3, [pc, #620]	; (8007730 <_dtoa_r+0x618>)
 80074c4:	f006 020f 	and.w	r2, r6, #15
 80074c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80074cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d0:	ec51 0b19 	vmov	r0, r1, d9
 80074d4:	f7f9 f898 	bl	8000608 <__aeabi_dmul>
 80074d8:	1136      	asrs	r6, r6, #4
 80074da:	4682      	mov	sl, r0
 80074dc:	468b      	mov	fp, r1
 80074de:	2300      	movs	r3, #0
 80074e0:	2502      	movs	r5, #2
 80074e2:	2e00      	cmp	r6, #0
 80074e4:	d17a      	bne.n	80075dc <_dtoa_r+0x4c4>
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d1d3      	bne.n	8007492 <_dtoa_r+0x37a>
 80074ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	f000 8082 	beq.w	80075f6 <_dtoa_r+0x4de>
 80074f2:	4b91      	ldr	r3, [pc, #580]	; (8007738 <_dtoa_r+0x620>)
 80074f4:	2200      	movs	r2, #0
 80074f6:	4650      	mov	r0, sl
 80074f8:	4659      	mov	r1, fp
 80074fa:	f7f9 faf7 	bl	8000aec <__aeabi_dcmplt>
 80074fe:	2800      	cmp	r0, #0
 8007500:	d079      	beq.n	80075f6 <_dtoa_r+0x4de>
 8007502:	9b03      	ldr	r3, [sp, #12]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d076      	beq.n	80075f6 <_dtoa_r+0x4de>
 8007508:	9b02      	ldr	r3, [sp, #8]
 800750a:	2b00      	cmp	r3, #0
 800750c:	dd36      	ble.n	800757c <_dtoa_r+0x464>
 800750e:	9b00      	ldr	r3, [sp, #0]
 8007510:	4650      	mov	r0, sl
 8007512:	4659      	mov	r1, fp
 8007514:	1e5f      	subs	r7, r3, #1
 8007516:	2200      	movs	r2, #0
 8007518:	4b88      	ldr	r3, [pc, #544]	; (800773c <_dtoa_r+0x624>)
 800751a:	f7f9 f875 	bl	8000608 <__aeabi_dmul>
 800751e:	9e02      	ldr	r6, [sp, #8]
 8007520:	4682      	mov	sl, r0
 8007522:	468b      	mov	fp, r1
 8007524:	3501      	adds	r5, #1
 8007526:	4628      	mov	r0, r5
 8007528:	f7f9 f804 	bl	8000534 <__aeabi_i2d>
 800752c:	4652      	mov	r2, sl
 800752e:	465b      	mov	r3, fp
 8007530:	f7f9 f86a 	bl	8000608 <__aeabi_dmul>
 8007534:	4b82      	ldr	r3, [pc, #520]	; (8007740 <_dtoa_r+0x628>)
 8007536:	2200      	movs	r2, #0
 8007538:	f7f8 feb0 	bl	800029c <__adddf3>
 800753c:	46d0      	mov	r8, sl
 800753e:	46d9      	mov	r9, fp
 8007540:	4682      	mov	sl, r0
 8007542:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007546:	2e00      	cmp	r6, #0
 8007548:	d158      	bne.n	80075fc <_dtoa_r+0x4e4>
 800754a:	4b7e      	ldr	r3, [pc, #504]	; (8007744 <_dtoa_r+0x62c>)
 800754c:	2200      	movs	r2, #0
 800754e:	4640      	mov	r0, r8
 8007550:	4649      	mov	r1, r9
 8007552:	f7f8 fea1 	bl	8000298 <__aeabi_dsub>
 8007556:	4652      	mov	r2, sl
 8007558:	465b      	mov	r3, fp
 800755a:	4680      	mov	r8, r0
 800755c:	4689      	mov	r9, r1
 800755e:	f7f9 fae3 	bl	8000b28 <__aeabi_dcmpgt>
 8007562:	2800      	cmp	r0, #0
 8007564:	f040 8295 	bne.w	8007a92 <_dtoa_r+0x97a>
 8007568:	4652      	mov	r2, sl
 800756a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800756e:	4640      	mov	r0, r8
 8007570:	4649      	mov	r1, r9
 8007572:	f7f9 fabb 	bl	8000aec <__aeabi_dcmplt>
 8007576:	2800      	cmp	r0, #0
 8007578:	f040 8289 	bne.w	8007a8e <_dtoa_r+0x976>
 800757c:	ec5b ab19 	vmov	sl, fp, d9
 8007580:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007582:	2b00      	cmp	r3, #0
 8007584:	f2c0 8148 	blt.w	8007818 <_dtoa_r+0x700>
 8007588:	9a00      	ldr	r2, [sp, #0]
 800758a:	2a0e      	cmp	r2, #14
 800758c:	f300 8144 	bgt.w	8007818 <_dtoa_r+0x700>
 8007590:	4b67      	ldr	r3, [pc, #412]	; (8007730 <_dtoa_r+0x618>)
 8007592:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007596:	e9d3 8900 	ldrd	r8, r9, [r3]
 800759a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800759c:	2b00      	cmp	r3, #0
 800759e:	f280 80d5 	bge.w	800774c <_dtoa_r+0x634>
 80075a2:	9b03      	ldr	r3, [sp, #12]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	f300 80d1 	bgt.w	800774c <_dtoa_r+0x634>
 80075aa:	f040 826f 	bne.w	8007a8c <_dtoa_r+0x974>
 80075ae:	4b65      	ldr	r3, [pc, #404]	; (8007744 <_dtoa_r+0x62c>)
 80075b0:	2200      	movs	r2, #0
 80075b2:	4640      	mov	r0, r8
 80075b4:	4649      	mov	r1, r9
 80075b6:	f7f9 f827 	bl	8000608 <__aeabi_dmul>
 80075ba:	4652      	mov	r2, sl
 80075bc:	465b      	mov	r3, fp
 80075be:	f7f9 faa9 	bl	8000b14 <__aeabi_dcmpge>
 80075c2:	9e03      	ldr	r6, [sp, #12]
 80075c4:	4637      	mov	r7, r6
 80075c6:	2800      	cmp	r0, #0
 80075c8:	f040 8245 	bne.w	8007a56 <_dtoa_r+0x93e>
 80075cc:	9d01      	ldr	r5, [sp, #4]
 80075ce:	2331      	movs	r3, #49	; 0x31
 80075d0:	f805 3b01 	strb.w	r3, [r5], #1
 80075d4:	9b00      	ldr	r3, [sp, #0]
 80075d6:	3301      	adds	r3, #1
 80075d8:	9300      	str	r3, [sp, #0]
 80075da:	e240      	b.n	8007a5e <_dtoa_r+0x946>
 80075dc:	07f2      	lsls	r2, r6, #31
 80075de:	d505      	bpl.n	80075ec <_dtoa_r+0x4d4>
 80075e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075e4:	f7f9 f810 	bl	8000608 <__aeabi_dmul>
 80075e8:	3501      	adds	r5, #1
 80075ea:	2301      	movs	r3, #1
 80075ec:	1076      	asrs	r6, r6, #1
 80075ee:	3708      	adds	r7, #8
 80075f0:	e777      	b.n	80074e2 <_dtoa_r+0x3ca>
 80075f2:	2502      	movs	r5, #2
 80075f4:	e779      	b.n	80074ea <_dtoa_r+0x3d2>
 80075f6:	9f00      	ldr	r7, [sp, #0]
 80075f8:	9e03      	ldr	r6, [sp, #12]
 80075fa:	e794      	b.n	8007526 <_dtoa_r+0x40e>
 80075fc:	9901      	ldr	r1, [sp, #4]
 80075fe:	4b4c      	ldr	r3, [pc, #304]	; (8007730 <_dtoa_r+0x618>)
 8007600:	4431      	add	r1, r6
 8007602:	910d      	str	r1, [sp, #52]	; 0x34
 8007604:	9908      	ldr	r1, [sp, #32]
 8007606:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800760a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800760e:	2900      	cmp	r1, #0
 8007610:	d043      	beq.n	800769a <_dtoa_r+0x582>
 8007612:	494d      	ldr	r1, [pc, #308]	; (8007748 <_dtoa_r+0x630>)
 8007614:	2000      	movs	r0, #0
 8007616:	f7f9 f921 	bl	800085c <__aeabi_ddiv>
 800761a:	4652      	mov	r2, sl
 800761c:	465b      	mov	r3, fp
 800761e:	f7f8 fe3b 	bl	8000298 <__aeabi_dsub>
 8007622:	9d01      	ldr	r5, [sp, #4]
 8007624:	4682      	mov	sl, r0
 8007626:	468b      	mov	fp, r1
 8007628:	4649      	mov	r1, r9
 800762a:	4640      	mov	r0, r8
 800762c:	f7f9 fa9c 	bl	8000b68 <__aeabi_d2iz>
 8007630:	4606      	mov	r6, r0
 8007632:	f7f8 ff7f 	bl	8000534 <__aeabi_i2d>
 8007636:	4602      	mov	r2, r0
 8007638:	460b      	mov	r3, r1
 800763a:	4640      	mov	r0, r8
 800763c:	4649      	mov	r1, r9
 800763e:	f7f8 fe2b 	bl	8000298 <__aeabi_dsub>
 8007642:	3630      	adds	r6, #48	; 0x30
 8007644:	f805 6b01 	strb.w	r6, [r5], #1
 8007648:	4652      	mov	r2, sl
 800764a:	465b      	mov	r3, fp
 800764c:	4680      	mov	r8, r0
 800764e:	4689      	mov	r9, r1
 8007650:	f7f9 fa4c 	bl	8000aec <__aeabi_dcmplt>
 8007654:	2800      	cmp	r0, #0
 8007656:	d163      	bne.n	8007720 <_dtoa_r+0x608>
 8007658:	4642      	mov	r2, r8
 800765a:	464b      	mov	r3, r9
 800765c:	4936      	ldr	r1, [pc, #216]	; (8007738 <_dtoa_r+0x620>)
 800765e:	2000      	movs	r0, #0
 8007660:	f7f8 fe1a 	bl	8000298 <__aeabi_dsub>
 8007664:	4652      	mov	r2, sl
 8007666:	465b      	mov	r3, fp
 8007668:	f7f9 fa40 	bl	8000aec <__aeabi_dcmplt>
 800766c:	2800      	cmp	r0, #0
 800766e:	f040 80b5 	bne.w	80077dc <_dtoa_r+0x6c4>
 8007672:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007674:	429d      	cmp	r5, r3
 8007676:	d081      	beq.n	800757c <_dtoa_r+0x464>
 8007678:	4b30      	ldr	r3, [pc, #192]	; (800773c <_dtoa_r+0x624>)
 800767a:	2200      	movs	r2, #0
 800767c:	4650      	mov	r0, sl
 800767e:	4659      	mov	r1, fp
 8007680:	f7f8 ffc2 	bl	8000608 <__aeabi_dmul>
 8007684:	4b2d      	ldr	r3, [pc, #180]	; (800773c <_dtoa_r+0x624>)
 8007686:	4682      	mov	sl, r0
 8007688:	468b      	mov	fp, r1
 800768a:	4640      	mov	r0, r8
 800768c:	4649      	mov	r1, r9
 800768e:	2200      	movs	r2, #0
 8007690:	f7f8 ffba 	bl	8000608 <__aeabi_dmul>
 8007694:	4680      	mov	r8, r0
 8007696:	4689      	mov	r9, r1
 8007698:	e7c6      	b.n	8007628 <_dtoa_r+0x510>
 800769a:	4650      	mov	r0, sl
 800769c:	4659      	mov	r1, fp
 800769e:	f7f8 ffb3 	bl	8000608 <__aeabi_dmul>
 80076a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80076a4:	9d01      	ldr	r5, [sp, #4]
 80076a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80076a8:	4682      	mov	sl, r0
 80076aa:	468b      	mov	fp, r1
 80076ac:	4649      	mov	r1, r9
 80076ae:	4640      	mov	r0, r8
 80076b0:	f7f9 fa5a 	bl	8000b68 <__aeabi_d2iz>
 80076b4:	4606      	mov	r6, r0
 80076b6:	f7f8 ff3d 	bl	8000534 <__aeabi_i2d>
 80076ba:	3630      	adds	r6, #48	; 0x30
 80076bc:	4602      	mov	r2, r0
 80076be:	460b      	mov	r3, r1
 80076c0:	4640      	mov	r0, r8
 80076c2:	4649      	mov	r1, r9
 80076c4:	f7f8 fde8 	bl	8000298 <__aeabi_dsub>
 80076c8:	f805 6b01 	strb.w	r6, [r5], #1
 80076cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80076ce:	429d      	cmp	r5, r3
 80076d0:	4680      	mov	r8, r0
 80076d2:	4689      	mov	r9, r1
 80076d4:	f04f 0200 	mov.w	r2, #0
 80076d8:	d124      	bne.n	8007724 <_dtoa_r+0x60c>
 80076da:	4b1b      	ldr	r3, [pc, #108]	; (8007748 <_dtoa_r+0x630>)
 80076dc:	4650      	mov	r0, sl
 80076de:	4659      	mov	r1, fp
 80076e0:	f7f8 fddc 	bl	800029c <__adddf3>
 80076e4:	4602      	mov	r2, r0
 80076e6:	460b      	mov	r3, r1
 80076e8:	4640      	mov	r0, r8
 80076ea:	4649      	mov	r1, r9
 80076ec:	f7f9 fa1c 	bl	8000b28 <__aeabi_dcmpgt>
 80076f0:	2800      	cmp	r0, #0
 80076f2:	d173      	bne.n	80077dc <_dtoa_r+0x6c4>
 80076f4:	4652      	mov	r2, sl
 80076f6:	465b      	mov	r3, fp
 80076f8:	4913      	ldr	r1, [pc, #76]	; (8007748 <_dtoa_r+0x630>)
 80076fa:	2000      	movs	r0, #0
 80076fc:	f7f8 fdcc 	bl	8000298 <__aeabi_dsub>
 8007700:	4602      	mov	r2, r0
 8007702:	460b      	mov	r3, r1
 8007704:	4640      	mov	r0, r8
 8007706:	4649      	mov	r1, r9
 8007708:	f7f9 f9f0 	bl	8000aec <__aeabi_dcmplt>
 800770c:	2800      	cmp	r0, #0
 800770e:	f43f af35 	beq.w	800757c <_dtoa_r+0x464>
 8007712:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007714:	1e6b      	subs	r3, r5, #1
 8007716:	930f      	str	r3, [sp, #60]	; 0x3c
 8007718:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800771c:	2b30      	cmp	r3, #48	; 0x30
 800771e:	d0f8      	beq.n	8007712 <_dtoa_r+0x5fa>
 8007720:	9700      	str	r7, [sp, #0]
 8007722:	e049      	b.n	80077b8 <_dtoa_r+0x6a0>
 8007724:	4b05      	ldr	r3, [pc, #20]	; (800773c <_dtoa_r+0x624>)
 8007726:	f7f8 ff6f 	bl	8000608 <__aeabi_dmul>
 800772a:	4680      	mov	r8, r0
 800772c:	4689      	mov	r9, r1
 800772e:	e7bd      	b.n	80076ac <_dtoa_r+0x594>
 8007730:	0800a920 	.word	0x0800a920
 8007734:	0800a8f8 	.word	0x0800a8f8
 8007738:	3ff00000 	.word	0x3ff00000
 800773c:	40240000 	.word	0x40240000
 8007740:	401c0000 	.word	0x401c0000
 8007744:	40140000 	.word	0x40140000
 8007748:	3fe00000 	.word	0x3fe00000
 800774c:	9d01      	ldr	r5, [sp, #4]
 800774e:	4656      	mov	r6, sl
 8007750:	465f      	mov	r7, fp
 8007752:	4642      	mov	r2, r8
 8007754:	464b      	mov	r3, r9
 8007756:	4630      	mov	r0, r6
 8007758:	4639      	mov	r1, r7
 800775a:	f7f9 f87f 	bl	800085c <__aeabi_ddiv>
 800775e:	f7f9 fa03 	bl	8000b68 <__aeabi_d2iz>
 8007762:	4682      	mov	sl, r0
 8007764:	f7f8 fee6 	bl	8000534 <__aeabi_i2d>
 8007768:	4642      	mov	r2, r8
 800776a:	464b      	mov	r3, r9
 800776c:	f7f8 ff4c 	bl	8000608 <__aeabi_dmul>
 8007770:	4602      	mov	r2, r0
 8007772:	460b      	mov	r3, r1
 8007774:	4630      	mov	r0, r6
 8007776:	4639      	mov	r1, r7
 8007778:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800777c:	f7f8 fd8c 	bl	8000298 <__aeabi_dsub>
 8007780:	f805 6b01 	strb.w	r6, [r5], #1
 8007784:	9e01      	ldr	r6, [sp, #4]
 8007786:	9f03      	ldr	r7, [sp, #12]
 8007788:	1bae      	subs	r6, r5, r6
 800778a:	42b7      	cmp	r7, r6
 800778c:	4602      	mov	r2, r0
 800778e:	460b      	mov	r3, r1
 8007790:	d135      	bne.n	80077fe <_dtoa_r+0x6e6>
 8007792:	f7f8 fd83 	bl	800029c <__adddf3>
 8007796:	4642      	mov	r2, r8
 8007798:	464b      	mov	r3, r9
 800779a:	4606      	mov	r6, r0
 800779c:	460f      	mov	r7, r1
 800779e:	f7f9 f9c3 	bl	8000b28 <__aeabi_dcmpgt>
 80077a2:	b9d0      	cbnz	r0, 80077da <_dtoa_r+0x6c2>
 80077a4:	4642      	mov	r2, r8
 80077a6:	464b      	mov	r3, r9
 80077a8:	4630      	mov	r0, r6
 80077aa:	4639      	mov	r1, r7
 80077ac:	f7f9 f994 	bl	8000ad8 <__aeabi_dcmpeq>
 80077b0:	b110      	cbz	r0, 80077b8 <_dtoa_r+0x6a0>
 80077b2:	f01a 0f01 	tst.w	sl, #1
 80077b6:	d110      	bne.n	80077da <_dtoa_r+0x6c2>
 80077b8:	4620      	mov	r0, r4
 80077ba:	ee18 1a10 	vmov	r1, s16
 80077be:	f000 fe87 	bl	80084d0 <_Bfree>
 80077c2:	2300      	movs	r3, #0
 80077c4:	9800      	ldr	r0, [sp, #0]
 80077c6:	702b      	strb	r3, [r5, #0]
 80077c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80077ca:	3001      	adds	r0, #1
 80077cc:	6018      	str	r0, [r3, #0]
 80077ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	f43f acf1 	beq.w	80071b8 <_dtoa_r+0xa0>
 80077d6:	601d      	str	r5, [r3, #0]
 80077d8:	e4ee      	b.n	80071b8 <_dtoa_r+0xa0>
 80077da:	9f00      	ldr	r7, [sp, #0]
 80077dc:	462b      	mov	r3, r5
 80077de:	461d      	mov	r5, r3
 80077e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80077e4:	2a39      	cmp	r2, #57	; 0x39
 80077e6:	d106      	bne.n	80077f6 <_dtoa_r+0x6de>
 80077e8:	9a01      	ldr	r2, [sp, #4]
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d1f7      	bne.n	80077de <_dtoa_r+0x6c6>
 80077ee:	9901      	ldr	r1, [sp, #4]
 80077f0:	2230      	movs	r2, #48	; 0x30
 80077f2:	3701      	adds	r7, #1
 80077f4:	700a      	strb	r2, [r1, #0]
 80077f6:	781a      	ldrb	r2, [r3, #0]
 80077f8:	3201      	adds	r2, #1
 80077fa:	701a      	strb	r2, [r3, #0]
 80077fc:	e790      	b.n	8007720 <_dtoa_r+0x608>
 80077fe:	4ba6      	ldr	r3, [pc, #664]	; (8007a98 <_dtoa_r+0x980>)
 8007800:	2200      	movs	r2, #0
 8007802:	f7f8 ff01 	bl	8000608 <__aeabi_dmul>
 8007806:	2200      	movs	r2, #0
 8007808:	2300      	movs	r3, #0
 800780a:	4606      	mov	r6, r0
 800780c:	460f      	mov	r7, r1
 800780e:	f7f9 f963 	bl	8000ad8 <__aeabi_dcmpeq>
 8007812:	2800      	cmp	r0, #0
 8007814:	d09d      	beq.n	8007752 <_dtoa_r+0x63a>
 8007816:	e7cf      	b.n	80077b8 <_dtoa_r+0x6a0>
 8007818:	9a08      	ldr	r2, [sp, #32]
 800781a:	2a00      	cmp	r2, #0
 800781c:	f000 80d7 	beq.w	80079ce <_dtoa_r+0x8b6>
 8007820:	9a06      	ldr	r2, [sp, #24]
 8007822:	2a01      	cmp	r2, #1
 8007824:	f300 80ba 	bgt.w	800799c <_dtoa_r+0x884>
 8007828:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800782a:	2a00      	cmp	r2, #0
 800782c:	f000 80b2 	beq.w	8007994 <_dtoa_r+0x87c>
 8007830:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007834:	9e07      	ldr	r6, [sp, #28]
 8007836:	9d04      	ldr	r5, [sp, #16]
 8007838:	9a04      	ldr	r2, [sp, #16]
 800783a:	441a      	add	r2, r3
 800783c:	9204      	str	r2, [sp, #16]
 800783e:	9a05      	ldr	r2, [sp, #20]
 8007840:	2101      	movs	r1, #1
 8007842:	441a      	add	r2, r3
 8007844:	4620      	mov	r0, r4
 8007846:	9205      	str	r2, [sp, #20]
 8007848:	f000 ff44 	bl	80086d4 <__i2b>
 800784c:	4607      	mov	r7, r0
 800784e:	2d00      	cmp	r5, #0
 8007850:	dd0c      	ble.n	800786c <_dtoa_r+0x754>
 8007852:	9b05      	ldr	r3, [sp, #20]
 8007854:	2b00      	cmp	r3, #0
 8007856:	dd09      	ble.n	800786c <_dtoa_r+0x754>
 8007858:	42ab      	cmp	r3, r5
 800785a:	9a04      	ldr	r2, [sp, #16]
 800785c:	bfa8      	it	ge
 800785e:	462b      	movge	r3, r5
 8007860:	1ad2      	subs	r2, r2, r3
 8007862:	9204      	str	r2, [sp, #16]
 8007864:	9a05      	ldr	r2, [sp, #20]
 8007866:	1aed      	subs	r5, r5, r3
 8007868:	1ad3      	subs	r3, r2, r3
 800786a:	9305      	str	r3, [sp, #20]
 800786c:	9b07      	ldr	r3, [sp, #28]
 800786e:	b31b      	cbz	r3, 80078b8 <_dtoa_r+0x7a0>
 8007870:	9b08      	ldr	r3, [sp, #32]
 8007872:	2b00      	cmp	r3, #0
 8007874:	f000 80af 	beq.w	80079d6 <_dtoa_r+0x8be>
 8007878:	2e00      	cmp	r6, #0
 800787a:	dd13      	ble.n	80078a4 <_dtoa_r+0x78c>
 800787c:	4639      	mov	r1, r7
 800787e:	4632      	mov	r2, r6
 8007880:	4620      	mov	r0, r4
 8007882:	f000 ffe7 	bl	8008854 <__pow5mult>
 8007886:	ee18 2a10 	vmov	r2, s16
 800788a:	4601      	mov	r1, r0
 800788c:	4607      	mov	r7, r0
 800788e:	4620      	mov	r0, r4
 8007890:	f000 ff36 	bl	8008700 <__multiply>
 8007894:	ee18 1a10 	vmov	r1, s16
 8007898:	4680      	mov	r8, r0
 800789a:	4620      	mov	r0, r4
 800789c:	f000 fe18 	bl	80084d0 <_Bfree>
 80078a0:	ee08 8a10 	vmov	s16, r8
 80078a4:	9b07      	ldr	r3, [sp, #28]
 80078a6:	1b9a      	subs	r2, r3, r6
 80078a8:	d006      	beq.n	80078b8 <_dtoa_r+0x7a0>
 80078aa:	ee18 1a10 	vmov	r1, s16
 80078ae:	4620      	mov	r0, r4
 80078b0:	f000 ffd0 	bl	8008854 <__pow5mult>
 80078b4:	ee08 0a10 	vmov	s16, r0
 80078b8:	2101      	movs	r1, #1
 80078ba:	4620      	mov	r0, r4
 80078bc:	f000 ff0a 	bl	80086d4 <__i2b>
 80078c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	4606      	mov	r6, r0
 80078c6:	f340 8088 	ble.w	80079da <_dtoa_r+0x8c2>
 80078ca:	461a      	mov	r2, r3
 80078cc:	4601      	mov	r1, r0
 80078ce:	4620      	mov	r0, r4
 80078d0:	f000 ffc0 	bl	8008854 <__pow5mult>
 80078d4:	9b06      	ldr	r3, [sp, #24]
 80078d6:	2b01      	cmp	r3, #1
 80078d8:	4606      	mov	r6, r0
 80078da:	f340 8081 	ble.w	80079e0 <_dtoa_r+0x8c8>
 80078de:	f04f 0800 	mov.w	r8, #0
 80078e2:	6933      	ldr	r3, [r6, #16]
 80078e4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80078e8:	6918      	ldr	r0, [r3, #16]
 80078ea:	f000 fea3 	bl	8008634 <__hi0bits>
 80078ee:	f1c0 0020 	rsb	r0, r0, #32
 80078f2:	9b05      	ldr	r3, [sp, #20]
 80078f4:	4418      	add	r0, r3
 80078f6:	f010 001f 	ands.w	r0, r0, #31
 80078fa:	f000 8092 	beq.w	8007a22 <_dtoa_r+0x90a>
 80078fe:	f1c0 0320 	rsb	r3, r0, #32
 8007902:	2b04      	cmp	r3, #4
 8007904:	f340 808a 	ble.w	8007a1c <_dtoa_r+0x904>
 8007908:	f1c0 001c 	rsb	r0, r0, #28
 800790c:	9b04      	ldr	r3, [sp, #16]
 800790e:	4403      	add	r3, r0
 8007910:	9304      	str	r3, [sp, #16]
 8007912:	9b05      	ldr	r3, [sp, #20]
 8007914:	4403      	add	r3, r0
 8007916:	4405      	add	r5, r0
 8007918:	9305      	str	r3, [sp, #20]
 800791a:	9b04      	ldr	r3, [sp, #16]
 800791c:	2b00      	cmp	r3, #0
 800791e:	dd07      	ble.n	8007930 <_dtoa_r+0x818>
 8007920:	ee18 1a10 	vmov	r1, s16
 8007924:	461a      	mov	r2, r3
 8007926:	4620      	mov	r0, r4
 8007928:	f000 ffee 	bl	8008908 <__lshift>
 800792c:	ee08 0a10 	vmov	s16, r0
 8007930:	9b05      	ldr	r3, [sp, #20]
 8007932:	2b00      	cmp	r3, #0
 8007934:	dd05      	ble.n	8007942 <_dtoa_r+0x82a>
 8007936:	4631      	mov	r1, r6
 8007938:	461a      	mov	r2, r3
 800793a:	4620      	mov	r0, r4
 800793c:	f000 ffe4 	bl	8008908 <__lshift>
 8007940:	4606      	mov	r6, r0
 8007942:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007944:	2b00      	cmp	r3, #0
 8007946:	d06e      	beq.n	8007a26 <_dtoa_r+0x90e>
 8007948:	ee18 0a10 	vmov	r0, s16
 800794c:	4631      	mov	r1, r6
 800794e:	f001 f84b 	bl	80089e8 <__mcmp>
 8007952:	2800      	cmp	r0, #0
 8007954:	da67      	bge.n	8007a26 <_dtoa_r+0x90e>
 8007956:	9b00      	ldr	r3, [sp, #0]
 8007958:	3b01      	subs	r3, #1
 800795a:	ee18 1a10 	vmov	r1, s16
 800795e:	9300      	str	r3, [sp, #0]
 8007960:	220a      	movs	r2, #10
 8007962:	2300      	movs	r3, #0
 8007964:	4620      	mov	r0, r4
 8007966:	f000 fdd5 	bl	8008514 <__multadd>
 800796a:	9b08      	ldr	r3, [sp, #32]
 800796c:	ee08 0a10 	vmov	s16, r0
 8007970:	2b00      	cmp	r3, #0
 8007972:	f000 81b1 	beq.w	8007cd8 <_dtoa_r+0xbc0>
 8007976:	2300      	movs	r3, #0
 8007978:	4639      	mov	r1, r7
 800797a:	220a      	movs	r2, #10
 800797c:	4620      	mov	r0, r4
 800797e:	f000 fdc9 	bl	8008514 <__multadd>
 8007982:	9b02      	ldr	r3, [sp, #8]
 8007984:	2b00      	cmp	r3, #0
 8007986:	4607      	mov	r7, r0
 8007988:	f300 808e 	bgt.w	8007aa8 <_dtoa_r+0x990>
 800798c:	9b06      	ldr	r3, [sp, #24]
 800798e:	2b02      	cmp	r3, #2
 8007990:	dc51      	bgt.n	8007a36 <_dtoa_r+0x91e>
 8007992:	e089      	b.n	8007aa8 <_dtoa_r+0x990>
 8007994:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007996:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800799a:	e74b      	b.n	8007834 <_dtoa_r+0x71c>
 800799c:	9b03      	ldr	r3, [sp, #12]
 800799e:	1e5e      	subs	r6, r3, #1
 80079a0:	9b07      	ldr	r3, [sp, #28]
 80079a2:	42b3      	cmp	r3, r6
 80079a4:	bfbf      	itttt	lt
 80079a6:	9b07      	ldrlt	r3, [sp, #28]
 80079a8:	9607      	strlt	r6, [sp, #28]
 80079aa:	1af2      	sublt	r2, r6, r3
 80079ac:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80079ae:	bfb6      	itet	lt
 80079b0:	189b      	addlt	r3, r3, r2
 80079b2:	1b9e      	subge	r6, r3, r6
 80079b4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80079b6:	9b03      	ldr	r3, [sp, #12]
 80079b8:	bfb8      	it	lt
 80079ba:	2600      	movlt	r6, #0
 80079bc:	2b00      	cmp	r3, #0
 80079be:	bfb7      	itett	lt
 80079c0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80079c4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80079c8:	1a9d      	sublt	r5, r3, r2
 80079ca:	2300      	movlt	r3, #0
 80079cc:	e734      	b.n	8007838 <_dtoa_r+0x720>
 80079ce:	9e07      	ldr	r6, [sp, #28]
 80079d0:	9d04      	ldr	r5, [sp, #16]
 80079d2:	9f08      	ldr	r7, [sp, #32]
 80079d4:	e73b      	b.n	800784e <_dtoa_r+0x736>
 80079d6:	9a07      	ldr	r2, [sp, #28]
 80079d8:	e767      	b.n	80078aa <_dtoa_r+0x792>
 80079da:	9b06      	ldr	r3, [sp, #24]
 80079dc:	2b01      	cmp	r3, #1
 80079de:	dc18      	bgt.n	8007a12 <_dtoa_r+0x8fa>
 80079e0:	f1ba 0f00 	cmp.w	sl, #0
 80079e4:	d115      	bne.n	8007a12 <_dtoa_r+0x8fa>
 80079e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80079ea:	b993      	cbnz	r3, 8007a12 <_dtoa_r+0x8fa>
 80079ec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80079f0:	0d1b      	lsrs	r3, r3, #20
 80079f2:	051b      	lsls	r3, r3, #20
 80079f4:	b183      	cbz	r3, 8007a18 <_dtoa_r+0x900>
 80079f6:	9b04      	ldr	r3, [sp, #16]
 80079f8:	3301      	adds	r3, #1
 80079fa:	9304      	str	r3, [sp, #16]
 80079fc:	9b05      	ldr	r3, [sp, #20]
 80079fe:	3301      	adds	r3, #1
 8007a00:	9305      	str	r3, [sp, #20]
 8007a02:	f04f 0801 	mov.w	r8, #1
 8007a06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	f47f af6a 	bne.w	80078e2 <_dtoa_r+0x7ca>
 8007a0e:	2001      	movs	r0, #1
 8007a10:	e76f      	b.n	80078f2 <_dtoa_r+0x7da>
 8007a12:	f04f 0800 	mov.w	r8, #0
 8007a16:	e7f6      	b.n	8007a06 <_dtoa_r+0x8ee>
 8007a18:	4698      	mov	r8, r3
 8007a1a:	e7f4      	b.n	8007a06 <_dtoa_r+0x8ee>
 8007a1c:	f43f af7d 	beq.w	800791a <_dtoa_r+0x802>
 8007a20:	4618      	mov	r0, r3
 8007a22:	301c      	adds	r0, #28
 8007a24:	e772      	b.n	800790c <_dtoa_r+0x7f4>
 8007a26:	9b03      	ldr	r3, [sp, #12]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	dc37      	bgt.n	8007a9c <_dtoa_r+0x984>
 8007a2c:	9b06      	ldr	r3, [sp, #24]
 8007a2e:	2b02      	cmp	r3, #2
 8007a30:	dd34      	ble.n	8007a9c <_dtoa_r+0x984>
 8007a32:	9b03      	ldr	r3, [sp, #12]
 8007a34:	9302      	str	r3, [sp, #8]
 8007a36:	9b02      	ldr	r3, [sp, #8]
 8007a38:	b96b      	cbnz	r3, 8007a56 <_dtoa_r+0x93e>
 8007a3a:	4631      	mov	r1, r6
 8007a3c:	2205      	movs	r2, #5
 8007a3e:	4620      	mov	r0, r4
 8007a40:	f000 fd68 	bl	8008514 <__multadd>
 8007a44:	4601      	mov	r1, r0
 8007a46:	4606      	mov	r6, r0
 8007a48:	ee18 0a10 	vmov	r0, s16
 8007a4c:	f000 ffcc 	bl	80089e8 <__mcmp>
 8007a50:	2800      	cmp	r0, #0
 8007a52:	f73f adbb 	bgt.w	80075cc <_dtoa_r+0x4b4>
 8007a56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a58:	9d01      	ldr	r5, [sp, #4]
 8007a5a:	43db      	mvns	r3, r3
 8007a5c:	9300      	str	r3, [sp, #0]
 8007a5e:	f04f 0800 	mov.w	r8, #0
 8007a62:	4631      	mov	r1, r6
 8007a64:	4620      	mov	r0, r4
 8007a66:	f000 fd33 	bl	80084d0 <_Bfree>
 8007a6a:	2f00      	cmp	r7, #0
 8007a6c:	f43f aea4 	beq.w	80077b8 <_dtoa_r+0x6a0>
 8007a70:	f1b8 0f00 	cmp.w	r8, #0
 8007a74:	d005      	beq.n	8007a82 <_dtoa_r+0x96a>
 8007a76:	45b8      	cmp	r8, r7
 8007a78:	d003      	beq.n	8007a82 <_dtoa_r+0x96a>
 8007a7a:	4641      	mov	r1, r8
 8007a7c:	4620      	mov	r0, r4
 8007a7e:	f000 fd27 	bl	80084d0 <_Bfree>
 8007a82:	4639      	mov	r1, r7
 8007a84:	4620      	mov	r0, r4
 8007a86:	f000 fd23 	bl	80084d0 <_Bfree>
 8007a8a:	e695      	b.n	80077b8 <_dtoa_r+0x6a0>
 8007a8c:	2600      	movs	r6, #0
 8007a8e:	4637      	mov	r7, r6
 8007a90:	e7e1      	b.n	8007a56 <_dtoa_r+0x93e>
 8007a92:	9700      	str	r7, [sp, #0]
 8007a94:	4637      	mov	r7, r6
 8007a96:	e599      	b.n	80075cc <_dtoa_r+0x4b4>
 8007a98:	40240000 	.word	0x40240000
 8007a9c:	9b08      	ldr	r3, [sp, #32]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	f000 80ca 	beq.w	8007c38 <_dtoa_r+0xb20>
 8007aa4:	9b03      	ldr	r3, [sp, #12]
 8007aa6:	9302      	str	r3, [sp, #8]
 8007aa8:	2d00      	cmp	r5, #0
 8007aaa:	dd05      	ble.n	8007ab8 <_dtoa_r+0x9a0>
 8007aac:	4639      	mov	r1, r7
 8007aae:	462a      	mov	r2, r5
 8007ab0:	4620      	mov	r0, r4
 8007ab2:	f000 ff29 	bl	8008908 <__lshift>
 8007ab6:	4607      	mov	r7, r0
 8007ab8:	f1b8 0f00 	cmp.w	r8, #0
 8007abc:	d05b      	beq.n	8007b76 <_dtoa_r+0xa5e>
 8007abe:	6879      	ldr	r1, [r7, #4]
 8007ac0:	4620      	mov	r0, r4
 8007ac2:	f000 fcc5 	bl	8008450 <_Balloc>
 8007ac6:	4605      	mov	r5, r0
 8007ac8:	b928      	cbnz	r0, 8007ad6 <_dtoa_r+0x9be>
 8007aca:	4b87      	ldr	r3, [pc, #540]	; (8007ce8 <_dtoa_r+0xbd0>)
 8007acc:	4602      	mov	r2, r0
 8007ace:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007ad2:	f7ff bb3b 	b.w	800714c <_dtoa_r+0x34>
 8007ad6:	693a      	ldr	r2, [r7, #16]
 8007ad8:	3202      	adds	r2, #2
 8007ada:	0092      	lsls	r2, r2, #2
 8007adc:	f107 010c 	add.w	r1, r7, #12
 8007ae0:	300c      	adds	r0, #12
 8007ae2:	f000 fca7 	bl	8008434 <memcpy>
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	4629      	mov	r1, r5
 8007aea:	4620      	mov	r0, r4
 8007aec:	f000 ff0c 	bl	8008908 <__lshift>
 8007af0:	9b01      	ldr	r3, [sp, #4]
 8007af2:	f103 0901 	add.w	r9, r3, #1
 8007af6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007afa:	4413      	add	r3, r2
 8007afc:	9305      	str	r3, [sp, #20]
 8007afe:	f00a 0301 	and.w	r3, sl, #1
 8007b02:	46b8      	mov	r8, r7
 8007b04:	9304      	str	r3, [sp, #16]
 8007b06:	4607      	mov	r7, r0
 8007b08:	4631      	mov	r1, r6
 8007b0a:	ee18 0a10 	vmov	r0, s16
 8007b0e:	f7ff fa75 	bl	8006ffc <quorem>
 8007b12:	4641      	mov	r1, r8
 8007b14:	9002      	str	r0, [sp, #8]
 8007b16:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007b1a:	ee18 0a10 	vmov	r0, s16
 8007b1e:	f000 ff63 	bl	80089e8 <__mcmp>
 8007b22:	463a      	mov	r2, r7
 8007b24:	9003      	str	r0, [sp, #12]
 8007b26:	4631      	mov	r1, r6
 8007b28:	4620      	mov	r0, r4
 8007b2a:	f000 ff79 	bl	8008a20 <__mdiff>
 8007b2e:	68c2      	ldr	r2, [r0, #12]
 8007b30:	f109 3bff 	add.w	fp, r9, #4294967295
 8007b34:	4605      	mov	r5, r0
 8007b36:	bb02      	cbnz	r2, 8007b7a <_dtoa_r+0xa62>
 8007b38:	4601      	mov	r1, r0
 8007b3a:	ee18 0a10 	vmov	r0, s16
 8007b3e:	f000 ff53 	bl	80089e8 <__mcmp>
 8007b42:	4602      	mov	r2, r0
 8007b44:	4629      	mov	r1, r5
 8007b46:	4620      	mov	r0, r4
 8007b48:	9207      	str	r2, [sp, #28]
 8007b4a:	f000 fcc1 	bl	80084d0 <_Bfree>
 8007b4e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007b52:	ea43 0102 	orr.w	r1, r3, r2
 8007b56:	9b04      	ldr	r3, [sp, #16]
 8007b58:	430b      	orrs	r3, r1
 8007b5a:	464d      	mov	r5, r9
 8007b5c:	d10f      	bne.n	8007b7e <_dtoa_r+0xa66>
 8007b5e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007b62:	d02a      	beq.n	8007bba <_dtoa_r+0xaa2>
 8007b64:	9b03      	ldr	r3, [sp, #12]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	dd02      	ble.n	8007b70 <_dtoa_r+0xa58>
 8007b6a:	9b02      	ldr	r3, [sp, #8]
 8007b6c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007b70:	f88b a000 	strb.w	sl, [fp]
 8007b74:	e775      	b.n	8007a62 <_dtoa_r+0x94a>
 8007b76:	4638      	mov	r0, r7
 8007b78:	e7ba      	b.n	8007af0 <_dtoa_r+0x9d8>
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	e7e2      	b.n	8007b44 <_dtoa_r+0xa2c>
 8007b7e:	9b03      	ldr	r3, [sp, #12]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	db04      	blt.n	8007b8e <_dtoa_r+0xa76>
 8007b84:	9906      	ldr	r1, [sp, #24]
 8007b86:	430b      	orrs	r3, r1
 8007b88:	9904      	ldr	r1, [sp, #16]
 8007b8a:	430b      	orrs	r3, r1
 8007b8c:	d122      	bne.n	8007bd4 <_dtoa_r+0xabc>
 8007b8e:	2a00      	cmp	r2, #0
 8007b90:	ddee      	ble.n	8007b70 <_dtoa_r+0xa58>
 8007b92:	ee18 1a10 	vmov	r1, s16
 8007b96:	2201      	movs	r2, #1
 8007b98:	4620      	mov	r0, r4
 8007b9a:	f000 feb5 	bl	8008908 <__lshift>
 8007b9e:	4631      	mov	r1, r6
 8007ba0:	ee08 0a10 	vmov	s16, r0
 8007ba4:	f000 ff20 	bl	80089e8 <__mcmp>
 8007ba8:	2800      	cmp	r0, #0
 8007baa:	dc03      	bgt.n	8007bb4 <_dtoa_r+0xa9c>
 8007bac:	d1e0      	bne.n	8007b70 <_dtoa_r+0xa58>
 8007bae:	f01a 0f01 	tst.w	sl, #1
 8007bb2:	d0dd      	beq.n	8007b70 <_dtoa_r+0xa58>
 8007bb4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007bb8:	d1d7      	bne.n	8007b6a <_dtoa_r+0xa52>
 8007bba:	2339      	movs	r3, #57	; 0x39
 8007bbc:	f88b 3000 	strb.w	r3, [fp]
 8007bc0:	462b      	mov	r3, r5
 8007bc2:	461d      	mov	r5, r3
 8007bc4:	3b01      	subs	r3, #1
 8007bc6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007bca:	2a39      	cmp	r2, #57	; 0x39
 8007bcc:	d071      	beq.n	8007cb2 <_dtoa_r+0xb9a>
 8007bce:	3201      	adds	r2, #1
 8007bd0:	701a      	strb	r2, [r3, #0]
 8007bd2:	e746      	b.n	8007a62 <_dtoa_r+0x94a>
 8007bd4:	2a00      	cmp	r2, #0
 8007bd6:	dd07      	ble.n	8007be8 <_dtoa_r+0xad0>
 8007bd8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007bdc:	d0ed      	beq.n	8007bba <_dtoa_r+0xaa2>
 8007bde:	f10a 0301 	add.w	r3, sl, #1
 8007be2:	f88b 3000 	strb.w	r3, [fp]
 8007be6:	e73c      	b.n	8007a62 <_dtoa_r+0x94a>
 8007be8:	9b05      	ldr	r3, [sp, #20]
 8007bea:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007bee:	4599      	cmp	r9, r3
 8007bf0:	d047      	beq.n	8007c82 <_dtoa_r+0xb6a>
 8007bf2:	ee18 1a10 	vmov	r1, s16
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	220a      	movs	r2, #10
 8007bfa:	4620      	mov	r0, r4
 8007bfc:	f000 fc8a 	bl	8008514 <__multadd>
 8007c00:	45b8      	cmp	r8, r7
 8007c02:	ee08 0a10 	vmov	s16, r0
 8007c06:	f04f 0300 	mov.w	r3, #0
 8007c0a:	f04f 020a 	mov.w	r2, #10
 8007c0e:	4641      	mov	r1, r8
 8007c10:	4620      	mov	r0, r4
 8007c12:	d106      	bne.n	8007c22 <_dtoa_r+0xb0a>
 8007c14:	f000 fc7e 	bl	8008514 <__multadd>
 8007c18:	4680      	mov	r8, r0
 8007c1a:	4607      	mov	r7, r0
 8007c1c:	f109 0901 	add.w	r9, r9, #1
 8007c20:	e772      	b.n	8007b08 <_dtoa_r+0x9f0>
 8007c22:	f000 fc77 	bl	8008514 <__multadd>
 8007c26:	4639      	mov	r1, r7
 8007c28:	4680      	mov	r8, r0
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	220a      	movs	r2, #10
 8007c2e:	4620      	mov	r0, r4
 8007c30:	f000 fc70 	bl	8008514 <__multadd>
 8007c34:	4607      	mov	r7, r0
 8007c36:	e7f1      	b.n	8007c1c <_dtoa_r+0xb04>
 8007c38:	9b03      	ldr	r3, [sp, #12]
 8007c3a:	9302      	str	r3, [sp, #8]
 8007c3c:	9d01      	ldr	r5, [sp, #4]
 8007c3e:	ee18 0a10 	vmov	r0, s16
 8007c42:	4631      	mov	r1, r6
 8007c44:	f7ff f9da 	bl	8006ffc <quorem>
 8007c48:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007c4c:	9b01      	ldr	r3, [sp, #4]
 8007c4e:	f805 ab01 	strb.w	sl, [r5], #1
 8007c52:	1aea      	subs	r2, r5, r3
 8007c54:	9b02      	ldr	r3, [sp, #8]
 8007c56:	4293      	cmp	r3, r2
 8007c58:	dd09      	ble.n	8007c6e <_dtoa_r+0xb56>
 8007c5a:	ee18 1a10 	vmov	r1, s16
 8007c5e:	2300      	movs	r3, #0
 8007c60:	220a      	movs	r2, #10
 8007c62:	4620      	mov	r0, r4
 8007c64:	f000 fc56 	bl	8008514 <__multadd>
 8007c68:	ee08 0a10 	vmov	s16, r0
 8007c6c:	e7e7      	b.n	8007c3e <_dtoa_r+0xb26>
 8007c6e:	9b02      	ldr	r3, [sp, #8]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	bfc8      	it	gt
 8007c74:	461d      	movgt	r5, r3
 8007c76:	9b01      	ldr	r3, [sp, #4]
 8007c78:	bfd8      	it	le
 8007c7a:	2501      	movle	r5, #1
 8007c7c:	441d      	add	r5, r3
 8007c7e:	f04f 0800 	mov.w	r8, #0
 8007c82:	ee18 1a10 	vmov	r1, s16
 8007c86:	2201      	movs	r2, #1
 8007c88:	4620      	mov	r0, r4
 8007c8a:	f000 fe3d 	bl	8008908 <__lshift>
 8007c8e:	4631      	mov	r1, r6
 8007c90:	ee08 0a10 	vmov	s16, r0
 8007c94:	f000 fea8 	bl	80089e8 <__mcmp>
 8007c98:	2800      	cmp	r0, #0
 8007c9a:	dc91      	bgt.n	8007bc0 <_dtoa_r+0xaa8>
 8007c9c:	d102      	bne.n	8007ca4 <_dtoa_r+0xb8c>
 8007c9e:	f01a 0f01 	tst.w	sl, #1
 8007ca2:	d18d      	bne.n	8007bc0 <_dtoa_r+0xaa8>
 8007ca4:	462b      	mov	r3, r5
 8007ca6:	461d      	mov	r5, r3
 8007ca8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007cac:	2a30      	cmp	r2, #48	; 0x30
 8007cae:	d0fa      	beq.n	8007ca6 <_dtoa_r+0xb8e>
 8007cb0:	e6d7      	b.n	8007a62 <_dtoa_r+0x94a>
 8007cb2:	9a01      	ldr	r2, [sp, #4]
 8007cb4:	429a      	cmp	r2, r3
 8007cb6:	d184      	bne.n	8007bc2 <_dtoa_r+0xaaa>
 8007cb8:	9b00      	ldr	r3, [sp, #0]
 8007cba:	3301      	adds	r3, #1
 8007cbc:	9300      	str	r3, [sp, #0]
 8007cbe:	2331      	movs	r3, #49	; 0x31
 8007cc0:	7013      	strb	r3, [r2, #0]
 8007cc2:	e6ce      	b.n	8007a62 <_dtoa_r+0x94a>
 8007cc4:	4b09      	ldr	r3, [pc, #36]	; (8007cec <_dtoa_r+0xbd4>)
 8007cc6:	f7ff ba95 	b.w	80071f4 <_dtoa_r+0xdc>
 8007cca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	f47f aa6e 	bne.w	80071ae <_dtoa_r+0x96>
 8007cd2:	4b07      	ldr	r3, [pc, #28]	; (8007cf0 <_dtoa_r+0xbd8>)
 8007cd4:	f7ff ba8e 	b.w	80071f4 <_dtoa_r+0xdc>
 8007cd8:	9b02      	ldr	r3, [sp, #8]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	dcae      	bgt.n	8007c3c <_dtoa_r+0xb24>
 8007cde:	9b06      	ldr	r3, [sp, #24]
 8007ce0:	2b02      	cmp	r3, #2
 8007ce2:	f73f aea8 	bgt.w	8007a36 <_dtoa_r+0x91e>
 8007ce6:	e7a9      	b.n	8007c3c <_dtoa_r+0xb24>
 8007ce8:	0800a810 	.word	0x0800a810
 8007cec:	0800aa09 	.word	0x0800aa09
 8007cf0:	0800a791 	.word	0x0800a791

08007cf4 <rshift>:
 8007cf4:	6903      	ldr	r3, [r0, #16]
 8007cf6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007cfa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007cfe:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007d02:	f100 0414 	add.w	r4, r0, #20
 8007d06:	dd45      	ble.n	8007d94 <rshift+0xa0>
 8007d08:	f011 011f 	ands.w	r1, r1, #31
 8007d0c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007d10:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007d14:	d10c      	bne.n	8007d30 <rshift+0x3c>
 8007d16:	f100 0710 	add.w	r7, r0, #16
 8007d1a:	4629      	mov	r1, r5
 8007d1c:	42b1      	cmp	r1, r6
 8007d1e:	d334      	bcc.n	8007d8a <rshift+0x96>
 8007d20:	1a9b      	subs	r3, r3, r2
 8007d22:	009b      	lsls	r3, r3, #2
 8007d24:	1eea      	subs	r2, r5, #3
 8007d26:	4296      	cmp	r6, r2
 8007d28:	bf38      	it	cc
 8007d2a:	2300      	movcc	r3, #0
 8007d2c:	4423      	add	r3, r4
 8007d2e:	e015      	b.n	8007d5c <rshift+0x68>
 8007d30:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007d34:	f1c1 0820 	rsb	r8, r1, #32
 8007d38:	40cf      	lsrs	r7, r1
 8007d3a:	f105 0e04 	add.w	lr, r5, #4
 8007d3e:	46a1      	mov	r9, r4
 8007d40:	4576      	cmp	r6, lr
 8007d42:	46f4      	mov	ip, lr
 8007d44:	d815      	bhi.n	8007d72 <rshift+0x7e>
 8007d46:	1a9a      	subs	r2, r3, r2
 8007d48:	0092      	lsls	r2, r2, #2
 8007d4a:	3a04      	subs	r2, #4
 8007d4c:	3501      	adds	r5, #1
 8007d4e:	42ae      	cmp	r6, r5
 8007d50:	bf38      	it	cc
 8007d52:	2200      	movcc	r2, #0
 8007d54:	18a3      	adds	r3, r4, r2
 8007d56:	50a7      	str	r7, [r4, r2]
 8007d58:	b107      	cbz	r7, 8007d5c <rshift+0x68>
 8007d5a:	3304      	adds	r3, #4
 8007d5c:	1b1a      	subs	r2, r3, r4
 8007d5e:	42a3      	cmp	r3, r4
 8007d60:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007d64:	bf08      	it	eq
 8007d66:	2300      	moveq	r3, #0
 8007d68:	6102      	str	r2, [r0, #16]
 8007d6a:	bf08      	it	eq
 8007d6c:	6143      	streq	r3, [r0, #20]
 8007d6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007d72:	f8dc c000 	ldr.w	ip, [ip]
 8007d76:	fa0c fc08 	lsl.w	ip, ip, r8
 8007d7a:	ea4c 0707 	orr.w	r7, ip, r7
 8007d7e:	f849 7b04 	str.w	r7, [r9], #4
 8007d82:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007d86:	40cf      	lsrs	r7, r1
 8007d88:	e7da      	b.n	8007d40 <rshift+0x4c>
 8007d8a:	f851 cb04 	ldr.w	ip, [r1], #4
 8007d8e:	f847 cf04 	str.w	ip, [r7, #4]!
 8007d92:	e7c3      	b.n	8007d1c <rshift+0x28>
 8007d94:	4623      	mov	r3, r4
 8007d96:	e7e1      	b.n	8007d5c <rshift+0x68>

08007d98 <__hexdig_fun>:
 8007d98:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007d9c:	2b09      	cmp	r3, #9
 8007d9e:	d802      	bhi.n	8007da6 <__hexdig_fun+0xe>
 8007da0:	3820      	subs	r0, #32
 8007da2:	b2c0      	uxtb	r0, r0
 8007da4:	4770      	bx	lr
 8007da6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007daa:	2b05      	cmp	r3, #5
 8007dac:	d801      	bhi.n	8007db2 <__hexdig_fun+0x1a>
 8007dae:	3847      	subs	r0, #71	; 0x47
 8007db0:	e7f7      	b.n	8007da2 <__hexdig_fun+0xa>
 8007db2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007db6:	2b05      	cmp	r3, #5
 8007db8:	d801      	bhi.n	8007dbe <__hexdig_fun+0x26>
 8007dba:	3827      	subs	r0, #39	; 0x27
 8007dbc:	e7f1      	b.n	8007da2 <__hexdig_fun+0xa>
 8007dbe:	2000      	movs	r0, #0
 8007dc0:	4770      	bx	lr
	...

08007dc4 <__gethex>:
 8007dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dc8:	ed2d 8b02 	vpush	{d8}
 8007dcc:	b089      	sub	sp, #36	; 0x24
 8007dce:	ee08 0a10 	vmov	s16, r0
 8007dd2:	9304      	str	r3, [sp, #16]
 8007dd4:	4bb4      	ldr	r3, [pc, #720]	; (80080a8 <__gethex+0x2e4>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	9301      	str	r3, [sp, #4]
 8007dda:	4618      	mov	r0, r3
 8007ddc:	468b      	mov	fp, r1
 8007dde:	4690      	mov	r8, r2
 8007de0:	f7f8 f9fe 	bl	80001e0 <strlen>
 8007de4:	9b01      	ldr	r3, [sp, #4]
 8007de6:	f8db 2000 	ldr.w	r2, [fp]
 8007dea:	4403      	add	r3, r0
 8007dec:	4682      	mov	sl, r0
 8007dee:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007df2:	9305      	str	r3, [sp, #20]
 8007df4:	1c93      	adds	r3, r2, #2
 8007df6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007dfa:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007dfe:	32fe      	adds	r2, #254	; 0xfe
 8007e00:	18d1      	adds	r1, r2, r3
 8007e02:	461f      	mov	r7, r3
 8007e04:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007e08:	9100      	str	r1, [sp, #0]
 8007e0a:	2830      	cmp	r0, #48	; 0x30
 8007e0c:	d0f8      	beq.n	8007e00 <__gethex+0x3c>
 8007e0e:	f7ff ffc3 	bl	8007d98 <__hexdig_fun>
 8007e12:	4604      	mov	r4, r0
 8007e14:	2800      	cmp	r0, #0
 8007e16:	d13a      	bne.n	8007e8e <__gethex+0xca>
 8007e18:	9901      	ldr	r1, [sp, #4]
 8007e1a:	4652      	mov	r2, sl
 8007e1c:	4638      	mov	r0, r7
 8007e1e:	f001 fdb3 	bl	8009988 <strncmp>
 8007e22:	4605      	mov	r5, r0
 8007e24:	2800      	cmp	r0, #0
 8007e26:	d168      	bne.n	8007efa <__gethex+0x136>
 8007e28:	f817 000a 	ldrb.w	r0, [r7, sl]
 8007e2c:	eb07 060a 	add.w	r6, r7, sl
 8007e30:	f7ff ffb2 	bl	8007d98 <__hexdig_fun>
 8007e34:	2800      	cmp	r0, #0
 8007e36:	d062      	beq.n	8007efe <__gethex+0x13a>
 8007e38:	4633      	mov	r3, r6
 8007e3a:	7818      	ldrb	r0, [r3, #0]
 8007e3c:	2830      	cmp	r0, #48	; 0x30
 8007e3e:	461f      	mov	r7, r3
 8007e40:	f103 0301 	add.w	r3, r3, #1
 8007e44:	d0f9      	beq.n	8007e3a <__gethex+0x76>
 8007e46:	f7ff ffa7 	bl	8007d98 <__hexdig_fun>
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	fab0 f480 	clz	r4, r0
 8007e50:	0964      	lsrs	r4, r4, #5
 8007e52:	4635      	mov	r5, r6
 8007e54:	9300      	str	r3, [sp, #0]
 8007e56:	463a      	mov	r2, r7
 8007e58:	4616      	mov	r6, r2
 8007e5a:	3201      	adds	r2, #1
 8007e5c:	7830      	ldrb	r0, [r6, #0]
 8007e5e:	f7ff ff9b 	bl	8007d98 <__hexdig_fun>
 8007e62:	2800      	cmp	r0, #0
 8007e64:	d1f8      	bne.n	8007e58 <__gethex+0x94>
 8007e66:	9901      	ldr	r1, [sp, #4]
 8007e68:	4652      	mov	r2, sl
 8007e6a:	4630      	mov	r0, r6
 8007e6c:	f001 fd8c 	bl	8009988 <strncmp>
 8007e70:	b980      	cbnz	r0, 8007e94 <__gethex+0xd0>
 8007e72:	b94d      	cbnz	r5, 8007e88 <__gethex+0xc4>
 8007e74:	eb06 050a 	add.w	r5, r6, sl
 8007e78:	462a      	mov	r2, r5
 8007e7a:	4616      	mov	r6, r2
 8007e7c:	3201      	adds	r2, #1
 8007e7e:	7830      	ldrb	r0, [r6, #0]
 8007e80:	f7ff ff8a 	bl	8007d98 <__hexdig_fun>
 8007e84:	2800      	cmp	r0, #0
 8007e86:	d1f8      	bne.n	8007e7a <__gethex+0xb6>
 8007e88:	1bad      	subs	r5, r5, r6
 8007e8a:	00ad      	lsls	r5, r5, #2
 8007e8c:	e004      	b.n	8007e98 <__gethex+0xd4>
 8007e8e:	2400      	movs	r4, #0
 8007e90:	4625      	mov	r5, r4
 8007e92:	e7e0      	b.n	8007e56 <__gethex+0x92>
 8007e94:	2d00      	cmp	r5, #0
 8007e96:	d1f7      	bne.n	8007e88 <__gethex+0xc4>
 8007e98:	7833      	ldrb	r3, [r6, #0]
 8007e9a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007e9e:	2b50      	cmp	r3, #80	; 0x50
 8007ea0:	d13b      	bne.n	8007f1a <__gethex+0x156>
 8007ea2:	7873      	ldrb	r3, [r6, #1]
 8007ea4:	2b2b      	cmp	r3, #43	; 0x2b
 8007ea6:	d02c      	beq.n	8007f02 <__gethex+0x13e>
 8007ea8:	2b2d      	cmp	r3, #45	; 0x2d
 8007eaa:	d02e      	beq.n	8007f0a <__gethex+0x146>
 8007eac:	1c71      	adds	r1, r6, #1
 8007eae:	f04f 0900 	mov.w	r9, #0
 8007eb2:	7808      	ldrb	r0, [r1, #0]
 8007eb4:	f7ff ff70 	bl	8007d98 <__hexdig_fun>
 8007eb8:	1e43      	subs	r3, r0, #1
 8007eba:	b2db      	uxtb	r3, r3
 8007ebc:	2b18      	cmp	r3, #24
 8007ebe:	d82c      	bhi.n	8007f1a <__gethex+0x156>
 8007ec0:	f1a0 0210 	sub.w	r2, r0, #16
 8007ec4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007ec8:	f7ff ff66 	bl	8007d98 <__hexdig_fun>
 8007ecc:	1e43      	subs	r3, r0, #1
 8007ece:	b2db      	uxtb	r3, r3
 8007ed0:	2b18      	cmp	r3, #24
 8007ed2:	d91d      	bls.n	8007f10 <__gethex+0x14c>
 8007ed4:	f1b9 0f00 	cmp.w	r9, #0
 8007ed8:	d000      	beq.n	8007edc <__gethex+0x118>
 8007eda:	4252      	negs	r2, r2
 8007edc:	4415      	add	r5, r2
 8007ede:	f8cb 1000 	str.w	r1, [fp]
 8007ee2:	b1e4      	cbz	r4, 8007f1e <__gethex+0x15a>
 8007ee4:	9b00      	ldr	r3, [sp, #0]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	bf14      	ite	ne
 8007eea:	2700      	movne	r7, #0
 8007eec:	2706      	moveq	r7, #6
 8007eee:	4638      	mov	r0, r7
 8007ef0:	b009      	add	sp, #36	; 0x24
 8007ef2:	ecbd 8b02 	vpop	{d8}
 8007ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007efa:	463e      	mov	r6, r7
 8007efc:	4625      	mov	r5, r4
 8007efe:	2401      	movs	r4, #1
 8007f00:	e7ca      	b.n	8007e98 <__gethex+0xd4>
 8007f02:	f04f 0900 	mov.w	r9, #0
 8007f06:	1cb1      	adds	r1, r6, #2
 8007f08:	e7d3      	b.n	8007eb2 <__gethex+0xee>
 8007f0a:	f04f 0901 	mov.w	r9, #1
 8007f0e:	e7fa      	b.n	8007f06 <__gethex+0x142>
 8007f10:	230a      	movs	r3, #10
 8007f12:	fb03 0202 	mla	r2, r3, r2, r0
 8007f16:	3a10      	subs	r2, #16
 8007f18:	e7d4      	b.n	8007ec4 <__gethex+0x100>
 8007f1a:	4631      	mov	r1, r6
 8007f1c:	e7df      	b.n	8007ede <__gethex+0x11a>
 8007f1e:	1bf3      	subs	r3, r6, r7
 8007f20:	3b01      	subs	r3, #1
 8007f22:	4621      	mov	r1, r4
 8007f24:	2b07      	cmp	r3, #7
 8007f26:	dc0b      	bgt.n	8007f40 <__gethex+0x17c>
 8007f28:	ee18 0a10 	vmov	r0, s16
 8007f2c:	f000 fa90 	bl	8008450 <_Balloc>
 8007f30:	4604      	mov	r4, r0
 8007f32:	b940      	cbnz	r0, 8007f46 <__gethex+0x182>
 8007f34:	4b5d      	ldr	r3, [pc, #372]	; (80080ac <__gethex+0x2e8>)
 8007f36:	4602      	mov	r2, r0
 8007f38:	21de      	movs	r1, #222	; 0xde
 8007f3a:	485d      	ldr	r0, [pc, #372]	; (80080b0 <__gethex+0x2ec>)
 8007f3c:	f001 fdf4 	bl	8009b28 <__assert_func>
 8007f40:	3101      	adds	r1, #1
 8007f42:	105b      	asrs	r3, r3, #1
 8007f44:	e7ee      	b.n	8007f24 <__gethex+0x160>
 8007f46:	f100 0914 	add.w	r9, r0, #20
 8007f4a:	f04f 0b00 	mov.w	fp, #0
 8007f4e:	f1ca 0301 	rsb	r3, sl, #1
 8007f52:	f8cd 9008 	str.w	r9, [sp, #8]
 8007f56:	f8cd b000 	str.w	fp, [sp]
 8007f5a:	9306      	str	r3, [sp, #24]
 8007f5c:	42b7      	cmp	r7, r6
 8007f5e:	d340      	bcc.n	8007fe2 <__gethex+0x21e>
 8007f60:	9802      	ldr	r0, [sp, #8]
 8007f62:	9b00      	ldr	r3, [sp, #0]
 8007f64:	f840 3b04 	str.w	r3, [r0], #4
 8007f68:	eba0 0009 	sub.w	r0, r0, r9
 8007f6c:	1080      	asrs	r0, r0, #2
 8007f6e:	0146      	lsls	r6, r0, #5
 8007f70:	6120      	str	r0, [r4, #16]
 8007f72:	4618      	mov	r0, r3
 8007f74:	f000 fb5e 	bl	8008634 <__hi0bits>
 8007f78:	1a30      	subs	r0, r6, r0
 8007f7a:	f8d8 6000 	ldr.w	r6, [r8]
 8007f7e:	42b0      	cmp	r0, r6
 8007f80:	dd63      	ble.n	800804a <__gethex+0x286>
 8007f82:	1b87      	subs	r7, r0, r6
 8007f84:	4639      	mov	r1, r7
 8007f86:	4620      	mov	r0, r4
 8007f88:	f000 ff02 	bl	8008d90 <__any_on>
 8007f8c:	4682      	mov	sl, r0
 8007f8e:	b1a8      	cbz	r0, 8007fbc <__gethex+0x1f8>
 8007f90:	1e7b      	subs	r3, r7, #1
 8007f92:	1159      	asrs	r1, r3, #5
 8007f94:	f003 021f 	and.w	r2, r3, #31
 8007f98:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007f9c:	f04f 0a01 	mov.w	sl, #1
 8007fa0:	fa0a f202 	lsl.w	r2, sl, r2
 8007fa4:	420a      	tst	r2, r1
 8007fa6:	d009      	beq.n	8007fbc <__gethex+0x1f8>
 8007fa8:	4553      	cmp	r3, sl
 8007faa:	dd05      	ble.n	8007fb8 <__gethex+0x1f4>
 8007fac:	1eb9      	subs	r1, r7, #2
 8007fae:	4620      	mov	r0, r4
 8007fb0:	f000 feee 	bl	8008d90 <__any_on>
 8007fb4:	2800      	cmp	r0, #0
 8007fb6:	d145      	bne.n	8008044 <__gethex+0x280>
 8007fb8:	f04f 0a02 	mov.w	sl, #2
 8007fbc:	4639      	mov	r1, r7
 8007fbe:	4620      	mov	r0, r4
 8007fc0:	f7ff fe98 	bl	8007cf4 <rshift>
 8007fc4:	443d      	add	r5, r7
 8007fc6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007fca:	42ab      	cmp	r3, r5
 8007fcc:	da4c      	bge.n	8008068 <__gethex+0x2a4>
 8007fce:	ee18 0a10 	vmov	r0, s16
 8007fd2:	4621      	mov	r1, r4
 8007fd4:	f000 fa7c 	bl	80084d0 <_Bfree>
 8007fd8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007fda:	2300      	movs	r3, #0
 8007fdc:	6013      	str	r3, [r2, #0]
 8007fde:	27a3      	movs	r7, #163	; 0xa3
 8007fe0:	e785      	b.n	8007eee <__gethex+0x12a>
 8007fe2:	1e73      	subs	r3, r6, #1
 8007fe4:	9a05      	ldr	r2, [sp, #20]
 8007fe6:	9303      	str	r3, [sp, #12]
 8007fe8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d019      	beq.n	8008024 <__gethex+0x260>
 8007ff0:	f1bb 0f20 	cmp.w	fp, #32
 8007ff4:	d107      	bne.n	8008006 <__gethex+0x242>
 8007ff6:	9b02      	ldr	r3, [sp, #8]
 8007ff8:	9a00      	ldr	r2, [sp, #0]
 8007ffa:	f843 2b04 	str.w	r2, [r3], #4
 8007ffe:	9302      	str	r3, [sp, #8]
 8008000:	2300      	movs	r3, #0
 8008002:	9300      	str	r3, [sp, #0]
 8008004:	469b      	mov	fp, r3
 8008006:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800800a:	f7ff fec5 	bl	8007d98 <__hexdig_fun>
 800800e:	9b00      	ldr	r3, [sp, #0]
 8008010:	f000 000f 	and.w	r0, r0, #15
 8008014:	fa00 f00b 	lsl.w	r0, r0, fp
 8008018:	4303      	orrs	r3, r0
 800801a:	9300      	str	r3, [sp, #0]
 800801c:	f10b 0b04 	add.w	fp, fp, #4
 8008020:	9b03      	ldr	r3, [sp, #12]
 8008022:	e00d      	b.n	8008040 <__gethex+0x27c>
 8008024:	9b03      	ldr	r3, [sp, #12]
 8008026:	9a06      	ldr	r2, [sp, #24]
 8008028:	4413      	add	r3, r2
 800802a:	42bb      	cmp	r3, r7
 800802c:	d3e0      	bcc.n	8007ff0 <__gethex+0x22c>
 800802e:	4618      	mov	r0, r3
 8008030:	9901      	ldr	r1, [sp, #4]
 8008032:	9307      	str	r3, [sp, #28]
 8008034:	4652      	mov	r2, sl
 8008036:	f001 fca7 	bl	8009988 <strncmp>
 800803a:	9b07      	ldr	r3, [sp, #28]
 800803c:	2800      	cmp	r0, #0
 800803e:	d1d7      	bne.n	8007ff0 <__gethex+0x22c>
 8008040:	461e      	mov	r6, r3
 8008042:	e78b      	b.n	8007f5c <__gethex+0x198>
 8008044:	f04f 0a03 	mov.w	sl, #3
 8008048:	e7b8      	b.n	8007fbc <__gethex+0x1f8>
 800804a:	da0a      	bge.n	8008062 <__gethex+0x29e>
 800804c:	1a37      	subs	r7, r6, r0
 800804e:	4621      	mov	r1, r4
 8008050:	ee18 0a10 	vmov	r0, s16
 8008054:	463a      	mov	r2, r7
 8008056:	f000 fc57 	bl	8008908 <__lshift>
 800805a:	1bed      	subs	r5, r5, r7
 800805c:	4604      	mov	r4, r0
 800805e:	f100 0914 	add.w	r9, r0, #20
 8008062:	f04f 0a00 	mov.w	sl, #0
 8008066:	e7ae      	b.n	8007fc6 <__gethex+0x202>
 8008068:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800806c:	42a8      	cmp	r0, r5
 800806e:	dd72      	ble.n	8008156 <__gethex+0x392>
 8008070:	1b45      	subs	r5, r0, r5
 8008072:	42ae      	cmp	r6, r5
 8008074:	dc36      	bgt.n	80080e4 <__gethex+0x320>
 8008076:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800807a:	2b02      	cmp	r3, #2
 800807c:	d02a      	beq.n	80080d4 <__gethex+0x310>
 800807e:	2b03      	cmp	r3, #3
 8008080:	d02c      	beq.n	80080dc <__gethex+0x318>
 8008082:	2b01      	cmp	r3, #1
 8008084:	d11c      	bne.n	80080c0 <__gethex+0x2fc>
 8008086:	42ae      	cmp	r6, r5
 8008088:	d11a      	bne.n	80080c0 <__gethex+0x2fc>
 800808a:	2e01      	cmp	r6, #1
 800808c:	d112      	bne.n	80080b4 <__gethex+0x2f0>
 800808e:	9a04      	ldr	r2, [sp, #16]
 8008090:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008094:	6013      	str	r3, [r2, #0]
 8008096:	2301      	movs	r3, #1
 8008098:	6123      	str	r3, [r4, #16]
 800809a:	f8c9 3000 	str.w	r3, [r9]
 800809e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80080a0:	2762      	movs	r7, #98	; 0x62
 80080a2:	601c      	str	r4, [r3, #0]
 80080a4:	e723      	b.n	8007eee <__gethex+0x12a>
 80080a6:	bf00      	nop
 80080a8:	0800a888 	.word	0x0800a888
 80080ac:	0800a810 	.word	0x0800a810
 80080b0:	0800a821 	.word	0x0800a821
 80080b4:	1e71      	subs	r1, r6, #1
 80080b6:	4620      	mov	r0, r4
 80080b8:	f000 fe6a 	bl	8008d90 <__any_on>
 80080bc:	2800      	cmp	r0, #0
 80080be:	d1e6      	bne.n	800808e <__gethex+0x2ca>
 80080c0:	ee18 0a10 	vmov	r0, s16
 80080c4:	4621      	mov	r1, r4
 80080c6:	f000 fa03 	bl	80084d0 <_Bfree>
 80080ca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80080cc:	2300      	movs	r3, #0
 80080ce:	6013      	str	r3, [r2, #0]
 80080d0:	2750      	movs	r7, #80	; 0x50
 80080d2:	e70c      	b.n	8007eee <__gethex+0x12a>
 80080d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d1f2      	bne.n	80080c0 <__gethex+0x2fc>
 80080da:	e7d8      	b.n	800808e <__gethex+0x2ca>
 80080dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d1d5      	bne.n	800808e <__gethex+0x2ca>
 80080e2:	e7ed      	b.n	80080c0 <__gethex+0x2fc>
 80080e4:	1e6f      	subs	r7, r5, #1
 80080e6:	f1ba 0f00 	cmp.w	sl, #0
 80080ea:	d131      	bne.n	8008150 <__gethex+0x38c>
 80080ec:	b127      	cbz	r7, 80080f8 <__gethex+0x334>
 80080ee:	4639      	mov	r1, r7
 80080f0:	4620      	mov	r0, r4
 80080f2:	f000 fe4d 	bl	8008d90 <__any_on>
 80080f6:	4682      	mov	sl, r0
 80080f8:	117b      	asrs	r3, r7, #5
 80080fa:	2101      	movs	r1, #1
 80080fc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008100:	f007 071f 	and.w	r7, r7, #31
 8008104:	fa01 f707 	lsl.w	r7, r1, r7
 8008108:	421f      	tst	r7, r3
 800810a:	4629      	mov	r1, r5
 800810c:	4620      	mov	r0, r4
 800810e:	bf18      	it	ne
 8008110:	f04a 0a02 	orrne.w	sl, sl, #2
 8008114:	1b76      	subs	r6, r6, r5
 8008116:	f7ff fded 	bl	8007cf4 <rshift>
 800811a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800811e:	2702      	movs	r7, #2
 8008120:	f1ba 0f00 	cmp.w	sl, #0
 8008124:	d048      	beq.n	80081b8 <__gethex+0x3f4>
 8008126:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800812a:	2b02      	cmp	r3, #2
 800812c:	d015      	beq.n	800815a <__gethex+0x396>
 800812e:	2b03      	cmp	r3, #3
 8008130:	d017      	beq.n	8008162 <__gethex+0x39e>
 8008132:	2b01      	cmp	r3, #1
 8008134:	d109      	bne.n	800814a <__gethex+0x386>
 8008136:	f01a 0f02 	tst.w	sl, #2
 800813a:	d006      	beq.n	800814a <__gethex+0x386>
 800813c:	f8d9 0000 	ldr.w	r0, [r9]
 8008140:	ea4a 0a00 	orr.w	sl, sl, r0
 8008144:	f01a 0f01 	tst.w	sl, #1
 8008148:	d10e      	bne.n	8008168 <__gethex+0x3a4>
 800814a:	f047 0710 	orr.w	r7, r7, #16
 800814e:	e033      	b.n	80081b8 <__gethex+0x3f4>
 8008150:	f04f 0a01 	mov.w	sl, #1
 8008154:	e7d0      	b.n	80080f8 <__gethex+0x334>
 8008156:	2701      	movs	r7, #1
 8008158:	e7e2      	b.n	8008120 <__gethex+0x35c>
 800815a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800815c:	f1c3 0301 	rsb	r3, r3, #1
 8008160:	9315      	str	r3, [sp, #84]	; 0x54
 8008162:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008164:	2b00      	cmp	r3, #0
 8008166:	d0f0      	beq.n	800814a <__gethex+0x386>
 8008168:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800816c:	f104 0314 	add.w	r3, r4, #20
 8008170:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008174:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008178:	f04f 0c00 	mov.w	ip, #0
 800817c:	4618      	mov	r0, r3
 800817e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008182:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008186:	d01c      	beq.n	80081c2 <__gethex+0x3fe>
 8008188:	3201      	adds	r2, #1
 800818a:	6002      	str	r2, [r0, #0]
 800818c:	2f02      	cmp	r7, #2
 800818e:	f104 0314 	add.w	r3, r4, #20
 8008192:	d13f      	bne.n	8008214 <__gethex+0x450>
 8008194:	f8d8 2000 	ldr.w	r2, [r8]
 8008198:	3a01      	subs	r2, #1
 800819a:	42b2      	cmp	r2, r6
 800819c:	d10a      	bne.n	80081b4 <__gethex+0x3f0>
 800819e:	1171      	asrs	r1, r6, #5
 80081a0:	2201      	movs	r2, #1
 80081a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80081a6:	f006 061f 	and.w	r6, r6, #31
 80081aa:	fa02 f606 	lsl.w	r6, r2, r6
 80081ae:	421e      	tst	r6, r3
 80081b0:	bf18      	it	ne
 80081b2:	4617      	movne	r7, r2
 80081b4:	f047 0720 	orr.w	r7, r7, #32
 80081b8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80081ba:	601c      	str	r4, [r3, #0]
 80081bc:	9b04      	ldr	r3, [sp, #16]
 80081be:	601d      	str	r5, [r3, #0]
 80081c0:	e695      	b.n	8007eee <__gethex+0x12a>
 80081c2:	4299      	cmp	r1, r3
 80081c4:	f843 cc04 	str.w	ip, [r3, #-4]
 80081c8:	d8d8      	bhi.n	800817c <__gethex+0x3b8>
 80081ca:	68a3      	ldr	r3, [r4, #8]
 80081cc:	459b      	cmp	fp, r3
 80081ce:	db19      	blt.n	8008204 <__gethex+0x440>
 80081d0:	6861      	ldr	r1, [r4, #4]
 80081d2:	ee18 0a10 	vmov	r0, s16
 80081d6:	3101      	adds	r1, #1
 80081d8:	f000 f93a 	bl	8008450 <_Balloc>
 80081dc:	4681      	mov	r9, r0
 80081de:	b918      	cbnz	r0, 80081e8 <__gethex+0x424>
 80081e0:	4b1a      	ldr	r3, [pc, #104]	; (800824c <__gethex+0x488>)
 80081e2:	4602      	mov	r2, r0
 80081e4:	2184      	movs	r1, #132	; 0x84
 80081e6:	e6a8      	b.n	8007f3a <__gethex+0x176>
 80081e8:	6922      	ldr	r2, [r4, #16]
 80081ea:	3202      	adds	r2, #2
 80081ec:	f104 010c 	add.w	r1, r4, #12
 80081f0:	0092      	lsls	r2, r2, #2
 80081f2:	300c      	adds	r0, #12
 80081f4:	f000 f91e 	bl	8008434 <memcpy>
 80081f8:	4621      	mov	r1, r4
 80081fa:	ee18 0a10 	vmov	r0, s16
 80081fe:	f000 f967 	bl	80084d0 <_Bfree>
 8008202:	464c      	mov	r4, r9
 8008204:	6923      	ldr	r3, [r4, #16]
 8008206:	1c5a      	adds	r2, r3, #1
 8008208:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800820c:	6122      	str	r2, [r4, #16]
 800820e:	2201      	movs	r2, #1
 8008210:	615a      	str	r2, [r3, #20]
 8008212:	e7bb      	b.n	800818c <__gethex+0x3c8>
 8008214:	6922      	ldr	r2, [r4, #16]
 8008216:	455a      	cmp	r2, fp
 8008218:	dd0b      	ble.n	8008232 <__gethex+0x46e>
 800821a:	2101      	movs	r1, #1
 800821c:	4620      	mov	r0, r4
 800821e:	f7ff fd69 	bl	8007cf4 <rshift>
 8008222:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008226:	3501      	adds	r5, #1
 8008228:	42ab      	cmp	r3, r5
 800822a:	f6ff aed0 	blt.w	8007fce <__gethex+0x20a>
 800822e:	2701      	movs	r7, #1
 8008230:	e7c0      	b.n	80081b4 <__gethex+0x3f0>
 8008232:	f016 061f 	ands.w	r6, r6, #31
 8008236:	d0fa      	beq.n	800822e <__gethex+0x46a>
 8008238:	4453      	add	r3, sl
 800823a:	f1c6 0620 	rsb	r6, r6, #32
 800823e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008242:	f000 f9f7 	bl	8008634 <__hi0bits>
 8008246:	42b0      	cmp	r0, r6
 8008248:	dbe7      	blt.n	800821a <__gethex+0x456>
 800824a:	e7f0      	b.n	800822e <__gethex+0x46a>
 800824c:	0800a810 	.word	0x0800a810

08008250 <L_shift>:
 8008250:	f1c2 0208 	rsb	r2, r2, #8
 8008254:	0092      	lsls	r2, r2, #2
 8008256:	b570      	push	{r4, r5, r6, lr}
 8008258:	f1c2 0620 	rsb	r6, r2, #32
 800825c:	6843      	ldr	r3, [r0, #4]
 800825e:	6804      	ldr	r4, [r0, #0]
 8008260:	fa03 f506 	lsl.w	r5, r3, r6
 8008264:	432c      	orrs	r4, r5
 8008266:	40d3      	lsrs	r3, r2
 8008268:	6004      	str	r4, [r0, #0]
 800826a:	f840 3f04 	str.w	r3, [r0, #4]!
 800826e:	4288      	cmp	r0, r1
 8008270:	d3f4      	bcc.n	800825c <L_shift+0xc>
 8008272:	bd70      	pop	{r4, r5, r6, pc}

08008274 <__match>:
 8008274:	b530      	push	{r4, r5, lr}
 8008276:	6803      	ldr	r3, [r0, #0]
 8008278:	3301      	adds	r3, #1
 800827a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800827e:	b914      	cbnz	r4, 8008286 <__match+0x12>
 8008280:	6003      	str	r3, [r0, #0]
 8008282:	2001      	movs	r0, #1
 8008284:	bd30      	pop	{r4, r5, pc}
 8008286:	f813 2b01 	ldrb.w	r2, [r3], #1
 800828a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800828e:	2d19      	cmp	r5, #25
 8008290:	bf98      	it	ls
 8008292:	3220      	addls	r2, #32
 8008294:	42a2      	cmp	r2, r4
 8008296:	d0f0      	beq.n	800827a <__match+0x6>
 8008298:	2000      	movs	r0, #0
 800829a:	e7f3      	b.n	8008284 <__match+0x10>

0800829c <__hexnan>:
 800829c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082a0:	680b      	ldr	r3, [r1, #0]
 80082a2:	115e      	asrs	r6, r3, #5
 80082a4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80082a8:	f013 031f 	ands.w	r3, r3, #31
 80082ac:	b087      	sub	sp, #28
 80082ae:	bf18      	it	ne
 80082b0:	3604      	addne	r6, #4
 80082b2:	2500      	movs	r5, #0
 80082b4:	1f37      	subs	r7, r6, #4
 80082b6:	4690      	mov	r8, r2
 80082b8:	6802      	ldr	r2, [r0, #0]
 80082ba:	9301      	str	r3, [sp, #4]
 80082bc:	4682      	mov	sl, r0
 80082be:	f846 5c04 	str.w	r5, [r6, #-4]
 80082c2:	46b9      	mov	r9, r7
 80082c4:	463c      	mov	r4, r7
 80082c6:	9502      	str	r5, [sp, #8]
 80082c8:	46ab      	mov	fp, r5
 80082ca:	7851      	ldrb	r1, [r2, #1]
 80082cc:	1c53      	adds	r3, r2, #1
 80082ce:	9303      	str	r3, [sp, #12]
 80082d0:	b341      	cbz	r1, 8008324 <__hexnan+0x88>
 80082d2:	4608      	mov	r0, r1
 80082d4:	9205      	str	r2, [sp, #20]
 80082d6:	9104      	str	r1, [sp, #16]
 80082d8:	f7ff fd5e 	bl	8007d98 <__hexdig_fun>
 80082dc:	2800      	cmp	r0, #0
 80082de:	d14f      	bne.n	8008380 <__hexnan+0xe4>
 80082e0:	9904      	ldr	r1, [sp, #16]
 80082e2:	9a05      	ldr	r2, [sp, #20]
 80082e4:	2920      	cmp	r1, #32
 80082e6:	d818      	bhi.n	800831a <__hexnan+0x7e>
 80082e8:	9b02      	ldr	r3, [sp, #8]
 80082ea:	459b      	cmp	fp, r3
 80082ec:	dd13      	ble.n	8008316 <__hexnan+0x7a>
 80082ee:	454c      	cmp	r4, r9
 80082f0:	d206      	bcs.n	8008300 <__hexnan+0x64>
 80082f2:	2d07      	cmp	r5, #7
 80082f4:	dc04      	bgt.n	8008300 <__hexnan+0x64>
 80082f6:	462a      	mov	r2, r5
 80082f8:	4649      	mov	r1, r9
 80082fa:	4620      	mov	r0, r4
 80082fc:	f7ff ffa8 	bl	8008250 <L_shift>
 8008300:	4544      	cmp	r4, r8
 8008302:	d950      	bls.n	80083a6 <__hexnan+0x10a>
 8008304:	2300      	movs	r3, #0
 8008306:	f1a4 0904 	sub.w	r9, r4, #4
 800830a:	f844 3c04 	str.w	r3, [r4, #-4]
 800830e:	f8cd b008 	str.w	fp, [sp, #8]
 8008312:	464c      	mov	r4, r9
 8008314:	461d      	mov	r5, r3
 8008316:	9a03      	ldr	r2, [sp, #12]
 8008318:	e7d7      	b.n	80082ca <__hexnan+0x2e>
 800831a:	2929      	cmp	r1, #41	; 0x29
 800831c:	d156      	bne.n	80083cc <__hexnan+0x130>
 800831e:	3202      	adds	r2, #2
 8008320:	f8ca 2000 	str.w	r2, [sl]
 8008324:	f1bb 0f00 	cmp.w	fp, #0
 8008328:	d050      	beq.n	80083cc <__hexnan+0x130>
 800832a:	454c      	cmp	r4, r9
 800832c:	d206      	bcs.n	800833c <__hexnan+0xa0>
 800832e:	2d07      	cmp	r5, #7
 8008330:	dc04      	bgt.n	800833c <__hexnan+0xa0>
 8008332:	462a      	mov	r2, r5
 8008334:	4649      	mov	r1, r9
 8008336:	4620      	mov	r0, r4
 8008338:	f7ff ff8a 	bl	8008250 <L_shift>
 800833c:	4544      	cmp	r4, r8
 800833e:	d934      	bls.n	80083aa <__hexnan+0x10e>
 8008340:	f1a8 0204 	sub.w	r2, r8, #4
 8008344:	4623      	mov	r3, r4
 8008346:	f853 1b04 	ldr.w	r1, [r3], #4
 800834a:	f842 1f04 	str.w	r1, [r2, #4]!
 800834e:	429f      	cmp	r7, r3
 8008350:	d2f9      	bcs.n	8008346 <__hexnan+0xaa>
 8008352:	1b3b      	subs	r3, r7, r4
 8008354:	f023 0303 	bic.w	r3, r3, #3
 8008358:	3304      	adds	r3, #4
 800835a:	3401      	adds	r4, #1
 800835c:	3e03      	subs	r6, #3
 800835e:	42b4      	cmp	r4, r6
 8008360:	bf88      	it	hi
 8008362:	2304      	movhi	r3, #4
 8008364:	4443      	add	r3, r8
 8008366:	2200      	movs	r2, #0
 8008368:	f843 2b04 	str.w	r2, [r3], #4
 800836c:	429f      	cmp	r7, r3
 800836e:	d2fb      	bcs.n	8008368 <__hexnan+0xcc>
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	b91b      	cbnz	r3, 800837c <__hexnan+0xe0>
 8008374:	4547      	cmp	r7, r8
 8008376:	d127      	bne.n	80083c8 <__hexnan+0x12c>
 8008378:	2301      	movs	r3, #1
 800837a:	603b      	str	r3, [r7, #0]
 800837c:	2005      	movs	r0, #5
 800837e:	e026      	b.n	80083ce <__hexnan+0x132>
 8008380:	3501      	adds	r5, #1
 8008382:	2d08      	cmp	r5, #8
 8008384:	f10b 0b01 	add.w	fp, fp, #1
 8008388:	dd06      	ble.n	8008398 <__hexnan+0xfc>
 800838a:	4544      	cmp	r4, r8
 800838c:	d9c3      	bls.n	8008316 <__hexnan+0x7a>
 800838e:	2300      	movs	r3, #0
 8008390:	f844 3c04 	str.w	r3, [r4, #-4]
 8008394:	2501      	movs	r5, #1
 8008396:	3c04      	subs	r4, #4
 8008398:	6822      	ldr	r2, [r4, #0]
 800839a:	f000 000f 	and.w	r0, r0, #15
 800839e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80083a2:	6022      	str	r2, [r4, #0]
 80083a4:	e7b7      	b.n	8008316 <__hexnan+0x7a>
 80083a6:	2508      	movs	r5, #8
 80083a8:	e7b5      	b.n	8008316 <__hexnan+0x7a>
 80083aa:	9b01      	ldr	r3, [sp, #4]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d0df      	beq.n	8008370 <__hexnan+0xd4>
 80083b0:	f04f 32ff 	mov.w	r2, #4294967295
 80083b4:	f1c3 0320 	rsb	r3, r3, #32
 80083b8:	fa22 f303 	lsr.w	r3, r2, r3
 80083bc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80083c0:	401a      	ands	r2, r3
 80083c2:	f846 2c04 	str.w	r2, [r6, #-4]
 80083c6:	e7d3      	b.n	8008370 <__hexnan+0xd4>
 80083c8:	3f04      	subs	r7, #4
 80083ca:	e7d1      	b.n	8008370 <__hexnan+0xd4>
 80083cc:	2004      	movs	r0, #4
 80083ce:	b007      	add	sp, #28
 80083d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080083d4 <_localeconv_r>:
 80083d4:	4800      	ldr	r0, [pc, #0]	; (80083d8 <_localeconv_r+0x4>)
 80083d6:	4770      	bx	lr
 80083d8:	20000170 	.word	0x20000170

080083dc <_lseek_r>:
 80083dc:	b538      	push	{r3, r4, r5, lr}
 80083de:	4d07      	ldr	r5, [pc, #28]	; (80083fc <_lseek_r+0x20>)
 80083e0:	4604      	mov	r4, r0
 80083e2:	4608      	mov	r0, r1
 80083e4:	4611      	mov	r1, r2
 80083e6:	2200      	movs	r2, #0
 80083e8:	602a      	str	r2, [r5, #0]
 80083ea:	461a      	mov	r2, r3
 80083ec:	f7f9 fd08 	bl	8001e00 <_lseek>
 80083f0:	1c43      	adds	r3, r0, #1
 80083f2:	d102      	bne.n	80083fa <_lseek_r+0x1e>
 80083f4:	682b      	ldr	r3, [r5, #0]
 80083f6:	b103      	cbz	r3, 80083fa <_lseek_r+0x1e>
 80083f8:	6023      	str	r3, [r4, #0]
 80083fa:	bd38      	pop	{r3, r4, r5, pc}
 80083fc:	200003c4 	.word	0x200003c4

08008400 <malloc>:
 8008400:	4b02      	ldr	r3, [pc, #8]	; (800840c <malloc+0xc>)
 8008402:	4601      	mov	r1, r0
 8008404:	6818      	ldr	r0, [r3, #0]
 8008406:	f000 bd67 	b.w	8008ed8 <_malloc_r>
 800840a:	bf00      	nop
 800840c:	20000018 	.word	0x20000018

08008410 <__ascii_mbtowc>:
 8008410:	b082      	sub	sp, #8
 8008412:	b901      	cbnz	r1, 8008416 <__ascii_mbtowc+0x6>
 8008414:	a901      	add	r1, sp, #4
 8008416:	b142      	cbz	r2, 800842a <__ascii_mbtowc+0x1a>
 8008418:	b14b      	cbz	r3, 800842e <__ascii_mbtowc+0x1e>
 800841a:	7813      	ldrb	r3, [r2, #0]
 800841c:	600b      	str	r3, [r1, #0]
 800841e:	7812      	ldrb	r2, [r2, #0]
 8008420:	1e10      	subs	r0, r2, #0
 8008422:	bf18      	it	ne
 8008424:	2001      	movne	r0, #1
 8008426:	b002      	add	sp, #8
 8008428:	4770      	bx	lr
 800842a:	4610      	mov	r0, r2
 800842c:	e7fb      	b.n	8008426 <__ascii_mbtowc+0x16>
 800842e:	f06f 0001 	mvn.w	r0, #1
 8008432:	e7f8      	b.n	8008426 <__ascii_mbtowc+0x16>

08008434 <memcpy>:
 8008434:	440a      	add	r2, r1
 8008436:	4291      	cmp	r1, r2
 8008438:	f100 33ff 	add.w	r3, r0, #4294967295
 800843c:	d100      	bne.n	8008440 <memcpy+0xc>
 800843e:	4770      	bx	lr
 8008440:	b510      	push	{r4, lr}
 8008442:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008446:	f803 4f01 	strb.w	r4, [r3, #1]!
 800844a:	4291      	cmp	r1, r2
 800844c:	d1f9      	bne.n	8008442 <memcpy+0xe>
 800844e:	bd10      	pop	{r4, pc}

08008450 <_Balloc>:
 8008450:	b570      	push	{r4, r5, r6, lr}
 8008452:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008454:	4604      	mov	r4, r0
 8008456:	460d      	mov	r5, r1
 8008458:	b976      	cbnz	r6, 8008478 <_Balloc+0x28>
 800845a:	2010      	movs	r0, #16
 800845c:	f7ff ffd0 	bl	8008400 <malloc>
 8008460:	4602      	mov	r2, r0
 8008462:	6260      	str	r0, [r4, #36]	; 0x24
 8008464:	b920      	cbnz	r0, 8008470 <_Balloc+0x20>
 8008466:	4b18      	ldr	r3, [pc, #96]	; (80084c8 <_Balloc+0x78>)
 8008468:	4818      	ldr	r0, [pc, #96]	; (80084cc <_Balloc+0x7c>)
 800846a:	2166      	movs	r1, #102	; 0x66
 800846c:	f001 fb5c 	bl	8009b28 <__assert_func>
 8008470:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008474:	6006      	str	r6, [r0, #0]
 8008476:	60c6      	str	r6, [r0, #12]
 8008478:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800847a:	68f3      	ldr	r3, [r6, #12]
 800847c:	b183      	cbz	r3, 80084a0 <_Balloc+0x50>
 800847e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008480:	68db      	ldr	r3, [r3, #12]
 8008482:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008486:	b9b8      	cbnz	r0, 80084b8 <_Balloc+0x68>
 8008488:	2101      	movs	r1, #1
 800848a:	fa01 f605 	lsl.w	r6, r1, r5
 800848e:	1d72      	adds	r2, r6, #5
 8008490:	0092      	lsls	r2, r2, #2
 8008492:	4620      	mov	r0, r4
 8008494:	f000 fc9d 	bl	8008dd2 <_calloc_r>
 8008498:	b160      	cbz	r0, 80084b4 <_Balloc+0x64>
 800849a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800849e:	e00e      	b.n	80084be <_Balloc+0x6e>
 80084a0:	2221      	movs	r2, #33	; 0x21
 80084a2:	2104      	movs	r1, #4
 80084a4:	4620      	mov	r0, r4
 80084a6:	f000 fc94 	bl	8008dd2 <_calloc_r>
 80084aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084ac:	60f0      	str	r0, [r6, #12]
 80084ae:	68db      	ldr	r3, [r3, #12]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d1e4      	bne.n	800847e <_Balloc+0x2e>
 80084b4:	2000      	movs	r0, #0
 80084b6:	bd70      	pop	{r4, r5, r6, pc}
 80084b8:	6802      	ldr	r2, [r0, #0]
 80084ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80084be:	2300      	movs	r3, #0
 80084c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80084c4:	e7f7      	b.n	80084b6 <_Balloc+0x66>
 80084c6:	bf00      	nop
 80084c8:	0800a79e 	.word	0x0800a79e
 80084cc:	0800a89c 	.word	0x0800a89c

080084d0 <_Bfree>:
 80084d0:	b570      	push	{r4, r5, r6, lr}
 80084d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80084d4:	4605      	mov	r5, r0
 80084d6:	460c      	mov	r4, r1
 80084d8:	b976      	cbnz	r6, 80084f8 <_Bfree+0x28>
 80084da:	2010      	movs	r0, #16
 80084dc:	f7ff ff90 	bl	8008400 <malloc>
 80084e0:	4602      	mov	r2, r0
 80084e2:	6268      	str	r0, [r5, #36]	; 0x24
 80084e4:	b920      	cbnz	r0, 80084f0 <_Bfree+0x20>
 80084e6:	4b09      	ldr	r3, [pc, #36]	; (800850c <_Bfree+0x3c>)
 80084e8:	4809      	ldr	r0, [pc, #36]	; (8008510 <_Bfree+0x40>)
 80084ea:	218a      	movs	r1, #138	; 0x8a
 80084ec:	f001 fb1c 	bl	8009b28 <__assert_func>
 80084f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80084f4:	6006      	str	r6, [r0, #0]
 80084f6:	60c6      	str	r6, [r0, #12]
 80084f8:	b13c      	cbz	r4, 800850a <_Bfree+0x3a>
 80084fa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80084fc:	6862      	ldr	r2, [r4, #4]
 80084fe:	68db      	ldr	r3, [r3, #12]
 8008500:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008504:	6021      	str	r1, [r4, #0]
 8008506:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800850a:	bd70      	pop	{r4, r5, r6, pc}
 800850c:	0800a79e 	.word	0x0800a79e
 8008510:	0800a89c 	.word	0x0800a89c

08008514 <__multadd>:
 8008514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008518:	690d      	ldr	r5, [r1, #16]
 800851a:	4607      	mov	r7, r0
 800851c:	460c      	mov	r4, r1
 800851e:	461e      	mov	r6, r3
 8008520:	f101 0c14 	add.w	ip, r1, #20
 8008524:	2000      	movs	r0, #0
 8008526:	f8dc 3000 	ldr.w	r3, [ip]
 800852a:	b299      	uxth	r1, r3
 800852c:	fb02 6101 	mla	r1, r2, r1, r6
 8008530:	0c1e      	lsrs	r6, r3, #16
 8008532:	0c0b      	lsrs	r3, r1, #16
 8008534:	fb02 3306 	mla	r3, r2, r6, r3
 8008538:	b289      	uxth	r1, r1
 800853a:	3001      	adds	r0, #1
 800853c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008540:	4285      	cmp	r5, r0
 8008542:	f84c 1b04 	str.w	r1, [ip], #4
 8008546:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800854a:	dcec      	bgt.n	8008526 <__multadd+0x12>
 800854c:	b30e      	cbz	r6, 8008592 <__multadd+0x7e>
 800854e:	68a3      	ldr	r3, [r4, #8]
 8008550:	42ab      	cmp	r3, r5
 8008552:	dc19      	bgt.n	8008588 <__multadd+0x74>
 8008554:	6861      	ldr	r1, [r4, #4]
 8008556:	4638      	mov	r0, r7
 8008558:	3101      	adds	r1, #1
 800855a:	f7ff ff79 	bl	8008450 <_Balloc>
 800855e:	4680      	mov	r8, r0
 8008560:	b928      	cbnz	r0, 800856e <__multadd+0x5a>
 8008562:	4602      	mov	r2, r0
 8008564:	4b0c      	ldr	r3, [pc, #48]	; (8008598 <__multadd+0x84>)
 8008566:	480d      	ldr	r0, [pc, #52]	; (800859c <__multadd+0x88>)
 8008568:	21b5      	movs	r1, #181	; 0xb5
 800856a:	f001 fadd 	bl	8009b28 <__assert_func>
 800856e:	6922      	ldr	r2, [r4, #16]
 8008570:	3202      	adds	r2, #2
 8008572:	f104 010c 	add.w	r1, r4, #12
 8008576:	0092      	lsls	r2, r2, #2
 8008578:	300c      	adds	r0, #12
 800857a:	f7ff ff5b 	bl	8008434 <memcpy>
 800857e:	4621      	mov	r1, r4
 8008580:	4638      	mov	r0, r7
 8008582:	f7ff ffa5 	bl	80084d0 <_Bfree>
 8008586:	4644      	mov	r4, r8
 8008588:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800858c:	3501      	adds	r5, #1
 800858e:	615e      	str	r6, [r3, #20]
 8008590:	6125      	str	r5, [r4, #16]
 8008592:	4620      	mov	r0, r4
 8008594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008598:	0800a810 	.word	0x0800a810
 800859c:	0800a89c 	.word	0x0800a89c

080085a0 <__s2b>:
 80085a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085a4:	460c      	mov	r4, r1
 80085a6:	4615      	mov	r5, r2
 80085a8:	461f      	mov	r7, r3
 80085aa:	2209      	movs	r2, #9
 80085ac:	3308      	adds	r3, #8
 80085ae:	4606      	mov	r6, r0
 80085b0:	fb93 f3f2 	sdiv	r3, r3, r2
 80085b4:	2100      	movs	r1, #0
 80085b6:	2201      	movs	r2, #1
 80085b8:	429a      	cmp	r2, r3
 80085ba:	db09      	blt.n	80085d0 <__s2b+0x30>
 80085bc:	4630      	mov	r0, r6
 80085be:	f7ff ff47 	bl	8008450 <_Balloc>
 80085c2:	b940      	cbnz	r0, 80085d6 <__s2b+0x36>
 80085c4:	4602      	mov	r2, r0
 80085c6:	4b19      	ldr	r3, [pc, #100]	; (800862c <__s2b+0x8c>)
 80085c8:	4819      	ldr	r0, [pc, #100]	; (8008630 <__s2b+0x90>)
 80085ca:	21ce      	movs	r1, #206	; 0xce
 80085cc:	f001 faac 	bl	8009b28 <__assert_func>
 80085d0:	0052      	lsls	r2, r2, #1
 80085d2:	3101      	adds	r1, #1
 80085d4:	e7f0      	b.n	80085b8 <__s2b+0x18>
 80085d6:	9b08      	ldr	r3, [sp, #32]
 80085d8:	6143      	str	r3, [r0, #20]
 80085da:	2d09      	cmp	r5, #9
 80085dc:	f04f 0301 	mov.w	r3, #1
 80085e0:	6103      	str	r3, [r0, #16]
 80085e2:	dd16      	ble.n	8008612 <__s2b+0x72>
 80085e4:	f104 0909 	add.w	r9, r4, #9
 80085e8:	46c8      	mov	r8, r9
 80085ea:	442c      	add	r4, r5
 80085ec:	f818 3b01 	ldrb.w	r3, [r8], #1
 80085f0:	4601      	mov	r1, r0
 80085f2:	3b30      	subs	r3, #48	; 0x30
 80085f4:	220a      	movs	r2, #10
 80085f6:	4630      	mov	r0, r6
 80085f8:	f7ff ff8c 	bl	8008514 <__multadd>
 80085fc:	45a0      	cmp	r8, r4
 80085fe:	d1f5      	bne.n	80085ec <__s2b+0x4c>
 8008600:	f1a5 0408 	sub.w	r4, r5, #8
 8008604:	444c      	add	r4, r9
 8008606:	1b2d      	subs	r5, r5, r4
 8008608:	1963      	adds	r3, r4, r5
 800860a:	42bb      	cmp	r3, r7
 800860c:	db04      	blt.n	8008618 <__s2b+0x78>
 800860e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008612:	340a      	adds	r4, #10
 8008614:	2509      	movs	r5, #9
 8008616:	e7f6      	b.n	8008606 <__s2b+0x66>
 8008618:	f814 3b01 	ldrb.w	r3, [r4], #1
 800861c:	4601      	mov	r1, r0
 800861e:	3b30      	subs	r3, #48	; 0x30
 8008620:	220a      	movs	r2, #10
 8008622:	4630      	mov	r0, r6
 8008624:	f7ff ff76 	bl	8008514 <__multadd>
 8008628:	e7ee      	b.n	8008608 <__s2b+0x68>
 800862a:	bf00      	nop
 800862c:	0800a810 	.word	0x0800a810
 8008630:	0800a89c 	.word	0x0800a89c

08008634 <__hi0bits>:
 8008634:	0c03      	lsrs	r3, r0, #16
 8008636:	041b      	lsls	r3, r3, #16
 8008638:	b9d3      	cbnz	r3, 8008670 <__hi0bits+0x3c>
 800863a:	0400      	lsls	r0, r0, #16
 800863c:	2310      	movs	r3, #16
 800863e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008642:	bf04      	itt	eq
 8008644:	0200      	lsleq	r0, r0, #8
 8008646:	3308      	addeq	r3, #8
 8008648:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800864c:	bf04      	itt	eq
 800864e:	0100      	lsleq	r0, r0, #4
 8008650:	3304      	addeq	r3, #4
 8008652:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008656:	bf04      	itt	eq
 8008658:	0080      	lsleq	r0, r0, #2
 800865a:	3302      	addeq	r3, #2
 800865c:	2800      	cmp	r0, #0
 800865e:	db05      	blt.n	800866c <__hi0bits+0x38>
 8008660:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008664:	f103 0301 	add.w	r3, r3, #1
 8008668:	bf08      	it	eq
 800866a:	2320      	moveq	r3, #32
 800866c:	4618      	mov	r0, r3
 800866e:	4770      	bx	lr
 8008670:	2300      	movs	r3, #0
 8008672:	e7e4      	b.n	800863e <__hi0bits+0xa>

08008674 <__lo0bits>:
 8008674:	6803      	ldr	r3, [r0, #0]
 8008676:	f013 0207 	ands.w	r2, r3, #7
 800867a:	4601      	mov	r1, r0
 800867c:	d00b      	beq.n	8008696 <__lo0bits+0x22>
 800867e:	07da      	lsls	r2, r3, #31
 8008680:	d423      	bmi.n	80086ca <__lo0bits+0x56>
 8008682:	0798      	lsls	r0, r3, #30
 8008684:	bf49      	itett	mi
 8008686:	085b      	lsrmi	r3, r3, #1
 8008688:	089b      	lsrpl	r3, r3, #2
 800868a:	2001      	movmi	r0, #1
 800868c:	600b      	strmi	r3, [r1, #0]
 800868e:	bf5c      	itt	pl
 8008690:	600b      	strpl	r3, [r1, #0]
 8008692:	2002      	movpl	r0, #2
 8008694:	4770      	bx	lr
 8008696:	b298      	uxth	r0, r3
 8008698:	b9a8      	cbnz	r0, 80086c6 <__lo0bits+0x52>
 800869a:	0c1b      	lsrs	r3, r3, #16
 800869c:	2010      	movs	r0, #16
 800869e:	b2da      	uxtb	r2, r3
 80086a0:	b90a      	cbnz	r2, 80086a6 <__lo0bits+0x32>
 80086a2:	3008      	adds	r0, #8
 80086a4:	0a1b      	lsrs	r3, r3, #8
 80086a6:	071a      	lsls	r2, r3, #28
 80086a8:	bf04      	itt	eq
 80086aa:	091b      	lsreq	r3, r3, #4
 80086ac:	3004      	addeq	r0, #4
 80086ae:	079a      	lsls	r2, r3, #30
 80086b0:	bf04      	itt	eq
 80086b2:	089b      	lsreq	r3, r3, #2
 80086b4:	3002      	addeq	r0, #2
 80086b6:	07da      	lsls	r2, r3, #31
 80086b8:	d403      	bmi.n	80086c2 <__lo0bits+0x4e>
 80086ba:	085b      	lsrs	r3, r3, #1
 80086bc:	f100 0001 	add.w	r0, r0, #1
 80086c0:	d005      	beq.n	80086ce <__lo0bits+0x5a>
 80086c2:	600b      	str	r3, [r1, #0]
 80086c4:	4770      	bx	lr
 80086c6:	4610      	mov	r0, r2
 80086c8:	e7e9      	b.n	800869e <__lo0bits+0x2a>
 80086ca:	2000      	movs	r0, #0
 80086cc:	4770      	bx	lr
 80086ce:	2020      	movs	r0, #32
 80086d0:	4770      	bx	lr
	...

080086d4 <__i2b>:
 80086d4:	b510      	push	{r4, lr}
 80086d6:	460c      	mov	r4, r1
 80086d8:	2101      	movs	r1, #1
 80086da:	f7ff feb9 	bl	8008450 <_Balloc>
 80086de:	4602      	mov	r2, r0
 80086e0:	b928      	cbnz	r0, 80086ee <__i2b+0x1a>
 80086e2:	4b05      	ldr	r3, [pc, #20]	; (80086f8 <__i2b+0x24>)
 80086e4:	4805      	ldr	r0, [pc, #20]	; (80086fc <__i2b+0x28>)
 80086e6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80086ea:	f001 fa1d 	bl	8009b28 <__assert_func>
 80086ee:	2301      	movs	r3, #1
 80086f0:	6144      	str	r4, [r0, #20]
 80086f2:	6103      	str	r3, [r0, #16]
 80086f4:	bd10      	pop	{r4, pc}
 80086f6:	bf00      	nop
 80086f8:	0800a810 	.word	0x0800a810
 80086fc:	0800a89c 	.word	0x0800a89c

08008700 <__multiply>:
 8008700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008704:	4691      	mov	r9, r2
 8008706:	690a      	ldr	r2, [r1, #16]
 8008708:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800870c:	429a      	cmp	r2, r3
 800870e:	bfb8      	it	lt
 8008710:	460b      	movlt	r3, r1
 8008712:	460c      	mov	r4, r1
 8008714:	bfbc      	itt	lt
 8008716:	464c      	movlt	r4, r9
 8008718:	4699      	movlt	r9, r3
 800871a:	6927      	ldr	r7, [r4, #16]
 800871c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008720:	68a3      	ldr	r3, [r4, #8]
 8008722:	6861      	ldr	r1, [r4, #4]
 8008724:	eb07 060a 	add.w	r6, r7, sl
 8008728:	42b3      	cmp	r3, r6
 800872a:	b085      	sub	sp, #20
 800872c:	bfb8      	it	lt
 800872e:	3101      	addlt	r1, #1
 8008730:	f7ff fe8e 	bl	8008450 <_Balloc>
 8008734:	b930      	cbnz	r0, 8008744 <__multiply+0x44>
 8008736:	4602      	mov	r2, r0
 8008738:	4b44      	ldr	r3, [pc, #272]	; (800884c <__multiply+0x14c>)
 800873a:	4845      	ldr	r0, [pc, #276]	; (8008850 <__multiply+0x150>)
 800873c:	f240 115d 	movw	r1, #349	; 0x15d
 8008740:	f001 f9f2 	bl	8009b28 <__assert_func>
 8008744:	f100 0514 	add.w	r5, r0, #20
 8008748:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800874c:	462b      	mov	r3, r5
 800874e:	2200      	movs	r2, #0
 8008750:	4543      	cmp	r3, r8
 8008752:	d321      	bcc.n	8008798 <__multiply+0x98>
 8008754:	f104 0314 	add.w	r3, r4, #20
 8008758:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800875c:	f109 0314 	add.w	r3, r9, #20
 8008760:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008764:	9202      	str	r2, [sp, #8]
 8008766:	1b3a      	subs	r2, r7, r4
 8008768:	3a15      	subs	r2, #21
 800876a:	f022 0203 	bic.w	r2, r2, #3
 800876e:	3204      	adds	r2, #4
 8008770:	f104 0115 	add.w	r1, r4, #21
 8008774:	428f      	cmp	r7, r1
 8008776:	bf38      	it	cc
 8008778:	2204      	movcc	r2, #4
 800877a:	9201      	str	r2, [sp, #4]
 800877c:	9a02      	ldr	r2, [sp, #8]
 800877e:	9303      	str	r3, [sp, #12]
 8008780:	429a      	cmp	r2, r3
 8008782:	d80c      	bhi.n	800879e <__multiply+0x9e>
 8008784:	2e00      	cmp	r6, #0
 8008786:	dd03      	ble.n	8008790 <__multiply+0x90>
 8008788:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800878c:	2b00      	cmp	r3, #0
 800878e:	d05a      	beq.n	8008846 <__multiply+0x146>
 8008790:	6106      	str	r6, [r0, #16]
 8008792:	b005      	add	sp, #20
 8008794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008798:	f843 2b04 	str.w	r2, [r3], #4
 800879c:	e7d8      	b.n	8008750 <__multiply+0x50>
 800879e:	f8b3 a000 	ldrh.w	sl, [r3]
 80087a2:	f1ba 0f00 	cmp.w	sl, #0
 80087a6:	d024      	beq.n	80087f2 <__multiply+0xf2>
 80087a8:	f104 0e14 	add.w	lr, r4, #20
 80087ac:	46a9      	mov	r9, r5
 80087ae:	f04f 0c00 	mov.w	ip, #0
 80087b2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80087b6:	f8d9 1000 	ldr.w	r1, [r9]
 80087ba:	fa1f fb82 	uxth.w	fp, r2
 80087be:	b289      	uxth	r1, r1
 80087c0:	fb0a 110b 	mla	r1, sl, fp, r1
 80087c4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80087c8:	f8d9 2000 	ldr.w	r2, [r9]
 80087cc:	4461      	add	r1, ip
 80087ce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80087d2:	fb0a c20b 	mla	r2, sl, fp, ip
 80087d6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80087da:	b289      	uxth	r1, r1
 80087dc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80087e0:	4577      	cmp	r7, lr
 80087e2:	f849 1b04 	str.w	r1, [r9], #4
 80087e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80087ea:	d8e2      	bhi.n	80087b2 <__multiply+0xb2>
 80087ec:	9a01      	ldr	r2, [sp, #4]
 80087ee:	f845 c002 	str.w	ip, [r5, r2]
 80087f2:	9a03      	ldr	r2, [sp, #12]
 80087f4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80087f8:	3304      	adds	r3, #4
 80087fa:	f1b9 0f00 	cmp.w	r9, #0
 80087fe:	d020      	beq.n	8008842 <__multiply+0x142>
 8008800:	6829      	ldr	r1, [r5, #0]
 8008802:	f104 0c14 	add.w	ip, r4, #20
 8008806:	46ae      	mov	lr, r5
 8008808:	f04f 0a00 	mov.w	sl, #0
 800880c:	f8bc b000 	ldrh.w	fp, [ip]
 8008810:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008814:	fb09 220b 	mla	r2, r9, fp, r2
 8008818:	4492      	add	sl, r2
 800881a:	b289      	uxth	r1, r1
 800881c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008820:	f84e 1b04 	str.w	r1, [lr], #4
 8008824:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008828:	f8be 1000 	ldrh.w	r1, [lr]
 800882c:	0c12      	lsrs	r2, r2, #16
 800882e:	fb09 1102 	mla	r1, r9, r2, r1
 8008832:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008836:	4567      	cmp	r7, ip
 8008838:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800883c:	d8e6      	bhi.n	800880c <__multiply+0x10c>
 800883e:	9a01      	ldr	r2, [sp, #4]
 8008840:	50a9      	str	r1, [r5, r2]
 8008842:	3504      	adds	r5, #4
 8008844:	e79a      	b.n	800877c <__multiply+0x7c>
 8008846:	3e01      	subs	r6, #1
 8008848:	e79c      	b.n	8008784 <__multiply+0x84>
 800884a:	bf00      	nop
 800884c:	0800a810 	.word	0x0800a810
 8008850:	0800a89c 	.word	0x0800a89c

08008854 <__pow5mult>:
 8008854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008858:	4615      	mov	r5, r2
 800885a:	f012 0203 	ands.w	r2, r2, #3
 800885e:	4606      	mov	r6, r0
 8008860:	460f      	mov	r7, r1
 8008862:	d007      	beq.n	8008874 <__pow5mult+0x20>
 8008864:	4c25      	ldr	r4, [pc, #148]	; (80088fc <__pow5mult+0xa8>)
 8008866:	3a01      	subs	r2, #1
 8008868:	2300      	movs	r3, #0
 800886a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800886e:	f7ff fe51 	bl	8008514 <__multadd>
 8008872:	4607      	mov	r7, r0
 8008874:	10ad      	asrs	r5, r5, #2
 8008876:	d03d      	beq.n	80088f4 <__pow5mult+0xa0>
 8008878:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800887a:	b97c      	cbnz	r4, 800889c <__pow5mult+0x48>
 800887c:	2010      	movs	r0, #16
 800887e:	f7ff fdbf 	bl	8008400 <malloc>
 8008882:	4602      	mov	r2, r0
 8008884:	6270      	str	r0, [r6, #36]	; 0x24
 8008886:	b928      	cbnz	r0, 8008894 <__pow5mult+0x40>
 8008888:	4b1d      	ldr	r3, [pc, #116]	; (8008900 <__pow5mult+0xac>)
 800888a:	481e      	ldr	r0, [pc, #120]	; (8008904 <__pow5mult+0xb0>)
 800888c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008890:	f001 f94a 	bl	8009b28 <__assert_func>
 8008894:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008898:	6004      	str	r4, [r0, #0]
 800889a:	60c4      	str	r4, [r0, #12]
 800889c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80088a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80088a4:	b94c      	cbnz	r4, 80088ba <__pow5mult+0x66>
 80088a6:	f240 2171 	movw	r1, #625	; 0x271
 80088aa:	4630      	mov	r0, r6
 80088ac:	f7ff ff12 	bl	80086d4 <__i2b>
 80088b0:	2300      	movs	r3, #0
 80088b2:	f8c8 0008 	str.w	r0, [r8, #8]
 80088b6:	4604      	mov	r4, r0
 80088b8:	6003      	str	r3, [r0, #0]
 80088ba:	f04f 0900 	mov.w	r9, #0
 80088be:	07eb      	lsls	r3, r5, #31
 80088c0:	d50a      	bpl.n	80088d8 <__pow5mult+0x84>
 80088c2:	4639      	mov	r1, r7
 80088c4:	4622      	mov	r2, r4
 80088c6:	4630      	mov	r0, r6
 80088c8:	f7ff ff1a 	bl	8008700 <__multiply>
 80088cc:	4639      	mov	r1, r7
 80088ce:	4680      	mov	r8, r0
 80088d0:	4630      	mov	r0, r6
 80088d2:	f7ff fdfd 	bl	80084d0 <_Bfree>
 80088d6:	4647      	mov	r7, r8
 80088d8:	106d      	asrs	r5, r5, #1
 80088da:	d00b      	beq.n	80088f4 <__pow5mult+0xa0>
 80088dc:	6820      	ldr	r0, [r4, #0]
 80088de:	b938      	cbnz	r0, 80088f0 <__pow5mult+0x9c>
 80088e0:	4622      	mov	r2, r4
 80088e2:	4621      	mov	r1, r4
 80088e4:	4630      	mov	r0, r6
 80088e6:	f7ff ff0b 	bl	8008700 <__multiply>
 80088ea:	6020      	str	r0, [r4, #0]
 80088ec:	f8c0 9000 	str.w	r9, [r0]
 80088f0:	4604      	mov	r4, r0
 80088f2:	e7e4      	b.n	80088be <__pow5mult+0x6a>
 80088f4:	4638      	mov	r0, r7
 80088f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088fa:	bf00      	nop
 80088fc:	0800a9e8 	.word	0x0800a9e8
 8008900:	0800a79e 	.word	0x0800a79e
 8008904:	0800a89c 	.word	0x0800a89c

08008908 <__lshift>:
 8008908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800890c:	460c      	mov	r4, r1
 800890e:	6849      	ldr	r1, [r1, #4]
 8008910:	6923      	ldr	r3, [r4, #16]
 8008912:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008916:	68a3      	ldr	r3, [r4, #8]
 8008918:	4607      	mov	r7, r0
 800891a:	4691      	mov	r9, r2
 800891c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008920:	f108 0601 	add.w	r6, r8, #1
 8008924:	42b3      	cmp	r3, r6
 8008926:	db0b      	blt.n	8008940 <__lshift+0x38>
 8008928:	4638      	mov	r0, r7
 800892a:	f7ff fd91 	bl	8008450 <_Balloc>
 800892e:	4605      	mov	r5, r0
 8008930:	b948      	cbnz	r0, 8008946 <__lshift+0x3e>
 8008932:	4602      	mov	r2, r0
 8008934:	4b2a      	ldr	r3, [pc, #168]	; (80089e0 <__lshift+0xd8>)
 8008936:	482b      	ldr	r0, [pc, #172]	; (80089e4 <__lshift+0xdc>)
 8008938:	f240 11d9 	movw	r1, #473	; 0x1d9
 800893c:	f001 f8f4 	bl	8009b28 <__assert_func>
 8008940:	3101      	adds	r1, #1
 8008942:	005b      	lsls	r3, r3, #1
 8008944:	e7ee      	b.n	8008924 <__lshift+0x1c>
 8008946:	2300      	movs	r3, #0
 8008948:	f100 0114 	add.w	r1, r0, #20
 800894c:	f100 0210 	add.w	r2, r0, #16
 8008950:	4618      	mov	r0, r3
 8008952:	4553      	cmp	r3, sl
 8008954:	db37      	blt.n	80089c6 <__lshift+0xbe>
 8008956:	6920      	ldr	r0, [r4, #16]
 8008958:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800895c:	f104 0314 	add.w	r3, r4, #20
 8008960:	f019 091f 	ands.w	r9, r9, #31
 8008964:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008968:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800896c:	d02f      	beq.n	80089ce <__lshift+0xc6>
 800896e:	f1c9 0e20 	rsb	lr, r9, #32
 8008972:	468a      	mov	sl, r1
 8008974:	f04f 0c00 	mov.w	ip, #0
 8008978:	681a      	ldr	r2, [r3, #0]
 800897a:	fa02 f209 	lsl.w	r2, r2, r9
 800897e:	ea42 020c 	orr.w	r2, r2, ip
 8008982:	f84a 2b04 	str.w	r2, [sl], #4
 8008986:	f853 2b04 	ldr.w	r2, [r3], #4
 800898a:	4298      	cmp	r0, r3
 800898c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008990:	d8f2      	bhi.n	8008978 <__lshift+0x70>
 8008992:	1b03      	subs	r3, r0, r4
 8008994:	3b15      	subs	r3, #21
 8008996:	f023 0303 	bic.w	r3, r3, #3
 800899a:	3304      	adds	r3, #4
 800899c:	f104 0215 	add.w	r2, r4, #21
 80089a0:	4290      	cmp	r0, r2
 80089a2:	bf38      	it	cc
 80089a4:	2304      	movcc	r3, #4
 80089a6:	f841 c003 	str.w	ip, [r1, r3]
 80089aa:	f1bc 0f00 	cmp.w	ip, #0
 80089ae:	d001      	beq.n	80089b4 <__lshift+0xac>
 80089b0:	f108 0602 	add.w	r6, r8, #2
 80089b4:	3e01      	subs	r6, #1
 80089b6:	4638      	mov	r0, r7
 80089b8:	612e      	str	r6, [r5, #16]
 80089ba:	4621      	mov	r1, r4
 80089bc:	f7ff fd88 	bl	80084d0 <_Bfree>
 80089c0:	4628      	mov	r0, r5
 80089c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089c6:	f842 0f04 	str.w	r0, [r2, #4]!
 80089ca:	3301      	adds	r3, #1
 80089cc:	e7c1      	b.n	8008952 <__lshift+0x4a>
 80089ce:	3904      	subs	r1, #4
 80089d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80089d4:	f841 2f04 	str.w	r2, [r1, #4]!
 80089d8:	4298      	cmp	r0, r3
 80089da:	d8f9      	bhi.n	80089d0 <__lshift+0xc8>
 80089dc:	e7ea      	b.n	80089b4 <__lshift+0xac>
 80089de:	bf00      	nop
 80089e0:	0800a810 	.word	0x0800a810
 80089e4:	0800a89c 	.word	0x0800a89c

080089e8 <__mcmp>:
 80089e8:	b530      	push	{r4, r5, lr}
 80089ea:	6902      	ldr	r2, [r0, #16]
 80089ec:	690c      	ldr	r4, [r1, #16]
 80089ee:	1b12      	subs	r2, r2, r4
 80089f0:	d10e      	bne.n	8008a10 <__mcmp+0x28>
 80089f2:	f100 0314 	add.w	r3, r0, #20
 80089f6:	3114      	adds	r1, #20
 80089f8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80089fc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008a00:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008a04:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008a08:	42a5      	cmp	r5, r4
 8008a0a:	d003      	beq.n	8008a14 <__mcmp+0x2c>
 8008a0c:	d305      	bcc.n	8008a1a <__mcmp+0x32>
 8008a0e:	2201      	movs	r2, #1
 8008a10:	4610      	mov	r0, r2
 8008a12:	bd30      	pop	{r4, r5, pc}
 8008a14:	4283      	cmp	r3, r0
 8008a16:	d3f3      	bcc.n	8008a00 <__mcmp+0x18>
 8008a18:	e7fa      	b.n	8008a10 <__mcmp+0x28>
 8008a1a:	f04f 32ff 	mov.w	r2, #4294967295
 8008a1e:	e7f7      	b.n	8008a10 <__mcmp+0x28>

08008a20 <__mdiff>:
 8008a20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a24:	460c      	mov	r4, r1
 8008a26:	4606      	mov	r6, r0
 8008a28:	4611      	mov	r1, r2
 8008a2a:	4620      	mov	r0, r4
 8008a2c:	4690      	mov	r8, r2
 8008a2e:	f7ff ffdb 	bl	80089e8 <__mcmp>
 8008a32:	1e05      	subs	r5, r0, #0
 8008a34:	d110      	bne.n	8008a58 <__mdiff+0x38>
 8008a36:	4629      	mov	r1, r5
 8008a38:	4630      	mov	r0, r6
 8008a3a:	f7ff fd09 	bl	8008450 <_Balloc>
 8008a3e:	b930      	cbnz	r0, 8008a4e <__mdiff+0x2e>
 8008a40:	4b3a      	ldr	r3, [pc, #232]	; (8008b2c <__mdiff+0x10c>)
 8008a42:	4602      	mov	r2, r0
 8008a44:	f240 2132 	movw	r1, #562	; 0x232
 8008a48:	4839      	ldr	r0, [pc, #228]	; (8008b30 <__mdiff+0x110>)
 8008a4a:	f001 f86d 	bl	8009b28 <__assert_func>
 8008a4e:	2301      	movs	r3, #1
 8008a50:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008a54:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a58:	bfa4      	itt	ge
 8008a5a:	4643      	movge	r3, r8
 8008a5c:	46a0      	movge	r8, r4
 8008a5e:	4630      	mov	r0, r6
 8008a60:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008a64:	bfa6      	itte	ge
 8008a66:	461c      	movge	r4, r3
 8008a68:	2500      	movge	r5, #0
 8008a6a:	2501      	movlt	r5, #1
 8008a6c:	f7ff fcf0 	bl	8008450 <_Balloc>
 8008a70:	b920      	cbnz	r0, 8008a7c <__mdiff+0x5c>
 8008a72:	4b2e      	ldr	r3, [pc, #184]	; (8008b2c <__mdiff+0x10c>)
 8008a74:	4602      	mov	r2, r0
 8008a76:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008a7a:	e7e5      	b.n	8008a48 <__mdiff+0x28>
 8008a7c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008a80:	6926      	ldr	r6, [r4, #16]
 8008a82:	60c5      	str	r5, [r0, #12]
 8008a84:	f104 0914 	add.w	r9, r4, #20
 8008a88:	f108 0514 	add.w	r5, r8, #20
 8008a8c:	f100 0e14 	add.w	lr, r0, #20
 8008a90:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008a94:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008a98:	f108 0210 	add.w	r2, r8, #16
 8008a9c:	46f2      	mov	sl, lr
 8008a9e:	2100      	movs	r1, #0
 8008aa0:	f859 3b04 	ldr.w	r3, [r9], #4
 8008aa4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008aa8:	fa1f f883 	uxth.w	r8, r3
 8008aac:	fa11 f18b 	uxtah	r1, r1, fp
 8008ab0:	0c1b      	lsrs	r3, r3, #16
 8008ab2:	eba1 0808 	sub.w	r8, r1, r8
 8008ab6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008aba:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008abe:	fa1f f888 	uxth.w	r8, r8
 8008ac2:	1419      	asrs	r1, r3, #16
 8008ac4:	454e      	cmp	r6, r9
 8008ac6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008aca:	f84a 3b04 	str.w	r3, [sl], #4
 8008ace:	d8e7      	bhi.n	8008aa0 <__mdiff+0x80>
 8008ad0:	1b33      	subs	r3, r6, r4
 8008ad2:	3b15      	subs	r3, #21
 8008ad4:	f023 0303 	bic.w	r3, r3, #3
 8008ad8:	3304      	adds	r3, #4
 8008ada:	3415      	adds	r4, #21
 8008adc:	42a6      	cmp	r6, r4
 8008ade:	bf38      	it	cc
 8008ae0:	2304      	movcc	r3, #4
 8008ae2:	441d      	add	r5, r3
 8008ae4:	4473      	add	r3, lr
 8008ae6:	469e      	mov	lr, r3
 8008ae8:	462e      	mov	r6, r5
 8008aea:	4566      	cmp	r6, ip
 8008aec:	d30e      	bcc.n	8008b0c <__mdiff+0xec>
 8008aee:	f10c 0203 	add.w	r2, ip, #3
 8008af2:	1b52      	subs	r2, r2, r5
 8008af4:	f022 0203 	bic.w	r2, r2, #3
 8008af8:	3d03      	subs	r5, #3
 8008afa:	45ac      	cmp	ip, r5
 8008afc:	bf38      	it	cc
 8008afe:	2200      	movcc	r2, #0
 8008b00:	441a      	add	r2, r3
 8008b02:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008b06:	b17b      	cbz	r3, 8008b28 <__mdiff+0x108>
 8008b08:	6107      	str	r7, [r0, #16]
 8008b0a:	e7a3      	b.n	8008a54 <__mdiff+0x34>
 8008b0c:	f856 8b04 	ldr.w	r8, [r6], #4
 8008b10:	fa11 f288 	uxtah	r2, r1, r8
 8008b14:	1414      	asrs	r4, r2, #16
 8008b16:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008b1a:	b292      	uxth	r2, r2
 8008b1c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008b20:	f84e 2b04 	str.w	r2, [lr], #4
 8008b24:	1421      	asrs	r1, r4, #16
 8008b26:	e7e0      	b.n	8008aea <__mdiff+0xca>
 8008b28:	3f01      	subs	r7, #1
 8008b2a:	e7ea      	b.n	8008b02 <__mdiff+0xe2>
 8008b2c:	0800a810 	.word	0x0800a810
 8008b30:	0800a89c 	.word	0x0800a89c

08008b34 <__ulp>:
 8008b34:	b082      	sub	sp, #8
 8008b36:	ed8d 0b00 	vstr	d0, [sp]
 8008b3a:	9b01      	ldr	r3, [sp, #4]
 8008b3c:	4912      	ldr	r1, [pc, #72]	; (8008b88 <__ulp+0x54>)
 8008b3e:	4019      	ands	r1, r3
 8008b40:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8008b44:	2900      	cmp	r1, #0
 8008b46:	dd05      	ble.n	8008b54 <__ulp+0x20>
 8008b48:	2200      	movs	r2, #0
 8008b4a:	460b      	mov	r3, r1
 8008b4c:	ec43 2b10 	vmov	d0, r2, r3
 8008b50:	b002      	add	sp, #8
 8008b52:	4770      	bx	lr
 8008b54:	4249      	negs	r1, r1
 8008b56:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8008b5a:	ea4f 5021 	mov.w	r0, r1, asr #20
 8008b5e:	f04f 0200 	mov.w	r2, #0
 8008b62:	f04f 0300 	mov.w	r3, #0
 8008b66:	da04      	bge.n	8008b72 <__ulp+0x3e>
 8008b68:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008b6c:	fa41 f300 	asr.w	r3, r1, r0
 8008b70:	e7ec      	b.n	8008b4c <__ulp+0x18>
 8008b72:	f1a0 0114 	sub.w	r1, r0, #20
 8008b76:	291e      	cmp	r1, #30
 8008b78:	bfda      	itte	le
 8008b7a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8008b7e:	fa20 f101 	lsrle.w	r1, r0, r1
 8008b82:	2101      	movgt	r1, #1
 8008b84:	460a      	mov	r2, r1
 8008b86:	e7e1      	b.n	8008b4c <__ulp+0x18>
 8008b88:	7ff00000 	.word	0x7ff00000

08008b8c <__b2d>:
 8008b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b8e:	6905      	ldr	r5, [r0, #16]
 8008b90:	f100 0714 	add.w	r7, r0, #20
 8008b94:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008b98:	1f2e      	subs	r6, r5, #4
 8008b9a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008b9e:	4620      	mov	r0, r4
 8008ba0:	f7ff fd48 	bl	8008634 <__hi0bits>
 8008ba4:	f1c0 0320 	rsb	r3, r0, #32
 8008ba8:	280a      	cmp	r0, #10
 8008baa:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8008c28 <__b2d+0x9c>
 8008bae:	600b      	str	r3, [r1, #0]
 8008bb0:	dc14      	bgt.n	8008bdc <__b2d+0x50>
 8008bb2:	f1c0 0e0b 	rsb	lr, r0, #11
 8008bb6:	fa24 f10e 	lsr.w	r1, r4, lr
 8008bba:	42b7      	cmp	r7, r6
 8008bbc:	ea41 030c 	orr.w	r3, r1, ip
 8008bc0:	bf34      	ite	cc
 8008bc2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008bc6:	2100      	movcs	r1, #0
 8008bc8:	3015      	adds	r0, #21
 8008bca:	fa04 f000 	lsl.w	r0, r4, r0
 8008bce:	fa21 f10e 	lsr.w	r1, r1, lr
 8008bd2:	ea40 0201 	orr.w	r2, r0, r1
 8008bd6:	ec43 2b10 	vmov	d0, r2, r3
 8008bda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bdc:	42b7      	cmp	r7, r6
 8008bde:	bf3a      	itte	cc
 8008be0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008be4:	f1a5 0608 	subcc.w	r6, r5, #8
 8008be8:	2100      	movcs	r1, #0
 8008bea:	380b      	subs	r0, #11
 8008bec:	d017      	beq.n	8008c1e <__b2d+0x92>
 8008bee:	f1c0 0c20 	rsb	ip, r0, #32
 8008bf2:	fa04 f500 	lsl.w	r5, r4, r0
 8008bf6:	42be      	cmp	r6, r7
 8008bf8:	fa21 f40c 	lsr.w	r4, r1, ip
 8008bfc:	ea45 0504 	orr.w	r5, r5, r4
 8008c00:	bf8c      	ite	hi
 8008c02:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008c06:	2400      	movls	r4, #0
 8008c08:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8008c0c:	fa01 f000 	lsl.w	r0, r1, r0
 8008c10:	fa24 f40c 	lsr.w	r4, r4, ip
 8008c14:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008c18:	ea40 0204 	orr.w	r2, r0, r4
 8008c1c:	e7db      	b.n	8008bd6 <__b2d+0x4a>
 8008c1e:	ea44 030c 	orr.w	r3, r4, ip
 8008c22:	460a      	mov	r2, r1
 8008c24:	e7d7      	b.n	8008bd6 <__b2d+0x4a>
 8008c26:	bf00      	nop
 8008c28:	3ff00000 	.word	0x3ff00000

08008c2c <__d2b>:
 8008c2c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008c30:	4689      	mov	r9, r1
 8008c32:	2101      	movs	r1, #1
 8008c34:	ec57 6b10 	vmov	r6, r7, d0
 8008c38:	4690      	mov	r8, r2
 8008c3a:	f7ff fc09 	bl	8008450 <_Balloc>
 8008c3e:	4604      	mov	r4, r0
 8008c40:	b930      	cbnz	r0, 8008c50 <__d2b+0x24>
 8008c42:	4602      	mov	r2, r0
 8008c44:	4b25      	ldr	r3, [pc, #148]	; (8008cdc <__d2b+0xb0>)
 8008c46:	4826      	ldr	r0, [pc, #152]	; (8008ce0 <__d2b+0xb4>)
 8008c48:	f240 310a 	movw	r1, #778	; 0x30a
 8008c4c:	f000 ff6c 	bl	8009b28 <__assert_func>
 8008c50:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008c54:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008c58:	bb35      	cbnz	r5, 8008ca8 <__d2b+0x7c>
 8008c5a:	2e00      	cmp	r6, #0
 8008c5c:	9301      	str	r3, [sp, #4]
 8008c5e:	d028      	beq.n	8008cb2 <__d2b+0x86>
 8008c60:	4668      	mov	r0, sp
 8008c62:	9600      	str	r6, [sp, #0]
 8008c64:	f7ff fd06 	bl	8008674 <__lo0bits>
 8008c68:	9900      	ldr	r1, [sp, #0]
 8008c6a:	b300      	cbz	r0, 8008cae <__d2b+0x82>
 8008c6c:	9a01      	ldr	r2, [sp, #4]
 8008c6e:	f1c0 0320 	rsb	r3, r0, #32
 8008c72:	fa02 f303 	lsl.w	r3, r2, r3
 8008c76:	430b      	orrs	r3, r1
 8008c78:	40c2      	lsrs	r2, r0
 8008c7a:	6163      	str	r3, [r4, #20]
 8008c7c:	9201      	str	r2, [sp, #4]
 8008c7e:	9b01      	ldr	r3, [sp, #4]
 8008c80:	61a3      	str	r3, [r4, #24]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	bf14      	ite	ne
 8008c86:	2202      	movne	r2, #2
 8008c88:	2201      	moveq	r2, #1
 8008c8a:	6122      	str	r2, [r4, #16]
 8008c8c:	b1d5      	cbz	r5, 8008cc4 <__d2b+0x98>
 8008c8e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008c92:	4405      	add	r5, r0
 8008c94:	f8c9 5000 	str.w	r5, [r9]
 8008c98:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008c9c:	f8c8 0000 	str.w	r0, [r8]
 8008ca0:	4620      	mov	r0, r4
 8008ca2:	b003      	add	sp, #12
 8008ca4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008ca8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008cac:	e7d5      	b.n	8008c5a <__d2b+0x2e>
 8008cae:	6161      	str	r1, [r4, #20]
 8008cb0:	e7e5      	b.n	8008c7e <__d2b+0x52>
 8008cb2:	a801      	add	r0, sp, #4
 8008cb4:	f7ff fcde 	bl	8008674 <__lo0bits>
 8008cb8:	9b01      	ldr	r3, [sp, #4]
 8008cba:	6163      	str	r3, [r4, #20]
 8008cbc:	2201      	movs	r2, #1
 8008cbe:	6122      	str	r2, [r4, #16]
 8008cc0:	3020      	adds	r0, #32
 8008cc2:	e7e3      	b.n	8008c8c <__d2b+0x60>
 8008cc4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008cc8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008ccc:	f8c9 0000 	str.w	r0, [r9]
 8008cd0:	6918      	ldr	r0, [r3, #16]
 8008cd2:	f7ff fcaf 	bl	8008634 <__hi0bits>
 8008cd6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008cda:	e7df      	b.n	8008c9c <__d2b+0x70>
 8008cdc:	0800a810 	.word	0x0800a810
 8008ce0:	0800a89c 	.word	0x0800a89c

08008ce4 <__ratio>:
 8008ce4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ce8:	4688      	mov	r8, r1
 8008cea:	4669      	mov	r1, sp
 8008cec:	4681      	mov	r9, r0
 8008cee:	f7ff ff4d 	bl	8008b8c <__b2d>
 8008cf2:	a901      	add	r1, sp, #4
 8008cf4:	4640      	mov	r0, r8
 8008cf6:	ec55 4b10 	vmov	r4, r5, d0
 8008cfa:	f7ff ff47 	bl	8008b8c <__b2d>
 8008cfe:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008d02:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008d06:	eba3 0c02 	sub.w	ip, r3, r2
 8008d0a:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008d0e:	1a9b      	subs	r3, r3, r2
 8008d10:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008d14:	ec51 0b10 	vmov	r0, r1, d0
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	bfd6      	itet	le
 8008d1c:	460a      	movle	r2, r1
 8008d1e:	462a      	movgt	r2, r5
 8008d20:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008d24:	468b      	mov	fp, r1
 8008d26:	462f      	mov	r7, r5
 8008d28:	bfd4      	ite	le
 8008d2a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008d2e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008d32:	4620      	mov	r0, r4
 8008d34:	ee10 2a10 	vmov	r2, s0
 8008d38:	465b      	mov	r3, fp
 8008d3a:	4639      	mov	r1, r7
 8008d3c:	f7f7 fd8e 	bl	800085c <__aeabi_ddiv>
 8008d40:	ec41 0b10 	vmov	d0, r0, r1
 8008d44:	b003      	add	sp, #12
 8008d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008d4a <__copybits>:
 8008d4a:	3901      	subs	r1, #1
 8008d4c:	b570      	push	{r4, r5, r6, lr}
 8008d4e:	1149      	asrs	r1, r1, #5
 8008d50:	6914      	ldr	r4, [r2, #16]
 8008d52:	3101      	adds	r1, #1
 8008d54:	f102 0314 	add.w	r3, r2, #20
 8008d58:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008d5c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008d60:	1f05      	subs	r5, r0, #4
 8008d62:	42a3      	cmp	r3, r4
 8008d64:	d30c      	bcc.n	8008d80 <__copybits+0x36>
 8008d66:	1aa3      	subs	r3, r4, r2
 8008d68:	3b11      	subs	r3, #17
 8008d6a:	f023 0303 	bic.w	r3, r3, #3
 8008d6e:	3211      	adds	r2, #17
 8008d70:	42a2      	cmp	r2, r4
 8008d72:	bf88      	it	hi
 8008d74:	2300      	movhi	r3, #0
 8008d76:	4418      	add	r0, r3
 8008d78:	2300      	movs	r3, #0
 8008d7a:	4288      	cmp	r0, r1
 8008d7c:	d305      	bcc.n	8008d8a <__copybits+0x40>
 8008d7e:	bd70      	pop	{r4, r5, r6, pc}
 8008d80:	f853 6b04 	ldr.w	r6, [r3], #4
 8008d84:	f845 6f04 	str.w	r6, [r5, #4]!
 8008d88:	e7eb      	b.n	8008d62 <__copybits+0x18>
 8008d8a:	f840 3b04 	str.w	r3, [r0], #4
 8008d8e:	e7f4      	b.n	8008d7a <__copybits+0x30>

08008d90 <__any_on>:
 8008d90:	f100 0214 	add.w	r2, r0, #20
 8008d94:	6900      	ldr	r0, [r0, #16]
 8008d96:	114b      	asrs	r3, r1, #5
 8008d98:	4298      	cmp	r0, r3
 8008d9a:	b510      	push	{r4, lr}
 8008d9c:	db11      	blt.n	8008dc2 <__any_on+0x32>
 8008d9e:	dd0a      	ble.n	8008db6 <__any_on+0x26>
 8008da0:	f011 011f 	ands.w	r1, r1, #31
 8008da4:	d007      	beq.n	8008db6 <__any_on+0x26>
 8008da6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008daa:	fa24 f001 	lsr.w	r0, r4, r1
 8008dae:	fa00 f101 	lsl.w	r1, r0, r1
 8008db2:	428c      	cmp	r4, r1
 8008db4:	d10b      	bne.n	8008dce <__any_on+0x3e>
 8008db6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d803      	bhi.n	8008dc6 <__any_on+0x36>
 8008dbe:	2000      	movs	r0, #0
 8008dc0:	bd10      	pop	{r4, pc}
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	e7f7      	b.n	8008db6 <__any_on+0x26>
 8008dc6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008dca:	2900      	cmp	r1, #0
 8008dcc:	d0f5      	beq.n	8008dba <__any_on+0x2a>
 8008dce:	2001      	movs	r0, #1
 8008dd0:	e7f6      	b.n	8008dc0 <__any_on+0x30>

08008dd2 <_calloc_r>:
 8008dd2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008dd4:	fba1 2402 	umull	r2, r4, r1, r2
 8008dd8:	b94c      	cbnz	r4, 8008dee <_calloc_r+0x1c>
 8008dda:	4611      	mov	r1, r2
 8008ddc:	9201      	str	r2, [sp, #4]
 8008dde:	f000 f87b 	bl	8008ed8 <_malloc_r>
 8008de2:	9a01      	ldr	r2, [sp, #4]
 8008de4:	4605      	mov	r5, r0
 8008de6:	b930      	cbnz	r0, 8008df6 <_calloc_r+0x24>
 8008de8:	4628      	mov	r0, r5
 8008dea:	b003      	add	sp, #12
 8008dec:	bd30      	pop	{r4, r5, pc}
 8008dee:	220c      	movs	r2, #12
 8008df0:	6002      	str	r2, [r0, #0]
 8008df2:	2500      	movs	r5, #0
 8008df4:	e7f8      	b.n	8008de8 <_calloc_r+0x16>
 8008df6:	4621      	mov	r1, r4
 8008df8:	f7fc fb18 	bl	800542c <memset>
 8008dfc:	e7f4      	b.n	8008de8 <_calloc_r+0x16>
	...

08008e00 <_free_r>:
 8008e00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008e02:	2900      	cmp	r1, #0
 8008e04:	d044      	beq.n	8008e90 <_free_r+0x90>
 8008e06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e0a:	9001      	str	r0, [sp, #4]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	f1a1 0404 	sub.w	r4, r1, #4
 8008e12:	bfb8      	it	lt
 8008e14:	18e4      	addlt	r4, r4, r3
 8008e16:	f001 f88b 	bl	8009f30 <__malloc_lock>
 8008e1a:	4a1e      	ldr	r2, [pc, #120]	; (8008e94 <_free_r+0x94>)
 8008e1c:	9801      	ldr	r0, [sp, #4]
 8008e1e:	6813      	ldr	r3, [r2, #0]
 8008e20:	b933      	cbnz	r3, 8008e30 <_free_r+0x30>
 8008e22:	6063      	str	r3, [r4, #4]
 8008e24:	6014      	str	r4, [r2, #0]
 8008e26:	b003      	add	sp, #12
 8008e28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e2c:	f001 b886 	b.w	8009f3c <__malloc_unlock>
 8008e30:	42a3      	cmp	r3, r4
 8008e32:	d908      	bls.n	8008e46 <_free_r+0x46>
 8008e34:	6825      	ldr	r5, [r4, #0]
 8008e36:	1961      	adds	r1, r4, r5
 8008e38:	428b      	cmp	r3, r1
 8008e3a:	bf01      	itttt	eq
 8008e3c:	6819      	ldreq	r1, [r3, #0]
 8008e3e:	685b      	ldreq	r3, [r3, #4]
 8008e40:	1949      	addeq	r1, r1, r5
 8008e42:	6021      	streq	r1, [r4, #0]
 8008e44:	e7ed      	b.n	8008e22 <_free_r+0x22>
 8008e46:	461a      	mov	r2, r3
 8008e48:	685b      	ldr	r3, [r3, #4]
 8008e4a:	b10b      	cbz	r3, 8008e50 <_free_r+0x50>
 8008e4c:	42a3      	cmp	r3, r4
 8008e4e:	d9fa      	bls.n	8008e46 <_free_r+0x46>
 8008e50:	6811      	ldr	r1, [r2, #0]
 8008e52:	1855      	adds	r5, r2, r1
 8008e54:	42a5      	cmp	r5, r4
 8008e56:	d10b      	bne.n	8008e70 <_free_r+0x70>
 8008e58:	6824      	ldr	r4, [r4, #0]
 8008e5a:	4421      	add	r1, r4
 8008e5c:	1854      	adds	r4, r2, r1
 8008e5e:	42a3      	cmp	r3, r4
 8008e60:	6011      	str	r1, [r2, #0]
 8008e62:	d1e0      	bne.n	8008e26 <_free_r+0x26>
 8008e64:	681c      	ldr	r4, [r3, #0]
 8008e66:	685b      	ldr	r3, [r3, #4]
 8008e68:	6053      	str	r3, [r2, #4]
 8008e6a:	4421      	add	r1, r4
 8008e6c:	6011      	str	r1, [r2, #0]
 8008e6e:	e7da      	b.n	8008e26 <_free_r+0x26>
 8008e70:	d902      	bls.n	8008e78 <_free_r+0x78>
 8008e72:	230c      	movs	r3, #12
 8008e74:	6003      	str	r3, [r0, #0]
 8008e76:	e7d6      	b.n	8008e26 <_free_r+0x26>
 8008e78:	6825      	ldr	r5, [r4, #0]
 8008e7a:	1961      	adds	r1, r4, r5
 8008e7c:	428b      	cmp	r3, r1
 8008e7e:	bf04      	itt	eq
 8008e80:	6819      	ldreq	r1, [r3, #0]
 8008e82:	685b      	ldreq	r3, [r3, #4]
 8008e84:	6063      	str	r3, [r4, #4]
 8008e86:	bf04      	itt	eq
 8008e88:	1949      	addeq	r1, r1, r5
 8008e8a:	6021      	streq	r1, [r4, #0]
 8008e8c:	6054      	str	r4, [r2, #4]
 8008e8e:	e7ca      	b.n	8008e26 <_free_r+0x26>
 8008e90:	b003      	add	sp, #12
 8008e92:	bd30      	pop	{r4, r5, pc}
 8008e94:	200003bc 	.word	0x200003bc

08008e98 <sbrk_aligned>:
 8008e98:	b570      	push	{r4, r5, r6, lr}
 8008e9a:	4e0e      	ldr	r6, [pc, #56]	; (8008ed4 <sbrk_aligned+0x3c>)
 8008e9c:	460c      	mov	r4, r1
 8008e9e:	6831      	ldr	r1, [r6, #0]
 8008ea0:	4605      	mov	r5, r0
 8008ea2:	b911      	cbnz	r1, 8008eaa <sbrk_aligned+0x12>
 8008ea4:	f000 fd28 	bl	80098f8 <_sbrk_r>
 8008ea8:	6030      	str	r0, [r6, #0]
 8008eaa:	4621      	mov	r1, r4
 8008eac:	4628      	mov	r0, r5
 8008eae:	f000 fd23 	bl	80098f8 <_sbrk_r>
 8008eb2:	1c43      	adds	r3, r0, #1
 8008eb4:	d00a      	beq.n	8008ecc <sbrk_aligned+0x34>
 8008eb6:	1cc4      	adds	r4, r0, #3
 8008eb8:	f024 0403 	bic.w	r4, r4, #3
 8008ebc:	42a0      	cmp	r0, r4
 8008ebe:	d007      	beq.n	8008ed0 <sbrk_aligned+0x38>
 8008ec0:	1a21      	subs	r1, r4, r0
 8008ec2:	4628      	mov	r0, r5
 8008ec4:	f000 fd18 	bl	80098f8 <_sbrk_r>
 8008ec8:	3001      	adds	r0, #1
 8008eca:	d101      	bne.n	8008ed0 <sbrk_aligned+0x38>
 8008ecc:	f04f 34ff 	mov.w	r4, #4294967295
 8008ed0:	4620      	mov	r0, r4
 8008ed2:	bd70      	pop	{r4, r5, r6, pc}
 8008ed4:	200003c0 	.word	0x200003c0

08008ed8 <_malloc_r>:
 8008ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008edc:	1ccd      	adds	r5, r1, #3
 8008ede:	f025 0503 	bic.w	r5, r5, #3
 8008ee2:	3508      	adds	r5, #8
 8008ee4:	2d0c      	cmp	r5, #12
 8008ee6:	bf38      	it	cc
 8008ee8:	250c      	movcc	r5, #12
 8008eea:	2d00      	cmp	r5, #0
 8008eec:	4607      	mov	r7, r0
 8008eee:	db01      	blt.n	8008ef4 <_malloc_r+0x1c>
 8008ef0:	42a9      	cmp	r1, r5
 8008ef2:	d905      	bls.n	8008f00 <_malloc_r+0x28>
 8008ef4:	230c      	movs	r3, #12
 8008ef6:	603b      	str	r3, [r7, #0]
 8008ef8:	2600      	movs	r6, #0
 8008efa:	4630      	mov	r0, r6
 8008efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f00:	4e2e      	ldr	r6, [pc, #184]	; (8008fbc <_malloc_r+0xe4>)
 8008f02:	f001 f815 	bl	8009f30 <__malloc_lock>
 8008f06:	6833      	ldr	r3, [r6, #0]
 8008f08:	461c      	mov	r4, r3
 8008f0a:	bb34      	cbnz	r4, 8008f5a <_malloc_r+0x82>
 8008f0c:	4629      	mov	r1, r5
 8008f0e:	4638      	mov	r0, r7
 8008f10:	f7ff ffc2 	bl	8008e98 <sbrk_aligned>
 8008f14:	1c43      	adds	r3, r0, #1
 8008f16:	4604      	mov	r4, r0
 8008f18:	d14d      	bne.n	8008fb6 <_malloc_r+0xde>
 8008f1a:	6834      	ldr	r4, [r6, #0]
 8008f1c:	4626      	mov	r6, r4
 8008f1e:	2e00      	cmp	r6, #0
 8008f20:	d140      	bne.n	8008fa4 <_malloc_r+0xcc>
 8008f22:	6823      	ldr	r3, [r4, #0]
 8008f24:	4631      	mov	r1, r6
 8008f26:	4638      	mov	r0, r7
 8008f28:	eb04 0803 	add.w	r8, r4, r3
 8008f2c:	f000 fce4 	bl	80098f8 <_sbrk_r>
 8008f30:	4580      	cmp	r8, r0
 8008f32:	d13a      	bne.n	8008faa <_malloc_r+0xd2>
 8008f34:	6821      	ldr	r1, [r4, #0]
 8008f36:	3503      	adds	r5, #3
 8008f38:	1a6d      	subs	r5, r5, r1
 8008f3a:	f025 0503 	bic.w	r5, r5, #3
 8008f3e:	3508      	adds	r5, #8
 8008f40:	2d0c      	cmp	r5, #12
 8008f42:	bf38      	it	cc
 8008f44:	250c      	movcc	r5, #12
 8008f46:	4629      	mov	r1, r5
 8008f48:	4638      	mov	r0, r7
 8008f4a:	f7ff ffa5 	bl	8008e98 <sbrk_aligned>
 8008f4e:	3001      	adds	r0, #1
 8008f50:	d02b      	beq.n	8008faa <_malloc_r+0xd2>
 8008f52:	6823      	ldr	r3, [r4, #0]
 8008f54:	442b      	add	r3, r5
 8008f56:	6023      	str	r3, [r4, #0]
 8008f58:	e00e      	b.n	8008f78 <_malloc_r+0xa0>
 8008f5a:	6822      	ldr	r2, [r4, #0]
 8008f5c:	1b52      	subs	r2, r2, r5
 8008f5e:	d41e      	bmi.n	8008f9e <_malloc_r+0xc6>
 8008f60:	2a0b      	cmp	r2, #11
 8008f62:	d916      	bls.n	8008f92 <_malloc_r+0xba>
 8008f64:	1961      	adds	r1, r4, r5
 8008f66:	42a3      	cmp	r3, r4
 8008f68:	6025      	str	r5, [r4, #0]
 8008f6a:	bf18      	it	ne
 8008f6c:	6059      	strne	r1, [r3, #4]
 8008f6e:	6863      	ldr	r3, [r4, #4]
 8008f70:	bf08      	it	eq
 8008f72:	6031      	streq	r1, [r6, #0]
 8008f74:	5162      	str	r2, [r4, r5]
 8008f76:	604b      	str	r3, [r1, #4]
 8008f78:	4638      	mov	r0, r7
 8008f7a:	f104 060b 	add.w	r6, r4, #11
 8008f7e:	f000 ffdd 	bl	8009f3c <__malloc_unlock>
 8008f82:	f026 0607 	bic.w	r6, r6, #7
 8008f86:	1d23      	adds	r3, r4, #4
 8008f88:	1af2      	subs	r2, r6, r3
 8008f8a:	d0b6      	beq.n	8008efa <_malloc_r+0x22>
 8008f8c:	1b9b      	subs	r3, r3, r6
 8008f8e:	50a3      	str	r3, [r4, r2]
 8008f90:	e7b3      	b.n	8008efa <_malloc_r+0x22>
 8008f92:	6862      	ldr	r2, [r4, #4]
 8008f94:	42a3      	cmp	r3, r4
 8008f96:	bf0c      	ite	eq
 8008f98:	6032      	streq	r2, [r6, #0]
 8008f9a:	605a      	strne	r2, [r3, #4]
 8008f9c:	e7ec      	b.n	8008f78 <_malloc_r+0xa0>
 8008f9e:	4623      	mov	r3, r4
 8008fa0:	6864      	ldr	r4, [r4, #4]
 8008fa2:	e7b2      	b.n	8008f0a <_malloc_r+0x32>
 8008fa4:	4634      	mov	r4, r6
 8008fa6:	6876      	ldr	r6, [r6, #4]
 8008fa8:	e7b9      	b.n	8008f1e <_malloc_r+0x46>
 8008faa:	230c      	movs	r3, #12
 8008fac:	603b      	str	r3, [r7, #0]
 8008fae:	4638      	mov	r0, r7
 8008fb0:	f000 ffc4 	bl	8009f3c <__malloc_unlock>
 8008fb4:	e7a1      	b.n	8008efa <_malloc_r+0x22>
 8008fb6:	6025      	str	r5, [r4, #0]
 8008fb8:	e7de      	b.n	8008f78 <_malloc_r+0xa0>
 8008fba:	bf00      	nop
 8008fbc:	200003bc 	.word	0x200003bc

08008fc0 <__ssputs_r>:
 8008fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fc4:	688e      	ldr	r6, [r1, #8]
 8008fc6:	429e      	cmp	r6, r3
 8008fc8:	4682      	mov	sl, r0
 8008fca:	460c      	mov	r4, r1
 8008fcc:	4690      	mov	r8, r2
 8008fce:	461f      	mov	r7, r3
 8008fd0:	d838      	bhi.n	8009044 <__ssputs_r+0x84>
 8008fd2:	898a      	ldrh	r2, [r1, #12]
 8008fd4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008fd8:	d032      	beq.n	8009040 <__ssputs_r+0x80>
 8008fda:	6825      	ldr	r5, [r4, #0]
 8008fdc:	6909      	ldr	r1, [r1, #16]
 8008fde:	eba5 0901 	sub.w	r9, r5, r1
 8008fe2:	6965      	ldr	r5, [r4, #20]
 8008fe4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008fe8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008fec:	3301      	adds	r3, #1
 8008fee:	444b      	add	r3, r9
 8008ff0:	106d      	asrs	r5, r5, #1
 8008ff2:	429d      	cmp	r5, r3
 8008ff4:	bf38      	it	cc
 8008ff6:	461d      	movcc	r5, r3
 8008ff8:	0553      	lsls	r3, r2, #21
 8008ffa:	d531      	bpl.n	8009060 <__ssputs_r+0xa0>
 8008ffc:	4629      	mov	r1, r5
 8008ffe:	f7ff ff6b 	bl	8008ed8 <_malloc_r>
 8009002:	4606      	mov	r6, r0
 8009004:	b950      	cbnz	r0, 800901c <__ssputs_r+0x5c>
 8009006:	230c      	movs	r3, #12
 8009008:	f8ca 3000 	str.w	r3, [sl]
 800900c:	89a3      	ldrh	r3, [r4, #12]
 800900e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009012:	81a3      	strh	r3, [r4, #12]
 8009014:	f04f 30ff 	mov.w	r0, #4294967295
 8009018:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800901c:	6921      	ldr	r1, [r4, #16]
 800901e:	464a      	mov	r2, r9
 8009020:	f7ff fa08 	bl	8008434 <memcpy>
 8009024:	89a3      	ldrh	r3, [r4, #12]
 8009026:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800902a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800902e:	81a3      	strh	r3, [r4, #12]
 8009030:	6126      	str	r6, [r4, #16]
 8009032:	6165      	str	r5, [r4, #20]
 8009034:	444e      	add	r6, r9
 8009036:	eba5 0509 	sub.w	r5, r5, r9
 800903a:	6026      	str	r6, [r4, #0]
 800903c:	60a5      	str	r5, [r4, #8]
 800903e:	463e      	mov	r6, r7
 8009040:	42be      	cmp	r6, r7
 8009042:	d900      	bls.n	8009046 <__ssputs_r+0x86>
 8009044:	463e      	mov	r6, r7
 8009046:	6820      	ldr	r0, [r4, #0]
 8009048:	4632      	mov	r2, r6
 800904a:	4641      	mov	r1, r8
 800904c:	f000 ff56 	bl	8009efc <memmove>
 8009050:	68a3      	ldr	r3, [r4, #8]
 8009052:	1b9b      	subs	r3, r3, r6
 8009054:	60a3      	str	r3, [r4, #8]
 8009056:	6823      	ldr	r3, [r4, #0]
 8009058:	4433      	add	r3, r6
 800905a:	6023      	str	r3, [r4, #0]
 800905c:	2000      	movs	r0, #0
 800905e:	e7db      	b.n	8009018 <__ssputs_r+0x58>
 8009060:	462a      	mov	r2, r5
 8009062:	f000 ff71 	bl	8009f48 <_realloc_r>
 8009066:	4606      	mov	r6, r0
 8009068:	2800      	cmp	r0, #0
 800906a:	d1e1      	bne.n	8009030 <__ssputs_r+0x70>
 800906c:	6921      	ldr	r1, [r4, #16]
 800906e:	4650      	mov	r0, sl
 8009070:	f7ff fec6 	bl	8008e00 <_free_r>
 8009074:	e7c7      	b.n	8009006 <__ssputs_r+0x46>
	...

08009078 <_svfiprintf_r>:
 8009078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800907c:	4698      	mov	r8, r3
 800907e:	898b      	ldrh	r3, [r1, #12]
 8009080:	061b      	lsls	r3, r3, #24
 8009082:	b09d      	sub	sp, #116	; 0x74
 8009084:	4607      	mov	r7, r0
 8009086:	460d      	mov	r5, r1
 8009088:	4614      	mov	r4, r2
 800908a:	d50e      	bpl.n	80090aa <_svfiprintf_r+0x32>
 800908c:	690b      	ldr	r3, [r1, #16]
 800908e:	b963      	cbnz	r3, 80090aa <_svfiprintf_r+0x32>
 8009090:	2140      	movs	r1, #64	; 0x40
 8009092:	f7ff ff21 	bl	8008ed8 <_malloc_r>
 8009096:	6028      	str	r0, [r5, #0]
 8009098:	6128      	str	r0, [r5, #16]
 800909a:	b920      	cbnz	r0, 80090a6 <_svfiprintf_r+0x2e>
 800909c:	230c      	movs	r3, #12
 800909e:	603b      	str	r3, [r7, #0]
 80090a0:	f04f 30ff 	mov.w	r0, #4294967295
 80090a4:	e0d1      	b.n	800924a <_svfiprintf_r+0x1d2>
 80090a6:	2340      	movs	r3, #64	; 0x40
 80090a8:	616b      	str	r3, [r5, #20]
 80090aa:	2300      	movs	r3, #0
 80090ac:	9309      	str	r3, [sp, #36]	; 0x24
 80090ae:	2320      	movs	r3, #32
 80090b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80090b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80090b8:	2330      	movs	r3, #48	; 0x30
 80090ba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009264 <_svfiprintf_r+0x1ec>
 80090be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80090c2:	f04f 0901 	mov.w	r9, #1
 80090c6:	4623      	mov	r3, r4
 80090c8:	469a      	mov	sl, r3
 80090ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090ce:	b10a      	cbz	r2, 80090d4 <_svfiprintf_r+0x5c>
 80090d0:	2a25      	cmp	r2, #37	; 0x25
 80090d2:	d1f9      	bne.n	80090c8 <_svfiprintf_r+0x50>
 80090d4:	ebba 0b04 	subs.w	fp, sl, r4
 80090d8:	d00b      	beq.n	80090f2 <_svfiprintf_r+0x7a>
 80090da:	465b      	mov	r3, fp
 80090dc:	4622      	mov	r2, r4
 80090de:	4629      	mov	r1, r5
 80090e0:	4638      	mov	r0, r7
 80090e2:	f7ff ff6d 	bl	8008fc0 <__ssputs_r>
 80090e6:	3001      	adds	r0, #1
 80090e8:	f000 80aa 	beq.w	8009240 <_svfiprintf_r+0x1c8>
 80090ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090ee:	445a      	add	r2, fp
 80090f0:	9209      	str	r2, [sp, #36]	; 0x24
 80090f2:	f89a 3000 	ldrb.w	r3, [sl]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	f000 80a2 	beq.w	8009240 <_svfiprintf_r+0x1c8>
 80090fc:	2300      	movs	r3, #0
 80090fe:	f04f 32ff 	mov.w	r2, #4294967295
 8009102:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009106:	f10a 0a01 	add.w	sl, sl, #1
 800910a:	9304      	str	r3, [sp, #16]
 800910c:	9307      	str	r3, [sp, #28]
 800910e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009112:	931a      	str	r3, [sp, #104]	; 0x68
 8009114:	4654      	mov	r4, sl
 8009116:	2205      	movs	r2, #5
 8009118:	f814 1b01 	ldrb.w	r1, [r4], #1
 800911c:	4851      	ldr	r0, [pc, #324]	; (8009264 <_svfiprintf_r+0x1ec>)
 800911e:	f7f7 f867 	bl	80001f0 <memchr>
 8009122:	9a04      	ldr	r2, [sp, #16]
 8009124:	b9d8      	cbnz	r0, 800915e <_svfiprintf_r+0xe6>
 8009126:	06d0      	lsls	r0, r2, #27
 8009128:	bf44      	itt	mi
 800912a:	2320      	movmi	r3, #32
 800912c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009130:	0711      	lsls	r1, r2, #28
 8009132:	bf44      	itt	mi
 8009134:	232b      	movmi	r3, #43	; 0x2b
 8009136:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800913a:	f89a 3000 	ldrb.w	r3, [sl]
 800913e:	2b2a      	cmp	r3, #42	; 0x2a
 8009140:	d015      	beq.n	800916e <_svfiprintf_r+0xf6>
 8009142:	9a07      	ldr	r2, [sp, #28]
 8009144:	4654      	mov	r4, sl
 8009146:	2000      	movs	r0, #0
 8009148:	f04f 0c0a 	mov.w	ip, #10
 800914c:	4621      	mov	r1, r4
 800914e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009152:	3b30      	subs	r3, #48	; 0x30
 8009154:	2b09      	cmp	r3, #9
 8009156:	d94e      	bls.n	80091f6 <_svfiprintf_r+0x17e>
 8009158:	b1b0      	cbz	r0, 8009188 <_svfiprintf_r+0x110>
 800915a:	9207      	str	r2, [sp, #28]
 800915c:	e014      	b.n	8009188 <_svfiprintf_r+0x110>
 800915e:	eba0 0308 	sub.w	r3, r0, r8
 8009162:	fa09 f303 	lsl.w	r3, r9, r3
 8009166:	4313      	orrs	r3, r2
 8009168:	9304      	str	r3, [sp, #16]
 800916a:	46a2      	mov	sl, r4
 800916c:	e7d2      	b.n	8009114 <_svfiprintf_r+0x9c>
 800916e:	9b03      	ldr	r3, [sp, #12]
 8009170:	1d19      	adds	r1, r3, #4
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	9103      	str	r1, [sp, #12]
 8009176:	2b00      	cmp	r3, #0
 8009178:	bfbb      	ittet	lt
 800917a:	425b      	neglt	r3, r3
 800917c:	f042 0202 	orrlt.w	r2, r2, #2
 8009180:	9307      	strge	r3, [sp, #28]
 8009182:	9307      	strlt	r3, [sp, #28]
 8009184:	bfb8      	it	lt
 8009186:	9204      	strlt	r2, [sp, #16]
 8009188:	7823      	ldrb	r3, [r4, #0]
 800918a:	2b2e      	cmp	r3, #46	; 0x2e
 800918c:	d10c      	bne.n	80091a8 <_svfiprintf_r+0x130>
 800918e:	7863      	ldrb	r3, [r4, #1]
 8009190:	2b2a      	cmp	r3, #42	; 0x2a
 8009192:	d135      	bne.n	8009200 <_svfiprintf_r+0x188>
 8009194:	9b03      	ldr	r3, [sp, #12]
 8009196:	1d1a      	adds	r2, r3, #4
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	9203      	str	r2, [sp, #12]
 800919c:	2b00      	cmp	r3, #0
 800919e:	bfb8      	it	lt
 80091a0:	f04f 33ff 	movlt.w	r3, #4294967295
 80091a4:	3402      	adds	r4, #2
 80091a6:	9305      	str	r3, [sp, #20]
 80091a8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009274 <_svfiprintf_r+0x1fc>
 80091ac:	7821      	ldrb	r1, [r4, #0]
 80091ae:	2203      	movs	r2, #3
 80091b0:	4650      	mov	r0, sl
 80091b2:	f7f7 f81d 	bl	80001f0 <memchr>
 80091b6:	b140      	cbz	r0, 80091ca <_svfiprintf_r+0x152>
 80091b8:	2340      	movs	r3, #64	; 0x40
 80091ba:	eba0 000a 	sub.w	r0, r0, sl
 80091be:	fa03 f000 	lsl.w	r0, r3, r0
 80091c2:	9b04      	ldr	r3, [sp, #16]
 80091c4:	4303      	orrs	r3, r0
 80091c6:	3401      	adds	r4, #1
 80091c8:	9304      	str	r3, [sp, #16]
 80091ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091ce:	4826      	ldr	r0, [pc, #152]	; (8009268 <_svfiprintf_r+0x1f0>)
 80091d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80091d4:	2206      	movs	r2, #6
 80091d6:	f7f7 f80b 	bl	80001f0 <memchr>
 80091da:	2800      	cmp	r0, #0
 80091dc:	d038      	beq.n	8009250 <_svfiprintf_r+0x1d8>
 80091de:	4b23      	ldr	r3, [pc, #140]	; (800926c <_svfiprintf_r+0x1f4>)
 80091e0:	bb1b      	cbnz	r3, 800922a <_svfiprintf_r+0x1b2>
 80091e2:	9b03      	ldr	r3, [sp, #12]
 80091e4:	3307      	adds	r3, #7
 80091e6:	f023 0307 	bic.w	r3, r3, #7
 80091ea:	3308      	adds	r3, #8
 80091ec:	9303      	str	r3, [sp, #12]
 80091ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091f0:	4433      	add	r3, r6
 80091f2:	9309      	str	r3, [sp, #36]	; 0x24
 80091f4:	e767      	b.n	80090c6 <_svfiprintf_r+0x4e>
 80091f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80091fa:	460c      	mov	r4, r1
 80091fc:	2001      	movs	r0, #1
 80091fe:	e7a5      	b.n	800914c <_svfiprintf_r+0xd4>
 8009200:	2300      	movs	r3, #0
 8009202:	3401      	adds	r4, #1
 8009204:	9305      	str	r3, [sp, #20]
 8009206:	4619      	mov	r1, r3
 8009208:	f04f 0c0a 	mov.w	ip, #10
 800920c:	4620      	mov	r0, r4
 800920e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009212:	3a30      	subs	r2, #48	; 0x30
 8009214:	2a09      	cmp	r2, #9
 8009216:	d903      	bls.n	8009220 <_svfiprintf_r+0x1a8>
 8009218:	2b00      	cmp	r3, #0
 800921a:	d0c5      	beq.n	80091a8 <_svfiprintf_r+0x130>
 800921c:	9105      	str	r1, [sp, #20]
 800921e:	e7c3      	b.n	80091a8 <_svfiprintf_r+0x130>
 8009220:	fb0c 2101 	mla	r1, ip, r1, r2
 8009224:	4604      	mov	r4, r0
 8009226:	2301      	movs	r3, #1
 8009228:	e7f0      	b.n	800920c <_svfiprintf_r+0x194>
 800922a:	ab03      	add	r3, sp, #12
 800922c:	9300      	str	r3, [sp, #0]
 800922e:	462a      	mov	r2, r5
 8009230:	4b0f      	ldr	r3, [pc, #60]	; (8009270 <_svfiprintf_r+0x1f8>)
 8009232:	a904      	add	r1, sp, #16
 8009234:	4638      	mov	r0, r7
 8009236:	f7fc f9a1 	bl	800557c <_printf_float>
 800923a:	1c42      	adds	r2, r0, #1
 800923c:	4606      	mov	r6, r0
 800923e:	d1d6      	bne.n	80091ee <_svfiprintf_r+0x176>
 8009240:	89ab      	ldrh	r3, [r5, #12]
 8009242:	065b      	lsls	r3, r3, #25
 8009244:	f53f af2c 	bmi.w	80090a0 <_svfiprintf_r+0x28>
 8009248:	9809      	ldr	r0, [sp, #36]	; 0x24
 800924a:	b01d      	add	sp, #116	; 0x74
 800924c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009250:	ab03      	add	r3, sp, #12
 8009252:	9300      	str	r3, [sp, #0]
 8009254:	462a      	mov	r2, r5
 8009256:	4b06      	ldr	r3, [pc, #24]	; (8009270 <_svfiprintf_r+0x1f8>)
 8009258:	a904      	add	r1, sp, #16
 800925a:	4638      	mov	r0, r7
 800925c:	f7fc fc32 	bl	8005ac4 <_printf_i>
 8009260:	e7eb      	b.n	800923a <_svfiprintf_r+0x1c2>
 8009262:	bf00      	nop
 8009264:	0800a9f4 	.word	0x0800a9f4
 8009268:	0800a9fe 	.word	0x0800a9fe
 800926c:	0800557d 	.word	0x0800557d
 8009270:	08008fc1 	.word	0x08008fc1
 8009274:	0800a9fa 	.word	0x0800a9fa

08009278 <_sungetc_r>:
 8009278:	b538      	push	{r3, r4, r5, lr}
 800927a:	1c4b      	adds	r3, r1, #1
 800927c:	4614      	mov	r4, r2
 800927e:	d103      	bne.n	8009288 <_sungetc_r+0x10>
 8009280:	f04f 35ff 	mov.w	r5, #4294967295
 8009284:	4628      	mov	r0, r5
 8009286:	bd38      	pop	{r3, r4, r5, pc}
 8009288:	8993      	ldrh	r3, [r2, #12]
 800928a:	f023 0320 	bic.w	r3, r3, #32
 800928e:	8193      	strh	r3, [r2, #12]
 8009290:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009292:	6852      	ldr	r2, [r2, #4]
 8009294:	b2cd      	uxtb	r5, r1
 8009296:	b18b      	cbz	r3, 80092bc <_sungetc_r+0x44>
 8009298:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800929a:	4293      	cmp	r3, r2
 800929c:	dd08      	ble.n	80092b0 <_sungetc_r+0x38>
 800929e:	6823      	ldr	r3, [r4, #0]
 80092a0:	1e5a      	subs	r2, r3, #1
 80092a2:	6022      	str	r2, [r4, #0]
 80092a4:	f803 5c01 	strb.w	r5, [r3, #-1]
 80092a8:	6863      	ldr	r3, [r4, #4]
 80092aa:	3301      	adds	r3, #1
 80092ac:	6063      	str	r3, [r4, #4]
 80092ae:	e7e9      	b.n	8009284 <_sungetc_r+0xc>
 80092b0:	4621      	mov	r1, r4
 80092b2:	f000 fbf1 	bl	8009a98 <__submore>
 80092b6:	2800      	cmp	r0, #0
 80092b8:	d0f1      	beq.n	800929e <_sungetc_r+0x26>
 80092ba:	e7e1      	b.n	8009280 <_sungetc_r+0x8>
 80092bc:	6921      	ldr	r1, [r4, #16]
 80092be:	6823      	ldr	r3, [r4, #0]
 80092c0:	b151      	cbz	r1, 80092d8 <_sungetc_r+0x60>
 80092c2:	4299      	cmp	r1, r3
 80092c4:	d208      	bcs.n	80092d8 <_sungetc_r+0x60>
 80092c6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80092ca:	42a9      	cmp	r1, r5
 80092cc:	d104      	bne.n	80092d8 <_sungetc_r+0x60>
 80092ce:	3b01      	subs	r3, #1
 80092d0:	3201      	adds	r2, #1
 80092d2:	6023      	str	r3, [r4, #0]
 80092d4:	6062      	str	r2, [r4, #4]
 80092d6:	e7d5      	b.n	8009284 <_sungetc_r+0xc>
 80092d8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80092dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80092e0:	6363      	str	r3, [r4, #52]	; 0x34
 80092e2:	2303      	movs	r3, #3
 80092e4:	63a3      	str	r3, [r4, #56]	; 0x38
 80092e6:	4623      	mov	r3, r4
 80092e8:	f803 5f46 	strb.w	r5, [r3, #70]!
 80092ec:	6023      	str	r3, [r4, #0]
 80092ee:	2301      	movs	r3, #1
 80092f0:	e7dc      	b.n	80092ac <_sungetc_r+0x34>

080092f2 <__ssrefill_r>:
 80092f2:	b510      	push	{r4, lr}
 80092f4:	460c      	mov	r4, r1
 80092f6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80092f8:	b169      	cbz	r1, 8009316 <__ssrefill_r+0x24>
 80092fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80092fe:	4299      	cmp	r1, r3
 8009300:	d001      	beq.n	8009306 <__ssrefill_r+0x14>
 8009302:	f7ff fd7d 	bl	8008e00 <_free_r>
 8009306:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009308:	6063      	str	r3, [r4, #4]
 800930a:	2000      	movs	r0, #0
 800930c:	6360      	str	r0, [r4, #52]	; 0x34
 800930e:	b113      	cbz	r3, 8009316 <__ssrefill_r+0x24>
 8009310:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009312:	6023      	str	r3, [r4, #0]
 8009314:	bd10      	pop	{r4, pc}
 8009316:	6923      	ldr	r3, [r4, #16]
 8009318:	6023      	str	r3, [r4, #0]
 800931a:	2300      	movs	r3, #0
 800931c:	6063      	str	r3, [r4, #4]
 800931e:	89a3      	ldrh	r3, [r4, #12]
 8009320:	f043 0320 	orr.w	r3, r3, #32
 8009324:	81a3      	strh	r3, [r4, #12]
 8009326:	f04f 30ff 	mov.w	r0, #4294967295
 800932a:	e7f3      	b.n	8009314 <__ssrefill_r+0x22>

0800932c <__ssvfiscanf_r>:
 800932c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009330:	460c      	mov	r4, r1
 8009332:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8009336:	2100      	movs	r1, #0
 8009338:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800933c:	49a6      	ldr	r1, [pc, #664]	; (80095d8 <__ssvfiscanf_r+0x2ac>)
 800933e:	91a0      	str	r1, [sp, #640]	; 0x280
 8009340:	f10d 0804 	add.w	r8, sp, #4
 8009344:	49a5      	ldr	r1, [pc, #660]	; (80095dc <__ssvfiscanf_r+0x2b0>)
 8009346:	4fa6      	ldr	r7, [pc, #664]	; (80095e0 <__ssvfiscanf_r+0x2b4>)
 8009348:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80095e4 <__ssvfiscanf_r+0x2b8>
 800934c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8009350:	4606      	mov	r6, r0
 8009352:	91a1      	str	r1, [sp, #644]	; 0x284
 8009354:	9300      	str	r3, [sp, #0]
 8009356:	7813      	ldrb	r3, [r2, #0]
 8009358:	2b00      	cmp	r3, #0
 800935a:	f000 815a 	beq.w	8009612 <__ssvfiscanf_r+0x2e6>
 800935e:	5dd9      	ldrb	r1, [r3, r7]
 8009360:	f011 0108 	ands.w	r1, r1, #8
 8009364:	f102 0501 	add.w	r5, r2, #1
 8009368:	d019      	beq.n	800939e <__ssvfiscanf_r+0x72>
 800936a:	6863      	ldr	r3, [r4, #4]
 800936c:	2b00      	cmp	r3, #0
 800936e:	dd0f      	ble.n	8009390 <__ssvfiscanf_r+0x64>
 8009370:	6823      	ldr	r3, [r4, #0]
 8009372:	781a      	ldrb	r2, [r3, #0]
 8009374:	5cba      	ldrb	r2, [r7, r2]
 8009376:	0712      	lsls	r2, r2, #28
 8009378:	d401      	bmi.n	800937e <__ssvfiscanf_r+0x52>
 800937a:	462a      	mov	r2, r5
 800937c:	e7eb      	b.n	8009356 <__ssvfiscanf_r+0x2a>
 800937e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009380:	3201      	adds	r2, #1
 8009382:	9245      	str	r2, [sp, #276]	; 0x114
 8009384:	6862      	ldr	r2, [r4, #4]
 8009386:	3301      	adds	r3, #1
 8009388:	3a01      	subs	r2, #1
 800938a:	6062      	str	r2, [r4, #4]
 800938c:	6023      	str	r3, [r4, #0]
 800938e:	e7ec      	b.n	800936a <__ssvfiscanf_r+0x3e>
 8009390:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009392:	4621      	mov	r1, r4
 8009394:	4630      	mov	r0, r6
 8009396:	4798      	blx	r3
 8009398:	2800      	cmp	r0, #0
 800939a:	d0e9      	beq.n	8009370 <__ssvfiscanf_r+0x44>
 800939c:	e7ed      	b.n	800937a <__ssvfiscanf_r+0x4e>
 800939e:	2b25      	cmp	r3, #37	; 0x25
 80093a0:	d012      	beq.n	80093c8 <__ssvfiscanf_r+0x9c>
 80093a2:	469a      	mov	sl, r3
 80093a4:	6863      	ldr	r3, [r4, #4]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	f340 8091 	ble.w	80094ce <__ssvfiscanf_r+0x1a2>
 80093ac:	6822      	ldr	r2, [r4, #0]
 80093ae:	7813      	ldrb	r3, [r2, #0]
 80093b0:	4553      	cmp	r3, sl
 80093b2:	f040 812e 	bne.w	8009612 <__ssvfiscanf_r+0x2e6>
 80093b6:	6863      	ldr	r3, [r4, #4]
 80093b8:	3b01      	subs	r3, #1
 80093ba:	6063      	str	r3, [r4, #4]
 80093bc:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80093be:	3201      	adds	r2, #1
 80093c0:	3301      	adds	r3, #1
 80093c2:	6022      	str	r2, [r4, #0]
 80093c4:	9345      	str	r3, [sp, #276]	; 0x114
 80093c6:	e7d8      	b.n	800937a <__ssvfiscanf_r+0x4e>
 80093c8:	9141      	str	r1, [sp, #260]	; 0x104
 80093ca:	9143      	str	r1, [sp, #268]	; 0x10c
 80093cc:	7853      	ldrb	r3, [r2, #1]
 80093ce:	2b2a      	cmp	r3, #42	; 0x2a
 80093d0:	bf02      	ittt	eq
 80093d2:	2310      	moveq	r3, #16
 80093d4:	1c95      	addeq	r5, r2, #2
 80093d6:	9341      	streq	r3, [sp, #260]	; 0x104
 80093d8:	220a      	movs	r2, #10
 80093da:	46aa      	mov	sl, r5
 80093dc:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80093e0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80093e4:	2b09      	cmp	r3, #9
 80093e6:	d91d      	bls.n	8009424 <__ssvfiscanf_r+0xf8>
 80093e8:	487e      	ldr	r0, [pc, #504]	; (80095e4 <__ssvfiscanf_r+0x2b8>)
 80093ea:	2203      	movs	r2, #3
 80093ec:	f7f6 ff00 	bl	80001f0 <memchr>
 80093f0:	b140      	cbz	r0, 8009404 <__ssvfiscanf_r+0xd8>
 80093f2:	2301      	movs	r3, #1
 80093f4:	eba0 0009 	sub.w	r0, r0, r9
 80093f8:	fa03 f000 	lsl.w	r0, r3, r0
 80093fc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80093fe:	4318      	orrs	r0, r3
 8009400:	9041      	str	r0, [sp, #260]	; 0x104
 8009402:	4655      	mov	r5, sl
 8009404:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009408:	2b78      	cmp	r3, #120	; 0x78
 800940a:	d806      	bhi.n	800941a <__ssvfiscanf_r+0xee>
 800940c:	2b57      	cmp	r3, #87	; 0x57
 800940e:	d810      	bhi.n	8009432 <__ssvfiscanf_r+0x106>
 8009410:	2b25      	cmp	r3, #37	; 0x25
 8009412:	d0c6      	beq.n	80093a2 <__ssvfiscanf_r+0x76>
 8009414:	d856      	bhi.n	80094c4 <__ssvfiscanf_r+0x198>
 8009416:	2b00      	cmp	r3, #0
 8009418:	d064      	beq.n	80094e4 <__ssvfiscanf_r+0x1b8>
 800941a:	2303      	movs	r3, #3
 800941c:	9347      	str	r3, [sp, #284]	; 0x11c
 800941e:	230a      	movs	r3, #10
 8009420:	9342      	str	r3, [sp, #264]	; 0x108
 8009422:	e071      	b.n	8009508 <__ssvfiscanf_r+0x1dc>
 8009424:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8009426:	fb02 1103 	mla	r1, r2, r3, r1
 800942a:	3930      	subs	r1, #48	; 0x30
 800942c:	9143      	str	r1, [sp, #268]	; 0x10c
 800942e:	4655      	mov	r5, sl
 8009430:	e7d3      	b.n	80093da <__ssvfiscanf_r+0xae>
 8009432:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8009436:	2a20      	cmp	r2, #32
 8009438:	d8ef      	bhi.n	800941a <__ssvfiscanf_r+0xee>
 800943a:	a101      	add	r1, pc, #4	; (adr r1, 8009440 <__ssvfiscanf_r+0x114>)
 800943c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009440:	080094f3 	.word	0x080094f3
 8009444:	0800941b 	.word	0x0800941b
 8009448:	0800941b 	.word	0x0800941b
 800944c:	08009551 	.word	0x08009551
 8009450:	0800941b 	.word	0x0800941b
 8009454:	0800941b 	.word	0x0800941b
 8009458:	0800941b 	.word	0x0800941b
 800945c:	0800941b 	.word	0x0800941b
 8009460:	0800941b 	.word	0x0800941b
 8009464:	0800941b 	.word	0x0800941b
 8009468:	0800941b 	.word	0x0800941b
 800946c:	08009567 	.word	0x08009567
 8009470:	0800953d 	.word	0x0800953d
 8009474:	080094cb 	.word	0x080094cb
 8009478:	080094cb 	.word	0x080094cb
 800947c:	080094cb 	.word	0x080094cb
 8009480:	0800941b 	.word	0x0800941b
 8009484:	08009541 	.word	0x08009541
 8009488:	0800941b 	.word	0x0800941b
 800948c:	0800941b 	.word	0x0800941b
 8009490:	0800941b 	.word	0x0800941b
 8009494:	0800941b 	.word	0x0800941b
 8009498:	08009577 	.word	0x08009577
 800949c:	08009549 	.word	0x08009549
 80094a0:	080094eb 	.word	0x080094eb
 80094a4:	0800941b 	.word	0x0800941b
 80094a8:	0800941b 	.word	0x0800941b
 80094ac:	08009573 	.word	0x08009573
 80094b0:	0800941b 	.word	0x0800941b
 80094b4:	0800953d 	.word	0x0800953d
 80094b8:	0800941b 	.word	0x0800941b
 80094bc:	0800941b 	.word	0x0800941b
 80094c0:	080094f3 	.word	0x080094f3
 80094c4:	3b45      	subs	r3, #69	; 0x45
 80094c6:	2b02      	cmp	r3, #2
 80094c8:	d8a7      	bhi.n	800941a <__ssvfiscanf_r+0xee>
 80094ca:	2305      	movs	r3, #5
 80094cc:	e01b      	b.n	8009506 <__ssvfiscanf_r+0x1da>
 80094ce:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80094d0:	4621      	mov	r1, r4
 80094d2:	4630      	mov	r0, r6
 80094d4:	4798      	blx	r3
 80094d6:	2800      	cmp	r0, #0
 80094d8:	f43f af68 	beq.w	80093ac <__ssvfiscanf_r+0x80>
 80094dc:	9844      	ldr	r0, [sp, #272]	; 0x110
 80094de:	2800      	cmp	r0, #0
 80094e0:	f040 808d 	bne.w	80095fe <__ssvfiscanf_r+0x2d2>
 80094e4:	f04f 30ff 	mov.w	r0, #4294967295
 80094e8:	e08f      	b.n	800960a <__ssvfiscanf_r+0x2de>
 80094ea:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80094ec:	f042 0220 	orr.w	r2, r2, #32
 80094f0:	9241      	str	r2, [sp, #260]	; 0x104
 80094f2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80094f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80094f8:	9241      	str	r2, [sp, #260]	; 0x104
 80094fa:	2210      	movs	r2, #16
 80094fc:	2b6f      	cmp	r3, #111	; 0x6f
 80094fe:	9242      	str	r2, [sp, #264]	; 0x108
 8009500:	bf34      	ite	cc
 8009502:	2303      	movcc	r3, #3
 8009504:	2304      	movcs	r3, #4
 8009506:	9347      	str	r3, [sp, #284]	; 0x11c
 8009508:	6863      	ldr	r3, [r4, #4]
 800950a:	2b00      	cmp	r3, #0
 800950c:	dd42      	ble.n	8009594 <__ssvfiscanf_r+0x268>
 800950e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009510:	0659      	lsls	r1, r3, #25
 8009512:	d404      	bmi.n	800951e <__ssvfiscanf_r+0x1f2>
 8009514:	6823      	ldr	r3, [r4, #0]
 8009516:	781a      	ldrb	r2, [r3, #0]
 8009518:	5cba      	ldrb	r2, [r7, r2]
 800951a:	0712      	lsls	r2, r2, #28
 800951c:	d441      	bmi.n	80095a2 <__ssvfiscanf_r+0x276>
 800951e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8009520:	2b02      	cmp	r3, #2
 8009522:	dc50      	bgt.n	80095c6 <__ssvfiscanf_r+0x29a>
 8009524:	466b      	mov	r3, sp
 8009526:	4622      	mov	r2, r4
 8009528:	a941      	add	r1, sp, #260	; 0x104
 800952a:	4630      	mov	r0, r6
 800952c:	f000 f876 	bl	800961c <_scanf_chars>
 8009530:	2801      	cmp	r0, #1
 8009532:	d06e      	beq.n	8009612 <__ssvfiscanf_r+0x2e6>
 8009534:	2802      	cmp	r0, #2
 8009536:	f47f af20 	bne.w	800937a <__ssvfiscanf_r+0x4e>
 800953a:	e7cf      	b.n	80094dc <__ssvfiscanf_r+0x1b0>
 800953c:	220a      	movs	r2, #10
 800953e:	e7dd      	b.n	80094fc <__ssvfiscanf_r+0x1d0>
 8009540:	2300      	movs	r3, #0
 8009542:	9342      	str	r3, [sp, #264]	; 0x108
 8009544:	2303      	movs	r3, #3
 8009546:	e7de      	b.n	8009506 <__ssvfiscanf_r+0x1da>
 8009548:	2308      	movs	r3, #8
 800954a:	9342      	str	r3, [sp, #264]	; 0x108
 800954c:	2304      	movs	r3, #4
 800954e:	e7da      	b.n	8009506 <__ssvfiscanf_r+0x1da>
 8009550:	4629      	mov	r1, r5
 8009552:	4640      	mov	r0, r8
 8009554:	f000 f9e0 	bl	8009918 <__sccl>
 8009558:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800955a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800955e:	9341      	str	r3, [sp, #260]	; 0x104
 8009560:	4605      	mov	r5, r0
 8009562:	2301      	movs	r3, #1
 8009564:	e7cf      	b.n	8009506 <__ssvfiscanf_r+0x1da>
 8009566:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009568:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800956c:	9341      	str	r3, [sp, #260]	; 0x104
 800956e:	2300      	movs	r3, #0
 8009570:	e7c9      	b.n	8009506 <__ssvfiscanf_r+0x1da>
 8009572:	2302      	movs	r3, #2
 8009574:	e7c7      	b.n	8009506 <__ssvfiscanf_r+0x1da>
 8009576:	9841      	ldr	r0, [sp, #260]	; 0x104
 8009578:	06c3      	lsls	r3, r0, #27
 800957a:	f53f aefe 	bmi.w	800937a <__ssvfiscanf_r+0x4e>
 800957e:	9b00      	ldr	r3, [sp, #0]
 8009580:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009582:	1d19      	adds	r1, r3, #4
 8009584:	9100      	str	r1, [sp, #0]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f010 0f01 	tst.w	r0, #1
 800958c:	bf14      	ite	ne
 800958e:	801a      	strhne	r2, [r3, #0]
 8009590:	601a      	streq	r2, [r3, #0]
 8009592:	e6f2      	b.n	800937a <__ssvfiscanf_r+0x4e>
 8009594:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009596:	4621      	mov	r1, r4
 8009598:	4630      	mov	r0, r6
 800959a:	4798      	blx	r3
 800959c:	2800      	cmp	r0, #0
 800959e:	d0b6      	beq.n	800950e <__ssvfiscanf_r+0x1e2>
 80095a0:	e79c      	b.n	80094dc <__ssvfiscanf_r+0x1b0>
 80095a2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80095a4:	3201      	adds	r2, #1
 80095a6:	9245      	str	r2, [sp, #276]	; 0x114
 80095a8:	6862      	ldr	r2, [r4, #4]
 80095aa:	3a01      	subs	r2, #1
 80095ac:	2a00      	cmp	r2, #0
 80095ae:	6062      	str	r2, [r4, #4]
 80095b0:	dd02      	ble.n	80095b8 <__ssvfiscanf_r+0x28c>
 80095b2:	3301      	adds	r3, #1
 80095b4:	6023      	str	r3, [r4, #0]
 80095b6:	e7ad      	b.n	8009514 <__ssvfiscanf_r+0x1e8>
 80095b8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80095ba:	4621      	mov	r1, r4
 80095bc:	4630      	mov	r0, r6
 80095be:	4798      	blx	r3
 80095c0:	2800      	cmp	r0, #0
 80095c2:	d0a7      	beq.n	8009514 <__ssvfiscanf_r+0x1e8>
 80095c4:	e78a      	b.n	80094dc <__ssvfiscanf_r+0x1b0>
 80095c6:	2b04      	cmp	r3, #4
 80095c8:	dc0e      	bgt.n	80095e8 <__ssvfiscanf_r+0x2bc>
 80095ca:	466b      	mov	r3, sp
 80095cc:	4622      	mov	r2, r4
 80095ce:	a941      	add	r1, sp, #260	; 0x104
 80095d0:	4630      	mov	r0, r6
 80095d2:	f000 f87d 	bl	80096d0 <_scanf_i>
 80095d6:	e7ab      	b.n	8009530 <__ssvfiscanf_r+0x204>
 80095d8:	08009279 	.word	0x08009279
 80095dc:	080092f3 	.word	0x080092f3
 80095e0:	0800a691 	.word	0x0800a691
 80095e4:	0800a9fa 	.word	0x0800a9fa
 80095e8:	4b0b      	ldr	r3, [pc, #44]	; (8009618 <__ssvfiscanf_r+0x2ec>)
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	f43f aec5 	beq.w	800937a <__ssvfiscanf_r+0x4e>
 80095f0:	466b      	mov	r3, sp
 80095f2:	4622      	mov	r2, r4
 80095f4:	a941      	add	r1, sp, #260	; 0x104
 80095f6:	4630      	mov	r0, r6
 80095f8:	f7fc fb8a 	bl	8005d10 <_scanf_float>
 80095fc:	e798      	b.n	8009530 <__ssvfiscanf_r+0x204>
 80095fe:	89a3      	ldrh	r3, [r4, #12]
 8009600:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009604:	bf18      	it	ne
 8009606:	f04f 30ff 	movne.w	r0, #4294967295
 800960a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800960e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009612:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009614:	e7f9      	b.n	800960a <__ssvfiscanf_r+0x2de>
 8009616:	bf00      	nop
 8009618:	08005d11 	.word	0x08005d11

0800961c <_scanf_chars>:
 800961c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009620:	4615      	mov	r5, r2
 8009622:	688a      	ldr	r2, [r1, #8]
 8009624:	4680      	mov	r8, r0
 8009626:	460c      	mov	r4, r1
 8009628:	b932      	cbnz	r2, 8009638 <_scanf_chars+0x1c>
 800962a:	698a      	ldr	r2, [r1, #24]
 800962c:	2a00      	cmp	r2, #0
 800962e:	bf0c      	ite	eq
 8009630:	2201      	moveq	r2, #1
 8009632:	f04f 32ff 	movne.w	r2, #4294967295
 8009636:	608a      	str	r2, [r1, #8]
 8009638:	6822      	ldr	r2, [r4, #0]
 800963a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80096cc <_scanf_chars+0xb0>
 800963e:	06d1      	lsls	r1, r2, #27
 8009640:	bf5f      	itttt	pl
 8009642:	681a      	ldrpl	r2, [r3, #0]
 8009644:	1d11      	addpl	r1, r2, #4
 8009646:	6019      	strpl	r1, [r3, #0]
 8009648:	6816      	ldrpl	r6, [r2, #0]
 800964a:	2700      	movs	r7, #0
 800964c:	69a0      	ldr	r0, [r4, #24]
 800964e:	b188      	cbz	r0, 8009674 <_scanf_chars+0x58>
 8009650:	2801      	cmp	r0, #1
 8009652:	d107      	bne.n	8009664 <_scanf_chars+0x48>
 8009654:	682a      	ldr	r2, [r5, #0]
 8009656:	7811      	ldrb	r1, [r2, #0]
 8009658:	6962      	ldr	r2, [r4, #20]
 800965a:	5c52      	ldrb	r2, [r2, r1]
 800965c:	b952      	cbnz	r2, 8009674 <_scanf_chars+0x58>
 800965e:	2f00      	cmp	r7, #0
 8009660:	d031      	beq.n	80096c6 <_scanf_chars+0xaa>
 8009662:	e022      	b.n	80096aa <_scanf_chars+0x8e>
 8009664:	2802      	cmp	r0, #2
 8009666:	d120      	bne.n	80096aa <_scanf_chars+0x8e>
 8009668:	682b      	ldr	r3, [r5, #0]
 800966a:	781b      	ldrb	r3, [r3, #0]
 800966c:	f813 3009 	ldrb.w	r3, [r3, r9]
 8009670:	071b      	lsls	r3, r3, #28
 8009672:	d41a      	bmi.n	80096aa <_scanf_chars+0x8e>
 8009674:	6823      	ldr	r3, [r4, #0]
 8009676:	06da      	lsls	r2, r3, #27
 8009678:	bf5e      	ittt	pl
 800967a:	682b      	ldrpl	r3, [r5, #0]
 800967c:	781b      	ldrbpl	r3, [r3, #0]
 800967e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8009682:	682a      	ldr	r2, [r5, #0]
 8009684:	686b      	ldr	r3, [r5, #4]
 8009686:	3201      	adds	r2, #1
 8009688:	602a      	str	r2, [r5, #0]
 800968a:	68a2      	ldr	r2, [r4, #8]
 800968c:	3b01      	subs	r3, #1
 800968e:	3a01      	subs	r2, #1
 8009690:	606b      	str	r3, [r5, #4]
 8009692:	3701      	adds	r7, #1
 8009694:	60a2      	str	r2, [r4, #8]
 8009696:	b142      	cbz	r2, 80096aa <_scanf_chars+0x8e>
 8009698:	2b00      	cmp	r3, #0
 800969a:	dcd7      	bgt.n	800964c <_scanf_chars+0x30>
 800969c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80096a0:	4629      	mov	r1, r5
 80096a2:	4640      	mov	r0, r8
 80096a4:	4798      	blx	r3
 80096a6:	2800      	cmp	r0, #0
 80096a8:	d0d0      	beq.n	800964c <_scanf_chars+0x30>
 80096aa:	6823      	ldr	r3, [r4, #0]
 80096ac:	f013 0310 	ands.w	r3, r3, #16
 80096b0:	d105      	bne.n	80096be <_scanf_chars+0xa2>
 80096b2:	68e2      	ldr	r2, [r4, #12]
 80096b4:	3201      	adds	r2, #1
 80096b6:	60e2      	str	r2, [r4, #12]
 80096b8:	69a2      	ldr	r2, [r4, #24]
 80096ba:	b102      	cbz	r2, 80096be <_scanf_chars+0xa2>
 80096bc:	7033      	strb	r3, [r6, #0]
 80096be:	6923      	ldr	r3, [r4, #16]
 80096c0:	443b      	add	r3, r7
 80096c2:	6123      	str	r3, [r4, #16]
 80096c4:	2000      	movs	r0, #0
 80096c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096ca:	bf00      	nop
 80096cc:	0800a691 	.word	0x0800a691

080096d0 <_scanf_i>:
 80096d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096d4:	4698      	mov	r8, r3
 80096d6:	4b76      	ldr	r3, [pc, #472]	; (80098b0 <_scanf_i+0x1e0>)
 80096d8:	460c      	mov	r4, r1
 80096da:	4682      	mov	sl, r0
 80096dc:	4616      	mov	r6, r2
 80096de:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80096e2:	b087      	sub	sp, #28
 80096e4:	ab03      	add	r3, sp, #12
 80096e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80096ea:	4b72      	ldr	r3, [pc, #456]	; (80098b4 <_scanf_i+0x1e4>)
 80096ec:	69a1      	ldr	r1, [r4, #24]
 80096ee:	4a72      	ldr	r2, [pc, #456]	; (80098b8 <_scanf_i+0x1e8>)
 80096f0:	2903      	cmp	r1, #3
 80096f2:	bf18      	it	ne
 80096f4:	461a      	movne	r2, r3
 80096f6:	68a3      	ldr	r3, [r4, #8]
 80096f8:	9201      	str	r2, [sp, #4]
 80096fa:	1e5a      	subs	r2, r3, #1
 80096fc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009700:	bf88      	it	hi
 8009702:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009706:	4627      	mov	r7, r4
 8009708:	bf82      	ittt	hi
 800970a:	eb03 0905 	addhi.w	r9, r3, r5
 800970e:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009712:	60a3      	strhi	r3, [r4, #8]
 8009714:	f857 3b1c 	ldr.w	r3, [r7], #28
 8009718:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800971c:	bf98      	it	ls
 800971e:	f04f 0900 	movls.w	r9, #0
 8009722:	6023      	str	r3, [r4, #0]
 8009724:	463d      	mov	r5, r7
 8009726:	f04f 0b00 	mov.w	fp, #0
 800972a:	6831      	ldr	r1, [r6, #0]
 800972c:	ab03      	add	r3, sp, #12
 800972e:	7809      	ldrb	r1, [r1, #0]
 8009730:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8009734:	2202      	movs	r2, #2
 8009736:	f7f6 fd5b 	bl	80001f0 <memchr>
 800973a:	b328      	cbz	r0, 8009788 <_scanf_i+0xb8>
 800973c:	f1bb 0f01 	cmp.w	fp, #1
 8009740:	d159      	bne.n	80097f6 <_scanf_i+0x126>
 8009742:	6862      	ldr	r2, [r4, #4]
 8009744:	b92a      	cbnz	r2, 8009752 <_scanf_i+0x82>
 8009746:	6822      	ldr	r2, [r4, #0]
 8009748:	2308      	movs	r3, #8
 800974a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800974e:	6063      	str	r3, [r4, #4]
 8009750:	6022      	str	r2, [r4, #0]
 8009752:	6822      	ldr	r2, [r4, #0]
 8009754:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8009758:	6022      	str	r2, [r4, #0]
 800975a:	68a2      	ldr	r2, [r4, #8]
 800975c:	1e51      	subs	r1, r2, #1
 800975e:	60a1      	str	r1, [r4, #8]
 8009760:	b192      	cbz	r2, 8009788 <_scanf_i+0xb8>
 8009762:	6832      	ldr	r2, [r6, #0]
 8009764:	1c51      	adds	r1, r2, #1
 8009766:	6031      	str	r1, [r6, #0]
 8009768:	7812      	ldrb	r2, [r2, #0]
 800976a:	f805 2b01 	strb.w	r2, [r5], #1
 800976e:	6872      	ldr	r2, [r6, #4]
 8009770:	3a01      	subs	r2, #1
 8009772:	2a00      	cmp	r2, #0
 8009774:	6072      	str	r2, [r6, #4]
 8009776:	dc07      	bgt.n	8009788 <_scanf_i+0xb8>
 8009778:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800977c:	4631      	mov	r1, r6
 800977e:	4650      	mov	r0, sl
 8009780:	4790      	blx	r2
 8009782:	2800      	cmp	r0, #0
 8009784:	f040 8085 	bne.w	8009892 <_scanf_i+0x1c2>
 8009788:	f10b 0b01 	add.w	fp, fp, #1
 800978c:	f1bb 0f03 	cmp.w	fp, #3
 8009790:	d1cb      	bne.n	800972a <_scanf_i+0x5a>
 8009792:	6863      	ldr	r3, [r4, #4]
 8009794:	b90b      	cbnz	r3, 800979a <_scanf_i+0xca>
 8009796:	230a      	movs	r3, #10
 8009798:	6063      	str	r3, [r4, #4]
 800979a:	6863      	ldr	r3, [r4, #4]
 800979c:	4947      	ldr	r1, [pc, #284]	; (80098bc <_scanf_i+0x1ec>)
 800979e:	6960      	ldr	r0, [r4, #20]
 80097a0:	1ac9      	subs	r1, r1, r3
 80097a2:	f000 f8b9 	bl	8009918 <__sccl>
 80097a6:	f04f 0b00 	mov.w	fp, #0
 80097aa:	68a3      	ldr	r3, [r4, #8]
 80097ac:	6822      	ldr	r2, [r4, #0]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d03d      	beq.n	800982e <_scanf_i+0x15e>
 80097b2:	6831      	ldr	r1, [r6, #0]
 80097b4:	6960      	ldr	r0, [r4, #20]
 80097b6:	f891 c000 	ldrb.w	ip, [r1]
 80097ba:	f810 000c 	ldrb.w	r0, [r0, ip]
 80097be:	2800      	cmp	r0, #0
 80097c0:	d035      	beq.n	800982e <_scanf_i+0x15e>
 80097c2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80097c6:	d124      	bne.n	8009812 <_scanf_i+0x142>
 80097c8:	0510      	lsls	r0, r2, #20
 80097ca:	d522      	bpl.n	8009812 <_scanf_i+0x142>
 80097cc:	f10b 0b01 	add.w	fp, fp, #1
 80097d0:	f1b9 0f00 	cmp.w	r9, #0
 80097d4:	d003      	beq.n	80097de <_scanf_i+0x10e>
 80097d6:	3301      	adds	r3, #1
 80097d8:	f109 39ff 	add.w	r9, r9, #4294967295
 80097dc:	60a3      	str	r3, [r4, #8]
 80097de:	6873      	ldr	r3, [r6, #4]
 80097e0:	3b01      	subs	r3, #1
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	6073      	str	r3, [r6, #4]
 80097e6:	dd1b      	ble.n	8009820 <_scanf_i+0x150>
 80097e8:	6833      	ldr	r3, [r6, #0]
 80097ea:	3301      	adds	r3, #1
 80097ec:	6033      	str	r3, [r6, #0]
 80097ee:	68a3      	ldr	r3, [r4, #8]
 80097f0:	3b01      	subs	r3, #1
 80097f2:	60a3      	str	r3, [r4, #8]
 80097f4:	e7d9      	b.n	80097aa <_scanf_i+0xda>
 80097f6:	f1bb 0f02 	cmp.w	fp, #2
 80097fa:	d1ae      	bne.n	800975a <_scanf_i+0x8a>
 80097fc:	6822      	ldr	r2, [r4, #0]
 80097fe:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8009802:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009806:	d1bf      	bne.n	8009788 <_scanf_i+0xb8>
 8009808:	2310      	movs	r3, #16
 800980a:	6063      	str	r3, [r4, #4]
 800980c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009810:	e7a2      	b.n	8009758 <_scanf_i+0x88>
 8009812:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8009816:	6022      	str	r2, [r4, #0]
 8009818:	780b      	ldrb	r3, [r1, #0]
 800981a:	f805 3b01 	strb.w	r3, [r5], #1
 800981e:	e7de      	b.n	80097de <_scanf_i+0x10e>
 8009820:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009824:	4631      	mov	r1, r6
 8009826:	4650      	mov	r0, sl
 8009828:	4798      	blx	r3
 800982a:	2800      	cmp	r0, #0
 800982c:	d0df      	beq.n	80097ee <_scanf_i+0x11e>
 800982e:	6823      	ldr	r3, [r4, #0]
 8009830:	05db      	lsls	r3, r3, #23
 8009832:	d50d      	bpl.n	8009850 <_scanf_i+0x180>
 8009834:	42bd      	cmp	r5, r7
 8009836:	d909      	bls.n	800984c <_scanf_i+0x17c>
 8009838:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800983c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009840:	4632      	mov	r2, r6
 8009842:	4650      	mov	r0, sl
 8009844:	4798      	blx	r3
 8009846:	f105 39ff 	add.w	r9, r5, #4294967295
 800984a:	464d      	mov	r5, r9
 800984c:	42bd      	cmp	r5, r7
 800984e:	d02d      	beq.n	80098ac <_scanf_i+0x1dc>
 8009850:	6822      	ldr	r2, [r4, #0]
 8009852:	f012 0210 	ands.w	r2, r2, #16
 8009856:	d113      	bne.n	8009880 <_scanf_i+0x1b0>
 8009858:	702a      	strb	r2, [r5, #0]
 800985a:	6863      	ldr	r3, [r4, #4]
 800985c:	9e01      	ldr	r6, [sp, #4]
 800985e:	4639      	mov	r1, r7
 8009860:	4650      	mov	r0, sl
 8009862:	47b0      	blx	r6
 8009864:	6821      	ldr	r1, [r4, #0]
 8009866:	f8d8 3000 	ldr.w	r3, [r8]
 800986a:	f011 0f20 	tst.w	r1, #32
 800986e:	d013      	beq.n	8009898 <_scanf_i+0x1c8>
 8009870:	1d1a      	adds	r2, r3, #4
 8009872:	f8c8 2000 	str.w	r2, [r8]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	6018      	str	r0, [r3, #0]
 800987a:	68e3      	ldr	r3, [r4, #12]
 800987c:	3301      	adds	r3, #1
 800987e:	60e3      	str	r3, [r4, #12]
 8009880:	1bed      	subs	r5, r5, r7
 8009882:	44ab      	add	fp, r5
 8009884:	6925      	ldr	r5, [r4, #16]
 8009886:	445d      	add	r5, fp
 8009888:	6125      	str	r5, [r4, #16]
 800988a:	2000      	movs	r0, #0
 800988c:	b007      	add	sp, #28
 800988e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009892:	f04f 0b00 	mov.w	fp, #0
 8009896:	e7ca      	b.n	800982e <_scanf_i+0x15e>
 8009898:	1d1a      	adds	r2, r3, #4
 800989a:	f8c8 2000 	str.w	r2, [r8]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f011 0f01 	tst.w	r1, #1
 80098a4:	bf14      	ite	ne
 80098a6:	8018      	strhne	r0, [r3, #0]
 80098a8:	6018      	streq	r0, [r3, #0]
 80098aa:	e7e6      	b.n	800987a <_scanf_i+0x1aa>
 80098ac:	2001      	movs	r0, #1
 80098ae:	e7ed      	b.n	800988c <_scanf_i+0x1bc>
 80098b0:	0800a5d4 	.word	0x0800a5d4
 80098b4:	08009a95 	.word	0x08009a95
 80098b8:	08006fb5 	.word	0x08006fb5
 80098bc:	0800aa1e 	.word	0x0800aa1e

080098c0 <_read_r>:
 80098c0:	b538      	push	{r3, r4, r5, lr}
 80098c2:	4d07      	ldr	r5, [pc, #28]	; (80098e0 <_read_r+0x20>)
 80098c4:	4604      	mov	r4, r0
 80098c6:	4608      	mov	r0, r1
 80098c8:	4611      	mov	r1, r2
 80098ca:	2200      	movs	r2, #0
 80098cc:	602a      	str	r2, [r5, #0]
 80098ce:	461a      	mov	r2, r3
 80098d0:	f7f8 fa36 	bl	8001d40 <_read>
 80098d4:	1c43      	adds	r3, r0, #1
 80098d6:	d102      	bne.n	80098de <_read_r+0x1e>
 80098d8:	682b      	ldr	r3, [r5, #0]
 80098da:	b103      	cbz	r3, 80098de <_read_r+0x1e>
 80098dc:	6023      	str	r3, [r4, #0]
 80098de:	bd38      	pop	{r3, r4, r5, pc}
 80098e0:	200003c4 	.word	0x200003c4
 80098e4:	00000000 	.word	0x00000000

080098e8 <nan>:
 80098e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80098f0 <nan+0x8>
 80098ec:	4770      	bx	lr
 80098ee:	bf00      	nop
 80098f0:	00000000 	.word	0x00000000
 80098f4:	7ff80000 	.word	0x7ff80000

080098f8 <_sbrk_r>:
 80098f8:	b538      	push	{r3, r4, r5, lr}
 80098fa:	4d06      	ldr	r5, [pc, #24]	; (8009914 <_sbrk_r+0x1c>)
 80098fc:	2300      	movs	r3, #0
 80098fe:	4604      	mov	r4, r0
 8009900:	4608      	mov	r0, r1
 8009902:	602b      	str	r3, [r5, #0]
 8009904:	f7f8 fa8a 	bl	8001e1c <_sbrk>
 8009908:	1c43      	adds	r3, r0, #1
 800990a:	d102      	bne.n	8009912 <_sbrk_r+0x1a>
 800990c:	682b      	ldr	r3, [r5, #0]
 800990e:	b103      	cbz	r3, 8009912 <_sbrk_r+0x1a>
 8009910:	6023      	str	r3, [r4, #0]
 8009912:	bd38      	pop	{r3, r4, r5, pc}
 8009914:	200003c4 	.word	0x200003c4

08009918 <__sccl>:
 8009918:	b570      	push	{r4, r5, r6, lr}
 800991a:	780b      	ldrb	r3, [r1, #0]
 800991c:	4604      	mov	r4, r0
 800991e:	2b5e      	cmp	r3, #94	; 0x5e
 8009920:	bf0b      	itete	eq
 8009922:	784b      	ldrbeq	r3, [r1, #1]
 8009924:	1c48      	addne	r0, r1, #1
 8009926:	1c88      	addeq	r0, r1, #2
 8009928:	2200      	movne	r2, #0
 800992a:	bf08      	it	eq
 800992c:	2201      	moveq	r2, #1
 800992e:	1e61      	subs	r1, r4, #1
 8009930:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8009934:	f801 2f01 	strb.w	r2, [r1, #1]!
 8009938:	42a9      	cmp	r1, r5
 800993a:	d1fb      	bne.n	8009934 <__sccl+0x1c>
 800993c:	b90b      	cbnz	r3, 8009942 <__sccl+0x2a>
 800993e:	3801      	subs	r0, #1
 8009940:	bd70      	pop	{r4, r5, r6, pc}
 8009942:	f082 0201 	eor.w	r2, r2, #1
 8009946:	54e2      	strb	r2, [r4, r3]
 8009948:	4605      	mov	r5, r0
 800994a:	4628      	mov	r0, r5
 800994c:	f810 1b01 	ldrb.w	r1, [r0], #1
 8009950:	292d      	cmp	r1, #45	; 0x2d
 8009952:	d006      	beq.n	8009962 <__sccl+0x4a>
 8009954:	295d      	cmp	r1, #93	; 0x5d
 8009956:	d0f3      	beq.n	8009940 <__sccl+0x28>
 8009958:	b909      	cbnz	r1, 800995e <__sccl+0x46>
 800995a:	4628      	mov	r0, r5
 800995c:	e7f0      	b.n	8009940 <__sccl+0x28>
 800995e:	460b      	mov	r3, r1
 8009960:	e7f1      	b.n	8009946 <__sccl+0x2e>
 8009962:	786e      	ldrb	r6, [r5, #1]
 8009964:	2e5d      	cmp	r6, #93	; 0x5d
 8009966:	d0fa      	beq.n	800995e <__sccl+0x46>
 8009968:	42b3      	cmp	r3, r6
 800996a:	dcf8      	bgt.n	800995e <__sccl+0x46>
 800996c:	3502      	adds	r5, #2
 800996e:	4619      	mov	r1, r3
 8009970:	3101      	adds	r1, #1
 8009972:	428e      	cmp	r6, r1
 8009974:	5462      	strb	r2, [r4, r1]
 8009976:	dcfb      	bgt.n	8009970 <__sccl+0x58>
 8009978:	1af1      	subs	r1, r6, r3
 800997a:	3901      	subs	r1, #1
 800997c:	1c58      	adds	r0, r3, #1
 800997e:	42b3      	cmp	r3, r6
 8009980:	bfa8      	it	ge
 8009982:	2100      	movge	r1, #0
 8009984:	1843      	adds	r3, r0, r1
 8009986:	e7e0      	b.n	800994a <__sccl+0x32>

08009988 <strncmp>:
 8009988:	b510      	push	{r4, lr}
 800998a:	b17a      	cbz	r2, 80099ac <strncmp+0x24>
 800998c:	4603      	mov	r3, r0
 800998e:	3901      	subs	r1, #1
 8009990:	1884      	adds	r4, r0, r2
 8009992:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009996:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800999a:	4290      	cmp	r0, r2
 800999c:	d101      	bne.n	80099a2 <strncmp+0x1a>
 800999e:	42a3      	cmp	r3, r4
 80099a0:	d101      	bne.n	80099a6 <strncmp+0x1e>
 80099a2:	1a80      	subs	r0, r0, r2
 80099a4:	bd10      	pop	{r4, pc}
 80099a6:	2800      	cmp	r0, #0
 80099a8:	d1f3      	bne.n	8009992 <strncmp+0xa>
 80099aa:	e7fa      	b.n	80099a2 <strncmp+0x1a>
 80099ac:	4610      	mov	r0, r2
 80099ae:	e7f9      	b.n	80099a4 <strncmp+0x1c>

080099b0 <_strtoul_l.constprop.0>:
 80099b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80099b4:	4f36      	ldr	r7, [pc, #216]	; (8009a90 <_strtoul_l.constprop.0+0xe0>)
 80099b6:	4686      	mov	lr, r0
 80099b8:	460d      	mov	r5, r1
 80099ba:	4628      	mov	r0, r5
 80099bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80099c0:	5de6      	ldrb	r6, [r4, r7]
 80099c2:	f016 0608 	ands.w	r6, r6, #8
 80099c6:	d1f8      	bne.n	80099ba <_strtoul_l.constprop.0+0xa>
 80099c8:	2c2d      	cmp	r4, #45	; 0x2d
 80099ca:	d12f      	bne.n	8009a2c <_strtoul_l.constprop.0+0x7c>
 80099cc:	782c      	ldrb	r4, [r5, #0]
 80099ce:	2601      	movs	r6, #1
 80099d0:	1c85      	adds	r5, r0, #2
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d057      	beq.n	8009a86 <_strtoul_l.constprop.0+0xd6>
 80099d6:	2b10      	cmp	r3, #16
 80099d8:	d109      	bne.n	80099ee <_strtoul_l.constprop.0+0x3e>
 80099da:	2c30      	cmp	r4, #48	; 0x30
 80099dc:	d107      	bne.n	80099ee <_strtoul_l.constprop.0+0x3e>
 80099de:	7828      	ldrb	r0, [r5, #0]
 80099e0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80099e4:	2858      	cmp	r0, #88	; 0x58
 80099e6:	d149      	bne.n	8009a7c <_strtoul_l.constprop.0+0xcc>
 80099e8:	786c      	ldrb	r4, [r5, #1]
 80099ea:	2310      	movs	r3, #16
 80099ec:	3502      	adds	r5, #2
 80099ee:	f04f 38ff 	mov.w	r8, #4294967295
 80099f2:	2700      	movs	r7, #0
 80099f4:	fbb8 f8f3 	udiv	r8, r8, r3
 80099f8:	fb03 f908 	mul.w	r9, r3, r8
 80099fc:	ea6f 0909 	mvn.w	r9, r9
 8009a00:	4638      	mov	r0, r7
 8009a02:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009a06:	f1bc 0f09 	cmp.w	ip, #9
 8009a0a:	d814      	bhi.n	8009a36 <_strtoul_l.constprop.0+0x86>
 8009a0c:	4664      	mov	r4, ip
 8009a0e:	42a3      	cmp	r3, r4
 8009a10:	dd22      	ble.n	8009a58 <_strtoul_l.constprop.0+0xa8>
 8009a12:	2f00      	cmp	r7, #0
 8009a14:	db1d      	blt.n	8009a52 <_strtoul_l.constprop.0+0xa2>
 8009a16:	4580      	cmp	r8, r0
 8009a18:	d31b      	bcc.n	8009a52 <_strtoul_l.constprop.0+0xa2>
 8009a1a:	d101      	bne.n	8009a20 <_strtoul_l.constprop.0+0x70>
 8009a1c:	45a1      	cmp	r9, r4
 8009a1e:	db18      	blt.n	8009a52 <_strtoul_l.constprop.0+0xa2>
 8009a20:	fb00 4003 	mla	r0, r0, r3, r4
 8009a24:	2701      	movs	r7, #1
 8009a26:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009a2a:	e7ea      	b.n	8009a02 <_strtoul_l.constprop.0+0x52>
 8009a2c:	2c2b      	cmp	r4, #43	; 0x2b
 8009a2e:	bf04      	itt	eq
 8009a30:	782c      	ldrbeq	r4, [r5, #0]
 8009a32:	1c85      	addeq	r5, r0, #2
 8009a34:	e7cd      	b.n	80099d2 <_strtoul_l.constprop.0+0x22>
 8009a36:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009a3a:	f1bc 0f19 	cmp.w	ip, #25
 8009a3e:	d801      	bhi.n	8009a44 <_strtoul_l.constprop.0+0x94>
 8009a40:	3c37      	subs	r4, #55	; 0x37
 8009a42:	e7e4      	b.n	8009a0e <_strtoul_l.constprop.0+0x5e>
 8009a44:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009a48:	f1bc 0f19 	cmp.w	ip, #25
 8009a4c:	d804      	bhi.n	8009a58 <_strtoul_l.constprop.0+0xa8>
 8009a4e:	3c57      	subs	r4, #87	; 0x57
 8009a50:	e7dd      	b.n	8009a0e <_strtoul_l.constprop.0+0x5e>
 8009a52:	f04f 37ff 	mov.w	r7, #4294967295
 8009a56:	e7e6      	b.n	8009a26 <_strtoul_l.constprop.0+0x76>
 8009a58:	2f00      	cmp	r7, #0
 8009a5a:	da07      	bge.n	8009a6c <_strtoul_l.constprop.0+0xbc>
 8009a5c:	2322      	movs	r3, #34	; 0x22
 8009a5e:	f8ce 3000 	str.w	r3, [lr]
 8009a62:	f04f 30ff 	mov.w	r0, #4294967295
 8009a66:	b932      	cbnz	r2, 8009a76 <_strtoul_l.constprop.0+0xc6>
 8009a68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a6c:	b106      	cbz	r6, 8009a70 <_strtoul_l.constprop.0+0xc0>
 8009a6e:	4240      	negs	r0, r0
 8009a70:	2a00      	cmp	r2, #0
 8009a72:	d0f9      	beq.n	8009a68 <_strtoul_l.constprop.0+0xb8>
 8009a74:	b107      	cbz	r7, 8009a78 <_strtoul_l.constprop.0+0xc8>
 8009a76:	1e69      	subs	r1, r5, #1
 8009a78:	6011      	str	r1, [r2, #0]
 8009a7a:	e7f5      	b.n	8009a68 <_strtoul_l.constprop.0+0xb8>
 8009a7c:	2430      	movs	r4, #48	; 0x30
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d1b5      	bne.n	80099ee <_strtoul_l.constprop.0+0x3e>
 8009a82:	2308      	movs	r3, #8
 8009a84:	e7b3      	b.n	80099ee <_strtoul_l.constprop.0+0x3e>
 8009a86:	2c30      	cmp	r4, #48	; 0x30
 8009a88:	d0a9      	beq.n	80099de <_strtoul_l.constprop.0+0x2e>
 8009a8a:	230a      	movs	r3, #10
 8009a8c:	e7af      	b.n	80099ee <_strtoul_l.constprop.0+0x3e>
 8009a8e:	bf00      	nop
 8009a90:	0800a691 	.word	0x0800a691

08009a94 <_strtoul_r>:
 8009a94:	f7ff bf8c 	b.w	80099b0 <_strtoul_l.constprop.0>

08009a98 <__submore>:
 8009a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a9c:	460c      	mov	r4, r1
 8009a9e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009aa0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009aa4:	4299      	cmp	r1, r3
 8009aa6:	d11d      	bne.n	8009ae4 <__submore+0x4c>
 8009aa8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009aac:	f7ff fa14 	bl	8008ed8 <_malloc_r>
 8009ab0:	b918      	cbnz	r0, 8009aba <__submore+0x22>
 8009ab2:	f04f 30ff 	mov.w	r0, #4294967295
 8009ab6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009aba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009abe:	63a3      	str	r3, [r4, #56]	; 0x38
 8009ac0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8009ac4:	6360      	str	r0, [r4, #52]	; 0x34
 8009ac6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8009aca:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009ace:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8009ad2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009ad6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8009ada:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8009ade:	6020      	str	r0, [r4, #0]
 8009ae0:	2000      	movs	r0, #0
 8009ae2:	e7e8      	b.n	8009ab6 <__submore+0x1e>
 8009ae4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8009ae6:	0077      	lsls	r7, r6, #1
 8009ae8:	463a      	mov	r2, r7
 8009aea:	f000 fa2d 	bl	8009f48 <_realloc_r>
 8009aee:	4605      	mov	r5, r0
 8009af0:	2800      	cmp	r0, #0
 8009af2:	d0de      	beq.n	8009ab2 <__submore+0x1a>
 8009af4:	eb00 0806 	add.w	r8, r0, r6
 8009af8:	4601      	mov	r1, r0
 8009afa:	4632      	mov	r2, r6
 8009afc:	4640      	mov	r0, r8
 8009afe:	f7fe fc99 	bl	8008434 <memcpy>
 8009b02:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8009b06:	f8c4 8000 	str.w	r8, [r4]
 8009b0a:	e7e9      	b.n	8009ae0 <__submore+0x48>

08009b0c <__ascii_wctomb>:
 8009b0c:	b149      	cbz	r1, 8009b22 <__ascii_wctomb+0x16>
 8009b0e:	2aff      	cmp	r2, #255	; 0xff
 8009b10:	bf85      	ittet	hi
 8009b12:	238a      	movhi	r3, #138	; 0x8a
 8009b14:	6003      	strhi	r3, [r0, #0]
 8009b16:	700a      	strbls	r2, [r1, #0]
 8009b18:	f04f 30ff 	movhi.w	r0, #4294967295
 8009b1c:	bf98      	it	ls
 8009b1e:	2001      	movls	r0, #1
 8009b20:	4770      	bx	lr
 8009b22:	4608      	mov	r0, r1
 8009b24:	4770      	bx	lr
	...

08009b28 <__assert_func>:
 8009b28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009b2a:	4614      	mov	r4, r2
 8009b2c:	461a      	mov	r2, r3
 8009b2e:	4b09      	ldr	r3, [pc, #36]	; (8009b54 <__assert_func+0x2c>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	4605      	mov	r5, r0
 8009b34:	68d8      	ldr	r0, [r3, #12]
 8009b36:	b14c      	cbz	r4, 8009b4c <__assert_func+0x24>
 8009b38:	4b07      	ldr	r3, [pc, #28]	; (8009b58 <__assert_func+0x30>)
 8009b3a:	9100      	str	r1, [sp, #0]
 8009b3c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009b40:	4906      	ldr	r1, [pc, #24]	; (8009b5c <__assert_func+0x34>)
 8009b42:	462b      	mov	r3, r5
 8009b44:	f000 f9a6 	bl	8009e94 <fiprintf>
 8009b48:	f000 fc46 	bl	800a3d8 <abort>
 8009b4c:	4b04      	ldr	r3, [pc, #16]	; (8009b60 <__assert_func+0x38>)
 8009b4e:	461c      	mov	r4, r3
 8009b50:	e7f3      	b.n	8009b3a <__assert_func+0x12>
 8009b52:	bf00      	nop
 8009b54:	20000018 	.word	0x20000018
 8009b58:	0800aa20 	.word	0x0800aa20
 8009b5c:	0800aa2d 	.word	0x0800aa2d
 8009b60:	0800aa5b 	.word	0x0800aa5b

08009b64 <__sflush_r>:
 8009b64:	898a      	ldrh	r2, [r1, #12]
 8009b66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b6a:	4605      	mov	r5, r0
 8009b6c:	0710      	lsls	r0, r2, #28
 8009b6e:	460c      	mov	r4, r1
 8009b70:	d458      	bmi.n	8009c24 <__sflush_r+0xc0>
 8009b72:	684b      	ldr	r3, [r1, #4]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	dc05      	bgt.n	8009b84 <__sflush_r+0x20>
 8009b78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	dc02      	bgt.n	8009b84 <__sflush_r+0x20>
 8009b7e:	2000      	movs	r0, #0
 8009b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009b86:	2e00      	cmp	r6, #0
 8009b88:	d0f9      	beq.n	8009b7e <__sflush_r+0x1a>
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009b90:	682f      	ldr	r7, [r5, #0]
 8009b92:	602b      	str	r3, [r5, #0]
 8009b94:	d032      	beq.n	8009bfc <__sflush_r+0x98>
 8009b96:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009b98:	89a3      	ldrh	r3, [r4, #12]
 8009b9a:	075a      	lsls	r2, r3, #29
 8009b9c:	d505      	bpl.n	8009baa <__sflush_r+0x46>
 8009b9e:	6863      	ldr	r3, [r4, #4]
 8009ba0:	1ac0      	subs	r0, r0, r3
 8009ba2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009ba4:	b10b      	cbz	r3, 8009baa <__sflush_r+0x46>
 8009ba6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009ba8:	1ac0      	subs	r0, r0, r3
 8009baa:	2300      	movs	r3, #0
 8009bac:	4602      	mov	r2, r0
 8009bae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009bb0:	6a21      	ldr	r1, [r4, #32]
 8009bb2:	4628      	mov	r0, r5
 8009bb4:	47b0      	blx	r6
 8009bb6:	1c43      	adds	r3, r0, #1
 8009bb8:	89a3      	ldrh	r3, [r4, #12]
 8009bba:	d106      	bne.n	8009bca <__sflush_r+0x66>
 8009bbc:	6829      	ldr	r1, [r5, #0]
 8009bbe:	291d      	cmp	r1, #29
 8009bc0:	d82c      	bhi.n	8009c1c <__sflush_r+0xb8>
 8009bc2:	4a2a      	ldr	r2, [pc, #168]	; (8009c6c <__sflush_r+0x108>)
 8009bc4:	40ca      	lsrs	r2, r1
 8009bc6:	07d6      	lsls	r6, r2, #31
 8009bc8:	d528      	bpl.n	8009c1c <__sflush_r+0xb8>
 8009bca:	2200      	movs	r2, #0
 8009bcc:	6062      	str	r2, [r4, #4]
 8009bce:	04d9      	lsls	r1, r3, #19
 8009bd0:	6922      	ldr	r2, [r4, #16]
 8009bd2:	6022      	str	r2, [r4, #0]
 8009bd4:	d504      	bpl.n	8009be0 <__sflush_r+0x7c>
 8009bd6:	1c42      	adds	r2, r0, #1
 8009bd8:	d101      	bne.n	8009bde <__sflush_r+0x7a>
 8009bda:	682b      	ldr	r3, [r5, #0]
 8009bdc:	b903      	cbnz	r3, 8009be0 <__sflush_r+0x7c>
 8009bde:	6560      	str	r0, [r4, #84]	; 0x54
 8009be0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009be2:	602f      	str	r7, [r5, #0]
 8009be4:	2900      	cmp	r1, #0
 8009be6:	d0ca      	beq.n	8009b7e <__sflush_r+0x1a>
 8009be8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009bec:	4299      	cmp	r1, r3
 8009bee:	d002      	beq.n	8009bf6 <__sflush_r+0x92>
 8009bf0:	4628      	mov	r0, r5
 8009bf2:	f7ff f905 	bl	8008e00 <_free_r>
 8009bf6:	2000      	movs	r0, #0
 8009bf8:	6360      	str	r0, [r4, #52]	; 0x34
 8009bfa:	e7c1      	b.n	8009b80 <__sflush_r+0x1c>
 8009bfc:	6a21      	ldr	r1, [r4, #32]
 8009bfe:	2301      	movs	r3, #1
 8009c00:	4628      	mov	r0, r5
 8009c02:	47b0      	blx	r6
 8009c04:	1c41      	adds	r1, r0, #1
 8009c06:	d1c7      	bne.n	8009b98 <__sflush_r+0x34>
 8009c08:	682b      	ldr	r3, [r5, #0]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d0c4      	beq.n	8009b98 <__sflush_r+0x34>
 8009c0e:	2b1d      	cmp	r3, #29
 8009c10:	d001      	beq.n	8009c16 <__sflush_r+0xb2>
 8009c12:	2b16      	cmp	r3, #22
 8009c14:	d101      	bne.n	8009c1a <__sflush_r+0xb6>
 8009c16:	602f      	str	r7, [r5, #0]
 8009c18:	e7b1      	b.n	8009b7e <__sflush_r+0x1a>
 8009c1a:	89a3      	ldrh	r3, [r4, #12]
 8009c1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c20:	81a3      	strh	r3, [r4, #12]
 8009c22:	e7ad      	b.n	8009b80 <__sflush_r+0x1c>
 8009c24:	690f      	ldr	r7, [r1, #16]
 8009c26:	2f00      	cmp	r7, #0
 8009c28:	d0a9      	beq.n	8009b7e <__sflush_r+0x1a>
 8009c2a:	0793      	lsls	r3, r2, #30
 8009c2c:	680e      	ldr	r6, [r1, #0]
 8009c2e:	bf08      	it	eq
 8009c30:	694b      	ldreq	r3, [r1, #20]
 8009c32:	600f      	str	r7, [r1, #0]
 8009c34:	bf18      	it	ne
 8009c36:	2300      	movne	r3, #0
 8009c38:	eba6 0807 	sub.w	r8, r6, r7
 8009c3c:	608b      	str	r3, [r1, #8]
 8009c3e:	f1b8 0f00 	cmp.w	r8, #0
 8009c42:	dd9c      	ble.n	8009b7e <__sflush_r+0x1a>
 8009c44:	6a21      	ldr	r1, [r4, #32]
 8009c46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009c48:	4643      	mov	r3, r8
 8009c4a:	463a      	mov	r2, r7
 8009c4c:	4628      	mov	r0, r5
 8009c4e:	47b0      	blx	r6
 8009c50:	2800      	cmp	r0, #0
 8009c52:	dc06      	bgt.n	8009c62 <__sflush_r+0xfe>
 8009c54:	89a3      	ldrh	r3, [r4, #12]
 8009c56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c5a:	81a3      	strh	r3, [r4, #12]
 8009c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8009c60:	e78e      	b.n	8009b80 <__sflush_r+0x1c>
 8009c62:	4407      	add	r7, r0
 8009c64:	eba8 0800 	sub.w	r8, r8, r0
 8009c68:	e7e9      	b.n	8009c3e <__sflush_r+0xda>
 8009c6a:	bf00      	nop
 8009c6c:	20400001 	.word	0x20400001

08009c70 <_fflush_r>:
 8009c70:	b538      	push	{r3, r4, r5, lr}
 8009c72:	690b      	ldr	r3, [r1, #16]
 8009c74:	4605      	mov	r5, r0
 8009c76:	460c      	mov	r4, r1
 8009c78:	b913      	cbnz	r3, 8009c80 <_fflush_r+0x10>
 8009c7a:	2500      	movs	r5, #0
 8009c7c:	4628      	mov	r0, r5
 8009c7e:	bd38      	pop	{r3, r4, r5, pc}
 8009c80:	b118      	cbz	r0, 8009c8a <_fflush_r+0x1a>
 8009c82:	6983      	ldr	r3, [r0, #24]
 8009c84:	b90b      	cbnz	r3, 8009c8a <_fflush_r+0x1a>
 8009c86:	f000 f887 	bl	8009d98 <__sinit>
 8009c8a:	4b14      	ldr	r3, [pc, #80]	; (8009cdc <_fflush_r+0x6c>)
 8009c8c:	429c      	cmp	r4, r3
 8009c8e:	d11b      	bne.n	8009cc8 <_fflush_r+0x58>
 8009c90:	686c      	ldr	r4, [r5, #4]
 8009c92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d0ef      	beq.n	8009c7a <_fflush_r+0xa>
 8009c9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009c9c:	07d0      	lsls	r0, r2, #31
 8009c9e:	d404      	bmi.n	8009caa <_fflush_r+0x3a>
 8009ca0:	0599      	lsls	r1, r3, #22
 8009ca2:	d402      	bmi.n	8009caa <_fflush_r+0x3a>
 8009ca4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ca6:	f000 f927 	bl	8009ef8 <__retarget_lock_acquire_recursive>
 8009caa:	4628      	mov	r0, r5
 8009cac:	4621      	mov	r1, r4
 8009cae:	f7ff ff59 	bl	8009b64 <__sflush_r>
 8009cb2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009cb4:	07da      	lsls	r2, r3, #31
 8009cb6:	4605      	mov	r5, r0
 8009cb8:	d4e0      	bmi.n	8009c7c <_fflush_r+0xc>
 8009cba:	89a3      	ldrh	r3, [r4, #12]
 8009cbc:	059b      	lsls	r3, r3, #22
 8009cbe:	d4dd      	bmi.n	8009c7c <_fflush_r+0xc>
 8009cc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009cc2:	f000 f91a 	bl	8009efa <__retarget_lock_release_recursive>
 8009cc6:	e7d9      	b.n	8009c7c <_fflush_r+0xc>
 8009cc8:	4b05      	ldr	r3, [pc, #20]	; (8009ce0 <_fflush_r+0x70>)
 8009cca:	429c      	cmp	r4, r3
 8009ccc:	d101      	bne.n	8009cd2 <_fflush_r+0x62>
 8009cce:	68ac      	ldr	r4, [r5, #8]
 8009cd0:	e7df      	b.n	8009c92 <_fflush_r+0x22>
 8009cd2:	4b04      	ldr	r3, [pc, #16]	; (8009ce4 <_fflush_r+0x74>)
 8009cd4:	429c      	cmp	r4, r3
 8009cd6:	bf08      	it	eq
 8009cd8:	68ec      	ldreq	r4, [r5, #12]
 8009cda:	e7da      	b.n	8009c92 <_fflush_r+0x22>
 8009cdc:	0800aa7c 	.word	0x0800aa7c
 8009ce0:	0800aa9c 	.word	0x0800aa9c
 8009ce4:	0800aa5c 	.word	0x0800aa5c

08009ce8 <std>:
 8009ce8:	2300      	movs	r3, #0
 8009cea:	b510      	push	{r4, lr}
 8009cec:	4604      	mov	r4, r0
 8009cee:	e9c0 3300 	strd	r3, r3, [r0]
 8009cf2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009cf6:	6083      	str	r3, [r0, #8]
 8009cf8:	8181      	strh	r1, [r0, #12]
 8009cfa:	6643      	str	r3, [r0, #100]	; 0x64
 8009cfc:	81c2      	strh	r2, [r0, #14]
 8009cfe:	6183      	str	r3, [r0, #24]
 8009d00:	4619      	mov	r1, r3
 8009d02:	2208      	movs	r2, #8
 8009d04:	305c      	adds	r0, #92	; 0x5c
 8009d06:	f7fb fb91 	bl	800542c <memset>
 8009d0a:	4b05      	ldr	r3, [pc, #20]	; (8009d20 <std+0x38>)
 8009d0c:	6263      	str	r3, [r4, #36]	; 0x24
 8009d0e:	4b05      	ldr	r3, [pc, #20]	; (8009d24 <std+0x3c>)
 8009d10:	62a3      	str	r3, [r4, #40]	; 0x28
 8009d12:	4b05      	ldr	r3, [pc, #20]	; (8009d28 <std+0x40>)
 8009d14:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009d16:	4b05      	ldr	r3, [pc, #20]	; (8009d2c <std+0x44>)
 8009d18:	6224      	str	r4, [r4, #32]
 8009d1a:	6323      	str	r3, [r4, #48]	; 0x30
 8009d1c:	bd10      	pop	{r4, pc}
 8009d1e:	bf00      	nop
 8009d20:	080061d5 	.word	0x080061d5
 8009d24:	080061fb 	.word	0x080061fb
 8009d28:	08006233 	.word	0x08006233
 8009d2c:	08006257 	.word	0x08006257

08009d30 <_cleanup_r>:
 8009d30:	4901      	ldr	r1, [pc, #4]	; (8009d38 <_cleanup_r+0x8>)
 8009d32:	f000 b8c1 	b.w	8009eb8 <_fwalk_reent>
 8009d36:	bf00      	nop
 8009d38:	08009c71 	.word	0x08009c71

08009d3c <__sfmoreglue>:
 8009d3c:	b570      	push	{r4, r5, r6, lr}
 8009d3e:	2268      	movs	r2, #104	; 0x68
 8009d40:	1e4d      	subs	r5, r1, #1
 8009d42:	4355      	muls	r5, r2
 8009d44:	460e      	mov	r6, r1
 8009d46:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009d4a:	f7ff f8c5 	bl	8008ed8 <_malloc_r>
 8009d4e:	4604      	mov	r4, r0
 8009d50:	b140      	cbz	r0, 8009d64 <__sfmoreglue+0x28>
 8009d52:	2100      	movs	r1, #0
 8009d54:	e9c0 1600 	strd	r1, r6, [r0]
 8009d58:	300c      	adds	r0, #12
 8009d5a:	60a0      	str	r0, [r4, #8]
 8009d5c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009d60:	f7fb fb64 	bl	800542c <memset>
 8009d64:	4620      	mov	r0, r4
 8009d66:	bd70      	pop	{r4, r5, r6, pc}

08009d68 <__sfp_lock_acquire>:
 8009d68:	4801      	ldr	r0, [pc, #4]	; (8009d70 <__sfp_lock_acquire+0x8>)
 8009d6a:	f000 b8c5 	b.w	8009ef8 <__retarget_lock_acquire_recursive>
 8009d6e:	bf00      	nop
 8009d70:	200003c9 	.word	0x200003c9

08009d74 <__sfp_lock_release>:
 8009d74:	4801      	ldr	r0, [pc, #4]	; (8009d7c <__sfp_lock_release+0x8>)
 8009d76:	f000 b8c0 	b.w	8009efa <__retarget_lock_release_recursive>
 8009d7a:	bf00      	nop
 8009d7c:	200003c9 	.word	0x200003c9

08009d80 <__sinit_lock_acquire>:
 8009d80:	4801      	ldr	r0, [pc, #4]	; (8009d88 <__sinit_lock_acquire+0x8>)
 8009d82:	f000 b8b9 	b.w	8009ef8 <__retarget_lock_acquire_recursive>
 8009d86:	bf00      	nop
 8009d88:	200003ca 	.word	0x200003ca

08009d8c <__sinit_lock_release>:
 8009d8c:	4801      	ldr	r0, [pc, #4]	; (8009d94 <__sinit_lock_release+0x8>)
 8009d8e:	f000 b8b4 	b.w	8009efa <__retarget_lock_release_recursive>
 8009d92:	bf00      	nop
 8009d94:	200003ca 	.word	0x200003ca

08009d98 <__sinit>:
 8009d98:	b510      	push	{r4, lr}
 8009d9a:	4604      	mov	r4, r0
 8009d9c:	f7ff fff0 	bl	8009d80 <__sinit_lock_acquire>
 8009da0:	69a3      	ldr	r3, [r4, #24]
 8009da2:	b11b      	cbz	r3, 8009dac <__sinit+0x14>
 8009da4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009da8:	f7ff bff0 	b.w	8009d8c <__sinit_lock_release>
 8009dac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009db0:	6523      	str	r3, [r4, #80]	; 0x50
 8009db2:	4b13      	ldr	r3, [pc, #76]	; (8009e00 <__sinit+0x68>)
 8009db4:	4a13      	ldr	r2, [pc, #76]	; (8009e04 <__sinit+0x6c>)
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	62a2      	str	r2, [r4, #40]	; 0x28
 8009dba:	42a3      	cmp	r3, r4
 8009dbc:	bf04      	itt	eq
 8009dbe:	2301      	moveq	r3, #1
 8009dc0:	61a3      	streq	r3, [r4, #24]
 8009dc2:	4620      	mov	r0, r4
 8009dc4:	f000 f820 	bl	8009e08 <__sfp>
 8009dc8:	6060      	str	r0, [r4, #4]
 8009dca:	4620      	mov	r0, r4
 8009dcc:	f000 f81c 	bl	8009e08 <__sfp>
 8009dd0:	60a0      	str	r0, [r4, #8]
 8009dd2:	4620      	mov	r0, r4
 8009dd4:	f000 f818 	bl	8009e08 <__sfp>
 8009dd8:	2200      	movs	r2, #0
 8009dda:	60e0      	str	r0, [r4, #12]
 8009ddc:	2104      	movs	r1, #4
 8009dde:	6860      	ldr	r0, [r4, #4]
 8009de0:	f7ff ff82 	bl	8009ce8 <std>
 8009de4:	68a0      	ldr	r0, [r4, #8]
 8009de6:	2201      	movs	r2, #1
 8009de8:	2109      	movs	r1, #9
 8009dea:	f7ff ff7d 	bl	8009ce8 <std>
 8009dee:	68e0      	ldr	r0, [r4, #12]
 8009df0:	2202      	movs	r2, #2
 8009df2:	2112      	movs	r1, #18
 8009df4:	f7ff ff78 	bl	8009ce8 <std>
 8009df8:	2301      	movs	r3, #1
 8009dfa:	61a3      	str	r3, [r4, #24]
 8009dfc:	e7d2      	b.n	8009da4 <__sinit+0xc>
 8009dfe:	bf00      	nop
 8009e00:	0800a600 	.word	0x0800a600
 8009e04:	08009d31 	.word	0x08009d31

08009e08 <__sfp>:
 8009e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e0a:	4607      	mov	r7, r0
 8009e0c:	f7ff ffac 	bl	8009d68 <__sfp_lock_acquire>
 8009e10:	4b1e      	ldr	r3, [pc, #120]	; (8009e8c <__sfp+0x84>)
 8009e12:	681e      	ldr	r6, [r3, #0]
 8009e14:	69b3      	ldr	r3, [r6, #24]
 8009e16:	b913      	cbnz	r3, 8009e1e <__sfp+0x16>
 8009e18:	4630      	mov	r0, r6
 8009e1a:	f7ff ffbd 	bl	8009d98 <__sinit>
 8009e1e:	3648      	adds	r6, #72	; 0x48
 8009e20:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009e24:	3b01      	subs	r3, #1
 8009e26:	d503      	bpl.n	8009e30 <__sfp+0x28>
 8009e28:	6833      	ldr	r3, [r6, #0]
 8009e2a:	b30b      	cbz	r3, 8009e70 <__sfp+0x68>
 8009e2c:	6836      	ldr	r6, [r6, #0]
 8009e2e:	e7f7      	b.n	8009e20 <__sfp+0x18>
 8009e30:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009e34:	b9d5      	cbnz	r5, 8009e6c <__sfp+0x64>
 8009e36:	4b16      	ldr	r3, [pc, #88]	; (8009e90 <__sfp+0x88>)
 8009e38:	60e3      	str	r3, [r4, #12]
 8009e3a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009e3e:	6665      	str	r5, [r4, #100]	; 0x64
 8009e40:	f000 f859 	bl	8009ef6 <__retarget_lock_init_recursive>
 8009e44:	f7ff ff96 	bl	8009d74 <__sfp_lock_release>
 8009e48:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009e4c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009e50:	6025      	str	r5, [r4, #0]
 8009e52:	61a5      	str	r5, [r4, #24]
 8009e54:	2208      	movs	r2, #8
 8009e56:	4629      	mov	r1, r5
 8009e58:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009e5c:	f7fb fae6 	bl	800542c <memset>
 8009e60:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009e64:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009e68:	4620      	mov	r0, r4
 8009e6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e6c:	3468      	adds	r4, #104	; 0x68
 8009e6e:	e7d9      	b.n	8009e24 <__sfp+0x1c>
 8009e70:	2104      	movs	r1, #4
 8009e72:	4638      	mov	r0, r7
 8009e74:	f7ff ff62 	bl	8009d3c <__sfmoreglue>
 8009e78:	4604      	mov	r4, r0
 8009e7a:	6030      	str	r0, [r6, #0]
 8009e7c:	2800      	cmp	r0, #0
 8009e7e:	d1d5      	bne.n	8009e2c <__sfp+0x24>
 8009e80:	f7ff ff78 	bl	8009d74 <__sfp_lock_release>
 8009e84:	230c      	movs	r3, #12
 8009e86:	603b      	str	r3, [r7, #0]
 8009e88:	e7ee      	b.n	8009e68 <__sfp+0x60>
 8009e8a:	bf00      	nop
 8009e8c:	0800a600 	.word	0x0800a600
 8009e90:	ffff0001 	.word	0xffff0001

08009e94 <fiprintf>:
 8009e94:	b40e      	push	{r1, r2, r3}
 8009e96:	b503      	push	{r0, r1, lr}
 8009e98:	4601      	mov	r1, r0
 8009e9a:	ab03      	add	r3, sp, #12
 8009e9c:	4805      	ldr	r0, [pc, #20]	; (8009eb4 <fiprintf+0x20>)
 8009e9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ea2:	6800      	ldr	r0, [r0, #0]
 8009ea4:	9301      	str	r3, [sp, #4]
 8009ea6:	f000 f8a7 	bl	8009ff8 <_vfiprintf_r>
 8009eaa:	b002      	add	sp, #8
 8009eac:	f85d eb04 	ldr.w	lr, [sp], #4
 8009eb0:	b003      	add	sp, #12
 8009eb2:	4770      	bx	lr
 8009eb4:	20000018 	.word	0x20000018

08009eb8 <_fwalk_reent>:
 8009eb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ebc:	4606      	mov	r6, r0
 8009ebe:	4688      	mov	r8, r1
 8009ec0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009ec4:	2700      	movs	r7, #0
 8009ec6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009eca:	f1b9 0901 	subs.w	r9, r9, #1
 8009ece:	d505      	bpl.n	8009edc <_fwalk_reent+0x24>
 8009ed0:	6824      	ldr	r4, [r4, #0]
 8009ed2:	2c00      	cmp	r4, #0
 8009ed4:	d1f7      	bne.n	8009ec6 <_fwalk_reent+0xe>
 8009ed6:	4638      	mov	r0, r7
 8009ed8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009edc:	89ab      	ldrh	r3, [r5, #12]
 8009ede:	2b01      	cmp	r3, #1
 8009ee0:	d907      	bls.n	8009ef2 <_fwalk_reent+0x3a>
 8009ee2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009ee6:	3301      	adds	r3, #1
 8009ee8:	d003      	beq.n	8009ef2 <_fwalk_reent+0x3a>
 8009eea:	4629      	mov	r1, r5
 8009eec:	4630      	mov	r0, r6
 8009eee:	47c0      	blx	r8
 8009ef0:	4307      	orrs	r7, r0
 8009ef2:	3568      	adds	r5, #104	; 0x68
 8009ef4:	e7e9      	b.n	8009eca <_fwalk_reent+0x12>

08009ef6 <__retarget_lock_init_recursive>:
 8009ef6:	4770      	bx	lr

08009ef8 <__retarget_lock_acquire_recursive>:
 8009ef8:	4770      	bx	lr

08009efa <__retarget_lock_release_recursive>:
 8009efa:	4770      	bx	lr

08009efc <memmove>:
 8009efc:	4288      	cmp	r0, r1
 8009efe:	b510      	push	{r4, lr}
 8009f00:	eb01 0402 	add.w	r4, r1, r2
 8009f04:	d902      	bls.n	8009f0c <memmove+0x10>
 8009f06:	4284      	cmp	r4, r0
 8009f08:	4623      	mov	r3, r4
 8009f0a:	d807      	bhi.n	8009f1c <memmove+0x20>
 8009f0c:	1e43      	subs	r3, r0, #1
 8009f0e:	42a1      	cmp	r1, r4
 8009f10:	d008      	beq.n	8009f24 <memmove+0x28>
 8009f12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009f16:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009f1a:	e7f8      	b.n	8009f0e <memmove+0x12>
 8009f1c:	4402      	add	r2, r0
 8009f1e:	4601      	mov	r1, r0
 8009f20:	428a      	cmp	r2, r1
 8009f22:	d100      	bne.n	8009f26 <memmove+0x2a>
 8009f24:	bd10      	pop	{r4, pc}
 8009f26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009f2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009f2e:	e7f7      	b.n	8009f20 <memmove+0x24>

08009f30 <__malloc_lock>:
 8009f30:	4801      	ldr	r0, [pc, #4]	; (8009f38 <__malloc_lock+0x8>)
 8009f32:	f7ff bfe1 	b.w	8009ef8 <__retarget_lock_acquire_recursive>
 8009f36:	bf00      	nop
 8009f38:	200003c8 	.word	0x200003c8

08009f3c <__malloc_unlock>:
 8009f3c:	4801      	ldr	r0, [pc, #4]	; (8009f44 <__malloc_unlock+0x8>)
 8009f3e:	f7ff bfdc 	b.w	8009efa <__retarget_lock_release_recursive>
 8009f42:	bf00      	nop
 8009f44:	200003c8 	.word	0x200003c8

08009f48 <_realloc_r>:
 8009f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f4c:	4680      	mov	r8, r0
 8009f4e:	4614      	mov	r4, r2
 8009f50:	460e      	mov	r6, r1
 8009f52:	b921      	cbnz	r1, 8009f5e <_realloc_r+0x16>
 8009f54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f58:	4611      	mov	r1, r2
 8009f5a:	f7fe bfbd 	b.w	8008ed8 <_malloc_r>
 8009f5e:	b92a      	cbnz	r2, 8009f6c <_realloc_r+0x24>
 8009f60:	f7fe ff4e 	bl	8008e00 <_free_r>
 8009f64:	4625      	mov	r5, r4
 8009f66:	4628      	mov	r0, r5
 8009f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f6c:	f000 faa0 	bl	800a4b0 <_malloc_usable_size_r>
 8009f70:	4284      	cmp	r4, r0
 8009f72:	4607      	mov	r7, r0
 8009f74:	d802      	bhi.n	8009f7c <_realloc_r+0x34>
 8009f76:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009f7a:	d812      	bhi.n	8009fa2 <_realloc_r+0x5a>
 8009f7c:	4621      	mov	r1, r4
 8009f7e:	4640      	mov	r0, r8
 8009f80:	f7fe ffaa 	bl	8008ed8 <_malloc_r>
 8009f84:	4605      	mov	r5, r0
 8009f86:	2800      	cmp	r0, #0
 8009f88:	d0ed      	beq.n	8009f66 <_realloc_r+0x1e>
 8009f8a:	42bc      	cmp	r4, r7
 8009f8c:	4622      	mov	r2, r4
 8009f8e:	4631      	mov	r1, r6
 8009f90:	bf28      	it	cs
 8009f92:	463a      	movcs	r2, r7
 8009f94:	f7fe fa4e 	bl	8008434 <memcpy>
 8009f98:	4631      	mov	r1, r6
 8009f9a:	4640      	mov	r0, r8
 8009f9c:	f7fe ff30 	bl	8008e00 <_free_r>
 8009fa0:	e7e1      	b.n	8009f66 <_realloc_r+0x1e>
 8009fa2:	4635      	mov	r5, r6
 8009fa4:	e7df      	b.n	8009f66 <_realloc_r+0x1e>

08009fa6 <__sfputc_r>:
 8009fa6:	6893      	ldr	r3, [r2, #8]
 8009fa8:	3b01      	subs	r3, #1
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	b410      	push	{r4}
 8009fae:	6093      	str	r3, [r2, #8]
 8009fb0:	da08      	bge.n	8009fc4 <__sfputc_r+0x1e>
 8009fb2:	6994      	ldr	r4, [r2, #24]
 8009fb4:	42a3      	cmp	r3, r4
 8009fb6:	db01      	blt.n	8009fbc <__sfputc_r+0x16>
 8009fb8:	290a      	cmp	r1, #10
 8009fba:	d103      	bne.n	8009fc4 <__sfputc_r+0x1e>
 8009fbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009fc0:	f000 b94a 	b.w	800a258 <__swbuf_r>
 8009fc4:	6813      	ldr	r3, [r2, #0]
 8009fc6:	1c58      	adds	r0, r3, #1
 8009fc8:	6010      	str	r0, [r2, #0]
 8009fca:	7019      	strb	r1, [r3, #0]
 8009fcc:	4608      	mov	r0, r1
 8009fce:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009fd2:	4770      	bx	lr

08009fd4 <__sfputs_r>:
 8009fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fd6:	4606      	mov	r6, r0
 8009fd8:	460f      	mov	r7, r1
 8009fda:	4614      	mov	r4, r2
 8009fdc:	18d5      	adds	r5, r2, r3
 8009fde:	42ac      	cmp	r4, r5
 8009fe0:	d101      	bne.n	8009fe6 <__sfputs_r+0x12>
 8009fe2:	2000      	movs	r0, #0
 8009fe4:	e007      	b.n	8009ff6 <__sfputs_r+0x22>
 8009fe6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fea:	463a      	mov	r2, r7
 8009fec:	4630      	mov	r0, r6
 8009fee:	f7ff ffda 	bl	8009fa6 <__sfputc_r>
 8009ff2:	1c43      	adds	r3, r0, #1
 8009ff4:	d1f3      	bne.n	8009fde <__sfputs_r+0xa>
 8009ff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009ff8 <_vfiprintf_r>:
 8009ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ffc:	460d      	mov	r5, r1
 8009ffe:	b09d      	sub	sp, #116	; 0x74
 800a000:	4614      	mov	r4, r2
 800a002:	4698      	mov	r8, r3
 800a004:	4606      	mov	r6, r0
 800a006:	b118      	cbz	r0, 800a010 <_vfiprintf_r+0x18>
 800a008:	6983      	ldr	r3, [r0, #24]
 800a00a:	b90b      	cbnz	r3, 800a010 <_vfiprintf_r+0x18>
 800a00c:	f7ff fec4 	bl	8009d98 <__sinit>
 800a010:	4b89      	ldr	r3, [pc, #548]	; (800a238 <_vfiprintf_r+0x240>)
 800a012:	429d      	cmp	r5, r3
 800a014:	d11b      	bne.n	800a04e <_vfiprintf_r+0x56>
 800a016:	6875      	ldr	r5, [r6, #4]
 800a018:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a01a:	07d9      	lsls	r1, r3, #31
 800a01c:	d405      	bmi.n	800a02a <_vfiprintf_r+0x32>
 800a01e:	89ab      	ldrh	r3, [r5, #12]
 800a020:	059a      	lsls	r2, r3, #22
 800a022:	d402      	bmi.n	800a02a <_vfiprintf_r+0x32>
 800a024:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a026:	f7ff ff67 	bl	8009ef8 <__retarget_lock_acquire_recursive>
 800a02a:	89ab      	ldrh	r3, [r5, #12]
 800a02c:	071b      	lsls	r3, r3, #28
 800a02e:	d501      	bpl.n	800a034 <_vfiprintf_r+0x3c>
 800a030:	692b      	ldr	r3, [r5, #16]
 800a032:	b9eb      	cbnz	r3, 800a070 <_vfiprintf_r+0x78>
 800a034:	4629      	mov	r1, r5
 800a036:	4630      	mov	r0, r6
 800a038:	f000 f960 	bl	800a2fc <__swsetup_r>
 800a03c:	b1c0      	cbz	r0, 800a070 <_vfiprintf_r+0x78>
 800a03e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a040:	07dc      	lsls	r4, r3, #31
 800a042:	d50e      	bpl.n	800a062 <_vfiprintf_r+0x6a>
 800a044:	f04f 30ff 	mov.w	r0, #4294967295
 800a048:	b01d      	add	sp, #116	; 0x74
 800a04a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a04e:	4b7b      	ldr	r3, [pc, #492]	; (800a23c <_vfiprintf_r+0x244>)
 800a050:	429d      	cmp	r5, r3
 800a052:	d101      	bne.n	800a058 <_vfiprintf_r+0x60>
 800a054:	68b5      	ldr	r5, [r6, #8]
 800a056:	e7df      	b.n	800a018 <_vfiprintf_r+0x20>
 800a058:	4b79      	ldr	r3, [pc, #484]	; (800a240 <_vfiprintf_r+0x248>)
 800a05a:	429d      	cmp	r5, r3
 800a05c:	bf08      	it	eq
 800a05e:	68f5      	ldreq	r5, [r6, #12]
 800a060:	e7da      	b.n	800a018 <_vfiprintf_r+0x20>
 800a062:	89ab      	ldrh	r3, [r5, #12]
 800a064:	0598      	lsls	r0, r3, #22
 800a066:	d4ed      	bmi.n	800a044 <_vfiprintf_r+0x4c>
 800a068:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a06a:	f7ff ff46 	bl	8009efa <__retarget_lock_release_recursive>
 800a06e:	e7e9      	b.n	800a044 <_vfiprintf_r+0x4c>
 800a070:	2300      	movs	r3, #0
 800a072:	9309      	str	r3, [sp, #36]	; 0x24
 800a074:	2320      	movs	r3, #32
 800a076:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a07a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a07e:	2330      	movs	r3, #48	; 0x30
 800a080:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a244 <_vfiprintf_r+0x24c>
 800a084:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a088:	f04f 0901 	mov.w	r9, #1
 800a08c:	4623      	mov	r3, r4
 800a08e:	469a      	mov	sl, r3
 800a090:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a094:	b10a      	cbz	r2, 800a09a <_vfiprintf_r+0xa2>
 800a096:	2a25      	cmp	r2, #37	; 0x25
 800a098:	d1f9      	bne.n	800a08e <_vfiprintf_r+0x96>
 800a09a:	ebba 0b04 	subs.w	fp, sl, r4
 800a09e:	d00b      	beq.n	800a0b8 <_vfiprintf_r+0xc0>
 800a0a0:	465b      	mov	r3, fp
 800a0a2:	4622      	mov	r2, r4
 800a0a4:	4629      	mov	r1, r5
 800a0a6:	4630      	mov	r0, r6
 800a0a8:	f7ff ff94 	bl	8009fd4 <__sfputs_r>
 800a0ac:	3001      	adds	r0, #1
 800a0ae:	f000 80aa 	beq.w	800a206 <_vfiprintf_r+0x20e>
 800a0b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0b4:	445a      	add	r2, fp
 800a0b6:	9209      	str	r2, [sp, #36]	; 0x24
 800a0b8:	f89a 3000 	ldrb.w	r3, [sl]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	f000 80a2 	beq.w	800a206 <_vfiprintf_r+0x20e>
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	f04f 32ff 	mov.w	r2, #4294967295
 800a0c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a0cc:	f10a 0a01 	add.w	sl, sl, #1
 800a0d0:	9304      	str	r3, [sp, #16]
 800a0d2:	9307      	str	r3, [sp, #28]
 800a0d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a0d8:	931a      	str	r3, [sp, #104]	; 0x68
 800a0da:	4654      	mov	r4, sl
 800a0dc:	2205      	movs	r2, #5
 800a0de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0e2:	4858      	ldr	r0, [pc, #352]	; (800a244 <_vfiprintf_r+0x24c>)
 800a0e4:	f7f6 f884 	bl	80001f0 <memchr>
 800a0e8:	9a04      	ldr	r2, [sp, #16]
 800a0ea:	b9d8      	cbnz	r0, 800a124 <_vfiprintf_r+0x12c>
 800a0ec:	06d1      	lsls	r1, r2, #27
 800a0ee:	bf44      	itt	mi
 800a0f0:	2320      	movmi	r3, #32
 800a0f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0f6:	0713      	lsls	r3, r2, #28
 800a0f8:	bf44      	itt	mi
 800a0fa:	232b      	movmi	r3, #43	; 0x2b
 800a0fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a100:	f89a 3000 	ldrb.w	r3, [sl]
 800a104:	2b2a      	cmp	r3, #42	; 0x2a
 800a106:	d015      	beq.n	800a134 <_vfiprintf_r+0x13c>
 800a108:	9a07      	ldr	r2, [sp, #28]
 800a10a:	4654      	mov	r4, sl
 800a10c:	2000      	movs	r0, #0
 800a10e:	f04f 0c0a 	mov.w	ip, #10
 800a112:	4621      	mov	r1, r4
 800a114:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a118:	3b30      	subs	r3, #48	; 0x30
 800a11a:	2b09      	cmp	r3, #9
 800a11c:	d94e      	bls.n	800a1bc <_vfiprintf_r+0x1c4>
 800a11e:	b1b0      	cbz	r0, 800a14e <_vfiprintf_r+0x156>
 800a120:	9207      	str	r2, [sp, #28]
 800a122:	e014      	b.n	800a14e <_vfiprintf_r+0x156>
 800a124:	eba0 0308 	sub.w	r3, r0, r8
 800a128:	fa09 f303 	lsl.w	r3, r9, r3
 800a12c:	4313      	orrs	r3, r2
 800a12e:	9304      	str	r3, [sp, #16]
 800a130:	46a2      	mov	sl, r4
 800a132:	e7d2      	b.n	800a0da <_vfiprintf_r+0xe2>
 800a134:	9b03      	ldr	r3, [sp, #12]
 800a136:	1d19      	adds	r1, r3, #4
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	9103      	str	r1, [sp, #12]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	bfbb      	ittet	lt
 800a140:	425b      	neglt	r3, r3
 800a142:	f042 0202 	orrlt.w	r2, r2, #2
 800a146:	9307      	strge	r3, [sp, #28]
 800a148:	9307      	strlt	r3, [sp, #28]
 800a14a:	bfb8      	it	lt
 800a14c:	9204      	strlt	r2, [sp, #16]
 800a14e:	7823      	ldrb	r3, [r4, #0]
 800a150:	2b2e      	cmp	r3, #46	; 0x2e
 800a152:	d10c      	bne.n	800a16e <_vfiprintf_r+0x176>
 800a154:	7863      	ldrb	r3, [r4, #1]
 800a156:	2b2a      	cmp	r3, #42	; 0x2a
 800a158:	d135      	bne.n	800a1c6 <_vfiprintf_r+0x1ce>
 800a15a:	9b03      	ldr	r3, [sp, #12]
 800a15c:	1d1a      	adds	r2, r3, #4
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	9203      	str	r2, [sp, #12]
 800a162:	2b00      	cmp	r3, #0
 800a164:	bfb8      	it	lt
 800a166:	f04f 33ff 	movlt.w	r3, #4294967295
 800a16a:	3402      	adds	r4, #2
 800a16c:	9305      	str	r3, [sp, #20]
 800a16e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a254 <_vfiprintf_r+0x25c>
 800a172:	7821      	ldrb	r1, [r4, #0]
 800a174:	2203      	movs	r2, #3
 800a176:	4650      	mov	r0, sl
 800a178:	f7f6 f83a 	bl	80001f0 <memchr>
 800a17c:	b140      	cbz	r0, 800a190 <_vfiprintf_r+0x198>
 800a17e:	2340      	movs	r3, #64	; 0x40
 800a180:	eba0 000a 	sub.w	r0, r0, sl
 800a184:	fa03 f000 	lsl.w	r0, r3, r0
 800a188:	9b04      	ldr	r3, [sp, #16]
 800a18a:	4303      	orrs	r3, r0
 800a18c:	3401      	adds	r4, #1
 800a18e:	9304      	str	r3, [sp, #16]
 800a190:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a194:	482c      	ldr	r0, [pc, #176]	; (800a248 <_vfiprintf_r+0x250>)
 800a196:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a19a:	2206      	movs	r2, #6
 800a19c:	f7f6 f828 	bl	80001f0 <memchr>
 800a1a0:	2800      	cmp	r0, #0
 800a1a2:	d03f      	beq.n	800a224 <_vfiprintf_r+0x22c>
 800a1a4:	4b29      	ldr	r3, [pc, #164]	; (800a24c <_vfiprintf_r+0x254>)
 800a1a6:	bb1b      	cbnz	r3, 800a1f0 <_vfiprintf_r+0x1f8>
 800a1a8:	9b03      	ldr	r3, [sp, #12]
 800a1aa:	3307      	adds	r3, #7
 800a1ac:	f023 0307 	bic.w	r3, r3, #7
 800a1b0:	3308      	adds	r3, #8
 800a1b2:	9303      	str	r3, [sp, #12]
 800a1b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1b6:	443b      	add	r3, r7
 800a1b8:	9309      	str	r3, [sp, #36]	; 0x24
 800a1ba:	e767      	b.n	800a08c <_vfiprintf_r+0x94>
 800a1bc:	fb0c 3202 	mla	r2, ip, r2, r3
 800a1c0:	460c      	mov	r4, r1
 800a1c2:	2001      	movs	r0, #1
 800a1c4:	e7a5      	b.n	800a112 <_vfiprintf_r+0x11a>
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	3401      	adds	r4, #1
 800a1ca:	9305      	str	r3, [sp, #20]
 800a1cc:	4619      	mov	r1, r3
 800a1ce:	f04f 0c0a 	mov.w	ip, #10
 800a1d2:	4620      	mov	r0, r4
 800a1d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1d8:	3a30      	subs	r2, #48	; 0x30
 800a1da:	2a09      	cmp	r2, #9
 800a1dc:	d903      	bls.n	800a1e6 <_vfiprintf_r+0x1ee>
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d0c5      	beq.n	800a16e <_vfiprintf_r+0x176>
 800a1e2:	9105      	str	r1, [sp, #20]
 800a1e4:	e7c3      	b.n	800a16e <_vfiprintf_r+0x176>
 800a1e6:	fb0c 2101 	mla	r1, ip, r1, r2
 800a1ea:	4604      	mov	r4, r0
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	e7f0      	b.n	800a1d2 <_vfiprintf_r+0x1da>
 800a1f0:	ab03      	add	r3, sp, #12
 800a1f2:	9300      	str	r3, [sp, #0]
 800a1f4:	462a      	mov	r2, r5
 800a1f6:	4b16      	ldr	r3, [pc, #88]	; (800a250 <_vfiprintf_r+0x258>)
 800a1f8:	a904      	add	r1, sp, #16
 800a1fa:	4630      	mov	r0, r6
 800a1fc:	f7fb f9be 	bl	800557c <_printf_float>
 800a200:	4607      	mov	r7, r0
 800a202:	1c78      	adds	r0, r7, #1
 800a204:	d1d6      	bne.n	800a1b4 <_vfiprintf_r+0x1bc>
 800a206:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a208:	07d9      	lsls	r1, r3, #31
 800a20a:	d405      	bmi.n	800a218 <_vfiprintf_r+0x220>
 800a20c:	89ab      	ldrh	r3, [r5, #12]
 800a20e:	059a      	lsls	r2, r3, #22
 800a210:	d402      	bmi.n	800a218 <_vfiprintf_r+0x220>
 800a212:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a214:	f7ff fe71 	bl	8009efa <__retarget_lock_release_recursive>
 800a218:	89ab      	ldrh	r3, [r5, #12]
 800a21a:	065b      	lsls	r3, r3, #25
 800a21c:	f53f af12 	bmi.w	800a044 <_vfiprintf_r+0x4c>
 800a220:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a222:	e711      	b.n	800a048 <_vfiprintf_r+0x50>
 800a224:	ab03      	add	r3, sp, #12
 800a226:	9300      	str	r3, [sp, #0]
 800a228:	462a      	mov	r2, r5
 800a22a:	4b09      	ldr	r3, [pc, #36]	; (800a250 <_vfiprintf_r+0x258>)
 800a22c:	a904      	add	r1, sp, #16
 800a22e:	4630      	mov	r0, r6
 800a230:	f7fb fc48 	bl	8005ac4 <_printf_i>
 800a234:	e7e4      	b.n	800a200 <_vfiprintf_r+0x208>
 800a236:	bf00      	nop
 800a238:	0800aa7c 	.word	0x0800aa7c
 800a23c:	0800aa9c 	.word	0x0800aa9c
 800a240:	0800aa5c 	.word	0x0800aa5c
 800a244:	0800a9f4 	.word	0x0800a9f4
 800a248:	0800a9fe 	.word	0x0800a9fe
 800a24c:	0800557d 	.word	0x0800557d
 800a250:	08009fd5 	.word	0x08009fd5
 800a254:	0800a9fa 	.word	0x0800a9fa

0800a258 <__swbuf_r>:
 800a258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a25a:	460e      	mov	r6, r1
 800a25c:	4614      	mov	r4, r2
 800a25e:	4605      	mov	r5, r0
 800a260:	b118      	cbz	r0, 800a26a <__swbuf_r+0x12>
 800a262:	6983      	ldr	r3, [r0, #24]
 800a264:	b90b      	cbnz	r3, 800a26a <__swbuf_r+0x12>
 800a266:	f7ff fd97 	bl	8009d98 <__sinit>
 800a26a:	4b21      	ldr	r3, [pc, #132]	; (800a2f0 <__swbuf_r+0x98>)
 800a26c:	429c      	cmp	r4, r3
 800a26e:	d12b      	bne.n	800a2c8 <__swbuf_r+0x70>
 800a270:	686c      	ldr	r4, [r5, #4]
 800a272:	69a3      	ldr	r3, [r4, #24]
 800a274:	60a3      	str	r3, [r4, #8]
 800a276:	89a3      	ldrh	r3, [r4, #12]
 800a278:	071a      	lsls	r2, r3, #28
 800a27a:	d52f      	bpl.n	800a2dc <__swbuf_r+0x84>
 800a27c:	6923      	ldr	r3, [r4, #16]
 800a27e:	b36b      	cbz	r3, 800a2dc <__swbuf_r+0x84>
 800a280:	6923      	ldr	r3, [r4, #16]
 800a282:	6820      	ldr	r0, [r4, #0]
 800a284:	1ac0      	subs	r0, r0, r3
 800a286:	6963      	ldr	r3, [r4, #20]
 800a288:	b2f6      	uxtb	r6, r6
 800a28a:	4283      	cmp	r3, r0
 800a28c:	4637      	mov	r7, r6
 800a28e:	dc04      	bgt.n	800a29a <__swbuf_r+0x42>
 800a290:	4621      	mov	r1, r4
 800a292:	4628      	mov	r0, r5
 800a294:	f7ff fcec 	bl	8009c70 <_fflush_r>
 800a298:	bb30      	cbnz	r0, 800a2e8 <__swbuf_r+0x90>
 800a29a:	68a3      	ldr	r3, [r4, #8]
 800a29c:	3b01      	subs	r3, #1
 800a29e:	60a3      	str	r3, [r4, #8]
 800a2a0:	6823      	ldr	r3, [r4, #0]
 800a2a2:	1c5a      	adds	r2, r3, #1
 800a2a4:	6022      	str	r2, [r4, #0]
 800a2a6:	701e      	strb	r6, [r3, #0]
 800a2a8:	6963      	ldr	r3, [r4, #20]
 800a2aa:	3001      	adds	r0, #1
 800a2ac:	4283      	cmp	r3, r0
 800a2ae:	d004      	beq.n	800a2ba <__swbuf_r+0x62>
 800a2b0:	89a3      	ldrh	r3, [r4, #12]
 800a2b2:	07db      	lsls	r3, r3, #31
 800a2b4:	d506      	bpl.n	800a2c4 <__swbuf_r+0x6c>
 800a2b6:	2e0a      	cmp	r6, #10
 800a2b8:	d104      	bne.n	800a2c4 <__swbuf_r+0x6c>
 800a2ba:	4621      	mov	r1, r4
 800a2bc:	4628      	mov	r0, r5
 800a2be:	f7ff fcd7 	bl	8009c70 <_fflush_r>
 800a2c2:	b988      	cbnz	r0, 800a2e8 <__swbuf_r+0x90>
 800a2c4:	4638      	mov	r0, r7
 800a2c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2c8:	4b0a      	ldr	r3, [pc, #40]	; (800a2f4 <__swbuf_r+0x9c>)
 800a2ca:	429c      	cmp	r4, r3
 800a2cc:	d101      	bne.n	800a2d2 <__swbuf_r+0x7a>
 800a2ce:	68ac      	ldr	r4, [r5, #8]
 800a2d0:	e7cf      	b.n	800a272 <__swbuf_r+0x1a>
 800a2d2:	4b09      	ldr	r3, [pc, #36]	; (800a2f8 <__swbuf_r+0xa0>)
 800a2d4:	429c      	cmp	r4, r3
 800a2d6:	bf08      	it	eq
 800a2d8:	68ec      	ldreq	r4, [r5, #12]
 800a2da:	e7ca      	b.n	800a272 <__swbuf_r+0x1a>
 800a2dc:	4621      	mov	r1, r4
 800a2de:	4628      	mov	r0, r5
 800a2e0:	f000 f80c 	bl	800a2fc <__swsetup_r>
 800a2e4:	2800      	cmp	r0, #0
 800a2e6:	d0cb      	beq.n	800a280 <__swbuf_r+0x28>
 800a2e8:	f04f 37ff 	mov.w	r7, #4294967295
 800a2ec:	e7ea      	b.n	800a2c4 <__swbuf_r+0x6c>
 800a2ee:	bf00      	nop
 800a2f0:	0800aa7c 	.word	0x0800aa7c
 800a2f4:	0800aa9c 	.word	0x0800aa9c
 800a2f8:	0800aa5c 	.word	0x0800aa5c

0800a2fc <__swsetup_r>:
 800a2fc:	4b32      	ldr	r3, [pc, #200]	; (800a3c8 <__swsetup_r+0xcc>)
 800a2fe:	b570      	push	{r4, r5, r6, lr}
 800a300:	681d      	ldr	r5, [r3, #0]
 800a302:	4606      	mov	r6, r0
 800a304:	460c      	mov	r4, r1
 800a306:	b125      	cbz	r5, 800a312 <__swsetup_r+0x16>
 800a308:	69ab      	ldr	r3, [r5, #24]
 800a30a:	b913      	cbnz	r3, 800a312 <__swsetup_r+0x16>
 800a30c:	4628      	mov	r0, r5
 800a30e:	f7ff fd43 	bl	8009d98 <__sinit>
 800a312:	4b2e      	ldr	r3, [pc, #184]	; (800a3cc <__swsetup_r+0xd0>)
 800a314:	429c      	cmp	r4, r3
 800a316:	d10f      	bne.n	800a338 <__swsetup_r+0x3c>
 800a318:	686c      	ldr	r4, [r5, #4]
 800a31a:	89a3      	ldrh	r3, [r4, #12]
 800a31c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a320:	0719      	lsls	r1, r3, #28
 800a322:	d42c      	bmi.n	800a37e <__swsetup_r+0x82>
 800a324:	06dd      	lsls	r5, r3, #27
 800a326:	d411      	bmi.n	800a34c <__swsetup_r+0x50>
 800a328:	2309      	movs	r3, #9
 800a32a:	6033      	str	r3, [r6, #0]
 800a32c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a330:	81a3      	strh	r3, [r4, #12]
 800a332:	f04f 30ff 	mov.w	r0, #4294967295
 800a336:	e03e      	b.n	800a3b6 <__swsetup_r+0xba>
 800a338:	4b25      	ldr	r3, [pc, #148]	; (800a3d0 <__swsetup_r+0xd4>)
 800a33a:	429c      	cmp	r4, r3
 800a33c:	d101      	bne.n	800a342 <__swsetup_r+0x46>
 800a33e:	68ac      	ldr	r4, [r5, #8]
 800a340:	e7eb      	b.n	800a31a <__swsetup_r+0x1e>
 800a342:	4b24      	ldr	r3, [pc, #144]	; (800a3d4 <__swsetup_r+0xd8>)
 800a344:	429c      	cmp	r4, r3
 800a346:	bf08      	it	eq
 800a348:	68ec      	ldreq	r4, [r5, #12]
 800a34a:	e7e6      	b.n	800a31a <__swsetup_r+0x1e>
 800a34c:	0758      	lsls	r0, r3, #29
 800a34e:	d512      	bpl.n	800a376 <__swsetup_r+0x7a>
 800a350:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a352:	b141      	cbz	r1, 800a366 <__swsetup_r+0x6a>
 800a354:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a358:	4299      	cmp	r1, r3
 800a35a:	d002      	beq.n	800a362 <__swsetup_r+0x66>
 800a35c:	4630      	mov	r0, r6
 800a35e:	f7fe fd4f 	bl	8008e00 <_free_r>
 800a362:	2300      	movs	r3, #0
 800a364:	6363      	str	r3, [r4, #52]	; 0x34
 800a366:	89a3      	ldrh	r3, [r4, #12]
 800a368:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a36c:	81a3      	strh	r3, [r4, #12]
 800a36e:	2300      	movs	r3, #0
 800a370:	6063      	str	r3, [r4, #4]
 800a372:	6923      	ldr	r3, [r4, #16]
 800a374:	6023      	str	r3, [r4, #0]
 800a376:	89a3      	ldrh	r3, [r4, #12]
 800a378:	f043 0308 	orr.w	r3, r3, #8
 800a37c:	81a3      	strh	r3, [r4, #12]
 800a37e:	6923      	ldr	r3, [r4, #16]
 800a380:	b94b      	cbnz	r3, 800a396 <__swsetup_r+0x9a>
 800a382:	89a3      	ldrh	r3, [r4, #12]
 800a384:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a388:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a38c:	d003      	beq.n	800a396 <__swsetup_r+0x9a>
 800a38e:	4621      	mov	r1, r4
 800a390:	4630      	mov	r0, r6
 800a392:	f000 f84d 	bl	800a430 <__smakebuf_r>
 800a396:	89a0      	ldrh	r0, [r4, #12]
 800a398:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a39c:	f010 0301 	ands.w	r3, r0, #1
 800a3a0:	d00a      	beq.n	800a3b8 <__swsetup_r+0xbc>
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	60a3      	str	r3, [r4, #8]
 800a3a6:	6963      	ldr	r3, [r4, #20]
 800a3a8:	425b      	negs	r3, r3
 800a3aa:	61a3      	str	r3, [r4, #24]
 800a3ac:	6923      	ldr	r3, [r4, #16]
 800a3ae:	b943      	cbnz	r3, 800a3c2 <__swsetup_r+0xc6>
 800a3b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a3b4:	d1ba      	bne.n	800a32c <__swsetup_r+0x30>
 800a3b6:	bd70      	pop	{r4, r5, r6, pc}
 800a3b8:	0781      	lsls	r1, r0, #30
 800a3ba:	bf58      	it	pl
 800a3bc:	6963      	ldrpl	r3, [r4, #20]
 800a3be:	60a3      	str	r3, [r4, #8]
 800a3c0:	e7f4      	b.n	800a3ac <__swsetup_r+0xb0>
 800a3c2:	2000      	movs	r0, #0
 800a3c4:	e7f7      	b.n	800a3b6 <__swsetup_r+0xba>
 800a3c6:	bf00      	nop
 800a3c8:	20000018 	.word	0x20000018
 800a3cc:	0800aa7c 	.word	0x0800aa7c
 800a3d0:	0800aa9c 	.word	0x0800aa9c
 800a3d4:	0800aa5c 	.word	0x0800aa5c

0800a3d8 <abort>:
 800a3d8:	b508      	push	{r3, lr}
 800a3da:	2006      	movs	r0, #6
 800a3dc:	f000 f898 	bl	800a510 <raise>
 800a3e0:	2001      	movs	r0, #1
 800a3e2:	f7f7 fca3 	bl	8001d2c <_exit>

0800a3e6 <__swhatbuf_r>:
 800a3e6:	b570      	push	{r4, r5, r6, lr}
 800a3e8:	460e      	mov	r6, r1
 800a3ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3ee:	2900      	cmp	r1, #0
 800a3f0:	b096      	sub	sp, #88	; 0x58
 800a3f2:	4614      	mov	r4, r2
 800a3f4:	461d      	mov	r5, r3
 800a3f6:	da08      	bge.n	800a40a <__swhatbuf_r+0x24>
 800a3f8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	602a      	str	r2, [r5, #0]
 800a400:	061a      	lsls	r2, r3, #24
 800a402:	d410      	bmi.n	800a426 <__swhatbuf_r+0x40>
 800a404:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a408:	e00e      	b.n	800a428 <__swhatbuf_r+0x42>
 800a40a:	466a      	mov	r2, sp
 800a40c:	f000 f89c 	bl	800a548 <_fstat_r>
 800a410:	2800      	cmp	r0, #0
 800a412:	dbf1      	blt.n	800a3f8 <__swhatbuf_r+0x12>
 800a414:	9a01      	ldr	r2, [sp, #4]
 800a416:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a41a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a41e:	425a      	negs	r2, r3
 800a420:	415a      	adcs	r2, r3
 800a422:	602a      	str	r2, [r5, #0]
 800a424:	e7ee      	b.n	800a404 <__swhatbuf_r+0x1e>
 800a426:	2340      	movs	r3, #64	; 0x40
 800a428:	2000      	movs	r0, #0
 800a42a:	6023      	str	r3, [r4, #0]
 800a42c:	b016      	add	sp, #88	; 0x58
 800a42e:	bd70      	pop	{r4, r5, r6, pc}

0800a430 <__smakebuf_r>:
 800a430:	898b      	ldrh	r3, [r1, #12]
 800a432:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a434:	079d      	lsls	r5, r3, #30
 800a436:	4606      	mov	r6, r0
 800a438:	460c      	mov	r4, r1
 800a43a:	d507      	bpl.n	800a44c <__smakebuf_r+0x1c>
 800a43c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a440:	6023      	str	r3, [r4, #0]
 800a442:	6123      	str	r3, [r4, #16]
 800a444:	2301      	movs	r3, #1
 800a446:	6163      	str	r3, [r4, #20]
 800a448:	b002      	add	sp, #8
 800a44a:	bd70      	pop	{r4, r5, r6, pc}
 800a44c:	ab01      	add	r3, sp, #4
 800a44e:	466a      	mov	r2, sp
 800a450:	f7ff ffc9 	bl	800a3e6 <__swhatbuf_r>
 800a454:	9900      	ldr	r1, [sp, #0]
 800a456:	4605      	mov	r5, r0
 800a458:	4630      	mov	r0, r6
 800a45a:	f7fe fd3d 	bl	8008ed8 <_malloc_r>
 800a45e:	b948      	cbnz	r0, 800a474 <__smakebuf_r+0x44>
 800a460:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a464:	059a      	lsls	r2, r3, #22
 800a466:	d4ef      	bmi.n	800a448 <__smakebuf_r+0x18>
 800a468:	f023 0303 	bic.w	r3, r3, #3
 800a46c:	f043 0302 	orr.w	r3, r3, #2
 800a470:	81a3      	strh	r3, [r4, #12]
 800a472:	e7e3      	b.n	800a43c <__smakebuf_r+0xc>
 800a474:	4b0d      	ldr	r3, [pc, #52]	; (800a4ac <__smakebuf_r+0x7c>)
 800a476:	62b3      	str	r3, [r6, #40]	; 0x28
 800a478:	89a3      	ldrh	r3, [r4, #12]
 800a47a:	6020      	str	r0, [r4, #0]
 800a47c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a480:	81a3      	strh	r3, [r4, #12]
 800a482:	9b00      	ldr	r3, [sp, #0]
 800a484:	6163      	str	r3, [r4, #20]
 800a486:	9b01      	ldr	r3, [sp, #4]
 800a488:	6120      	str	r0, [r4, #16]
 800a48a:	b15b      	cbz	r3, 800a4a4 <__smakebuf_r+0x74>
 800a48c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a490:	4630      	mov	r0, r6
 800a492:	f000 f86b 	bl	800a56c <_isatty_r>
 800a496:	b128      	cbz	r0, 800a4a4 <__smakebuf_r+0x74>
 800a498:	89a3      	ldrh	r3, [r4, #12]
 800a49a:	f023 0303 	bic.w	r3, r3, #3
 800a49e:	f043 0301 	orr.w	r3, r3, #1
 800a4a2:	81a3      	strh	r3, [r4, #12]
 800a4a4:	89a0      	ldrh	r0, [r4, #12]
 800a4a6:	4305      	orrs	r5, r0
 800a4a8:	81a5      	strh	r5, [r4, #12]
 800a4aa:	e7cd      	b.n	800a448 <__smakebuf_r+0x18>
 800a4ac:	08009d31 	.word	0x08009d31

0800a4b0 <_malloc_usable_size_r>:
 800a4b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4b4:	1f18      	subs	r0, r3, #4
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	bfbc      	itt	lt
 800a4ba:	580b      	ldrlt	r3, [r1, r0]
 800a4bc:	18c0      	addlt	r0, r0, r3
 800a4be:	4770      	bx	lr

0800a4c0 <_raise_r>:
 800a4c0:	291f      	cmp	r1, #31
 800a4c2:	b538      	push	{r3, r4, r5, lr}
 800a4c4:	4604      	mov	r4, r0
 800a4c6:	460d      	mov	r5, r1
 800a4c8:	d904      	bls.n	800a4d4 <_raise_r+0x14>
 800a4ca:	2316      	movs	r3, #22
 800a4cc:	6003      	str	r3, [r0, #0]
 800a4ce:	f04f 30ff 	mov.w	r0, #4294967295
 800a4d2:	bd38      	pop	{r3, r4, r5, pc}
 800a4d4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a4d6:	b112      	cbz	r2, 800a4de <_raise_r+0x1e>
 800a4d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a4dc:	b94b      	cbnz	r3, 800a4f2 <_raise_r+0x32>
 800a4de:	4620      	mov	r0, r4
 800a4e0:	f000 f830 	bl	800a544 <_getpid_r>
 800a4e4:	462a      	mov	r2, r5
 800a4e6:	4601      	mov	r1, r0
 800a4e8:	4620      	mov	r0, r4
 800a4ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a4ee:	f000 b817 	b.w	800a520 <_kill_r>
 800a4f2:	2b01      	cmp	r3, #1
 800a4f4:	d00a      	beq.n	800a50c <_raise_r+0x4c>
 800a4f6:	1c59      	adds	r1, r3, #1
 800a4f8:	d103      	bne.n	800a502 <_raise_r+0x42>
 800a4fa:	2316      	movs	r3, #22
 800a4fc:	6003      	str	r3, [r0, #0]
 800a4fe:	2001      	movs	r0, #1
 800a500:	e7e7      	b.n	800a4d2 <_raise_r+0x12>
 800a502:	2400      	movs	r4, #0
 800a504:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a508:	4628      	mov	r0, r5
 800a50a:	4798      	blx	r3
 800a50c:	2000      	movs	r0, #0
 800a50e:	e7e0      	b.n	800a4d2 <_raise_r+0x12>

0800a510 <raise>:
 800a510:	4b02      	ldr	r3, [pc, #8]	; (800a51c <raise+0xc>)
 800a512:	4601      	mov	r1, r0
 800a514:	6818      	ldr	r0, [r3, #0]
 800a516:	f7ff bfd3 	b.w	800a4c0 <_raise_r>
 800a51a:	bf00      	nop
 800a51c:	20000018 	.word	0x20000018

0800a520 <_kill_r>:
 800a520:	b538      	push	{r3, r4, r5, lr}
 800a522:	4d07      	ldr	r5, [pc, #28]	; (800a540 <_kill_r+0x20>)
 800a524:	2300      	movs	r3, #0
 800a526:	4604      	mov	r4, r0
 800a528:	4608      	mov	r0, r1
 800a52a:	4611      	mov	r1, r2
 800a52c:	602b      	str	r3, [r5, #0]
 800a52e:	f7f7 fbed 	bl	8001d0c <_kill>
 800a532:	1c43      	adds	r3, r0, #1
 800a534:	d102      	bne.n	800a53c <_kill_r+0x1c>
 800a536:	682b      	ldr	r3, [r5, #0]
 800a538:	b103      	cbz	r3, 800a53c <_kill_r+0x1c>
 800a53a:	6023      	str	r3, [r4, #0]
 800a53c:	bd38      	pop	{r3, r4, r5, pc}
 800a53e:	bf00      	nop
 800a540:	200003c4 	.word	0x200003c4

0800a544 <_getpid_r>:
 800a544:	f7f7 bbda 	b.w	8001cfc <_getpid>

0800a548 <_fstat_r>:
 800a548:	b538      	push	{r3, r4, r5, lr}
 800a54a:	4d07      	ldr	r5, [pc, #28]	; (800a568 <_fstat_r+0x20>)
 800a54c:	2300      	movs	r3, #0
 800a54e:	4604      	mov	r4, r0
 800a550:	4608      	mov	r0, r1
 800a552:	4611      	mov	r1, r2
 800a554:	602b      	str	r3, [r5, #0]
 800a556:	f7f7 fc38 	bl	8001dca <_fstat>
 800a55a:	1c43      	adds	r3, r0, #1
 800a55c:	d102      	bne.n	800a564 <_fstat_r+0x1c>
 800a55e:	682b      	ldr	r3, [r5, #0]
 800a560:	b103      	cbz	r3, 800a564 <_fstat_r+0x1c>
 800a562:	6023      	str	r3, [r4, #0]
 800a564:	bd38      	pop	{r3, r4, r5, pc}
 800a566:	bf00      	nop
 800a568:	200003c4 	.word	0x200003c4

0800a56c <_isatty_r>:
 800a56c:	b538      	push	{r3, r4, r5, lr}
 800a56e:	4d06      	ldr	r5, [pc, #24]	; (800a588 <_isatty_r+0x1c>)
 800a570:	2300      	movs	r3, #0
 800a572:	4604      	mov	r4, r0
 800a574:	4608      	mov	r0, r1
 800a576:	602b      	str	r3, [r5, #0]
 800a578:	f7f7 fc37 	bl	8001dea <_isatty>
 800a57c:	1c43      	adds	r3, r0, #1
 800a57e:	d102      	bne.n	800a586 <_isatty_r+0x1a>
 800a580:	682b      	ldr	r3, [r5, #0]
 800a582:	b103      	cbz	r3, 800a586 <_isatty_r+0x1a>
 800a584:	6023      	str	r3, [r4, #0]
 800a586:	bd38      	pop	{r3, r4, r5, pc}
 800a588:	200003c4 	.word	0x200003c4

0800a58c <_init>:
 800a58c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a58e:	bf00      	nop
 800a590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a592:	bc08      	pop	{r3}
 800a594:	469e      	mov	lr, r3
 800a596:	4770      	bx	lr

0800a598 <_fini>:
 800a598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a59a:	bf00      	nop
 800a59c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a59e:	bc08      	pop	{r3}
 800a5a0:	469e      	mov	lr, r3
 800a5a2:	4770      	bx	lr
